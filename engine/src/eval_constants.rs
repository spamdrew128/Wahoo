#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i16, eg: i16) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(227, 316), s(338, 352), s(341, 405), s(404, 370), s(533, 352), s(307, 373), s(366, 334), s(307, 265), 
  s(368, 377), s(407, 401), s(536, 371), s(493, 402), s(477, 390), s(545, 367), s(447, 379), s(441, 344), 
  s(380, 387), s(507, 386), s(505, 418), s(537, 412), s(568, 394), s(596, 389), s(528, 378), s(472, 359), 
  s(428, 393), s(449, 420), s(469, 440), s(511, 438), s(478, 443), s(534, 425), s(457, 423), s(473, 379), 
  s(407, 400), s(434, 407), s(453, 439), s(452, 441), s(467, 437), s(454, 437), s(473, 411), s(420, 387), 
  s(393, 376), s(416, 409), s(442, 406), s(442, 427), s(459, 427), s(446, 403), s(456, 385), s(399, 383), 
  s(382, 350), s(380, 383), s(412, 392), s(422, 401), s(423, 403), s(447, 383), s(426, 362), s(412, 352), 
  s(285, 349), s(392, 325), s(369, 376), s(387, 386), s(395, 380), s(403, 375), s(396, 344), s(394, 316), 
]),
// Bishop PST
Pst::new([
  s(442, 419), s(432, 420), s(354, 439), s(328, 445), s(388, 430), s(370, 429), s(437, 416), s(425, 411), 
  s(455, 420), s(506, 429), s(455, 435), s(446, 428), s(530, 420), s(514, 423), s(522, 424), s(418, 418), 
  s(439, 437), s(510, 427), s(523, 433), s(529, 427), s(533, 425), s(559, 430), s(518, 435), s(493, 426), 
  s(460, 428), s(470, 447), s(503, 451), s(537, 448), s(520, 455), s(527, 440), s(479, 440), s(457, 439), 
  s(457, 427), s(479, 441), s(480, 452), s(505, 456), s(507, 446), s(481, 445), s(477, 432), s(457, 422), 
  s(472, 415), s(486, 430), s(483, 445), s(484, 443), s(484, 450), s(490, 439), s(480, 428), s(474, 415), 
  s(481, 396), s(483, 403), s(488, 415), s(465, 429), s(473, 432), s(492, 420), s(504, 406), s(471, 392), 
  s(433, 398), s(465, 417), s(447, 397), s(440, 425), s(454, 418), s(445, 412), s(456, 412), s(445, 396), 
]),
// Rook PST
Pst::new([
  s(638, 774), s(661, 766), s(618, 787), s(663, 773), s(664, 773), s(614, 779), s(631, 767), s(662, 763), 
  s(617, 779), s(622, 784), s(658, 777), s(686, 767), s(695, 751), s(701, 756), s(624, 775), s(642, 767), 
  s(570, 783), s(610, 779), s(615, 779), s(630, 774), s(629, 767), s(668, 750), s(674, 753), s(625, 755), 
  s(541, 785), s(586, 770), s(585, 786), s(607, 773), s(604, 767), s(611, 768), s(591, 761), s(581, 765), 
  s(524, 779), s(537, 779), s(557, 782), s(569, 777), s(591, 759), s(565, 761), s(591, 752), s(556, 757), 
  s(517, 766), s(544, 769), s(551, 763), s(553, 762), s(559, 765), s(566, 751), s(588, 743), s(542, 746), 
  s(513, 766), s(551, 756), s(554, 760), s(556, 767), s(564, 755), s(576, 752), s(585, 742), s(490, 764), 
  s(547, 753), s(554, 766), s(568, 769), s(577, 768), s(580, 761), s(563, 754), s(543, 766), s(547, 732), 
]),
// Queen PST
Pst::new([
  s(1210, 1361), s(1222, 1391), s(1234, 1412), s(1261, 1400), s(1354, 1351), s(1316, 1369), s(1316, 1341), s(1301, 1380), 
  s(1254, 1322), s(1221, 1379), s(1267, 1393), s(1254, 1415), s(1234, 1455), s(1335, 1374), s(1306, 1371), s(1327, 1342), 
  s(1253, 1329), s(1249, 1359), s(1273, 1365), s(1266, 1418), s(1319, 1403), s(1364, 1381), s(1348, 1350), s(1323, 1369), 
  s(1228, 1361), s(1233, 1384), s(1236, 1388), s(1243, 1424), s(1263, 1426), s(1280, 1420), s(1260, 1426), s(1259, 1403), 
  s(1241, 1332), s(1226, 1390), s(1238, 1381), s(1237, 1426), s(1245, 1407), s(1242, 1406), s(1265, 1385), s(1252, 1381), 
  s(1230, 1333), s(1256, 1310), s(1243, 1363), s(1246, 1355), s(1246, 1376), s(1255, 1357), s(1266, 1347), s(1255, 1344), 
  s(1222, 1299), s(1246, 1316), s(1267, 1294), s(1259, 1310), s(1261, 1322), s(1275, 1307), s(1261, 1278), s(1271, 1257), 
  s(1251, 1293), s(1224, 1311), s(1240, 1308), s(1263, 1265), s(1239, 1315), s(1213, 1307), s(1224, 1297), s(1226, 1259), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(173, 275), s(189, 271), s(146, 269), s(181, 244), s(155, 259), s(162, 239), s(115, 272), s(70, 293), 
  s(95, 161), s(134, 158), s(147, 144), s(149, 140), s(211, 117), s(221, 119), s(209, 154), s(142, 144), 
  s(78, 146), s(127, 140), s(119, 125), s(134, 104), s(150, 113), s(133, 119), s(148, 131), s(90, 129), 
  s(63, 137), s(106, 138), s(104, 120), s(131, 110), s(131, 113), s(116, 118), s(129, 125), s(79, 117), 
  s(64, 126), s(102, 132), s(104, 115), s(98, 128), s(116, 130), s(112, 123), s(154, 117), s(95, 107), 
  s(55, 137), s(105, 131), s(84, 133), s(75, 134), s(90, 147), s(136, 127), s(160, 121), s(83, 107), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-43, -118), s(96, -74), s(121, -59), s(15, -26), s(-99, 0), s(-89, 24), s(111, -11), s(49, -47), 
  s(100, -43), s(30, 20), s(-32, 23), s(87, 7), s(17, 29), s(-38, 64), s(7, 38), s(-8, 10), 
  s(-26, 7), s(23, 26), s(77, 19), s(0, 28), s(23, 37), s(97, 57), s(129, 48), s(10, 11), 
  s(4, -12), s(-42, 40), s(-28, 44), s(-80, 56), s(-112, 66), s(-74, 66), s(-49, 54), s(-102, 20), 
  s(-145, 4), s(-24, 7), s(-81, 46), s(-157, 69), s(-157, 74), s(-103, 57), s(-92, 36), s(-120, 8), 
  s(18, -27), s(-13, 4), s(-63, 32), s(-114, 50), s(-86, 49), s(-82, 42), s(-21, 17), s(-39, -4), 
  s(67, -48), s(36, -16), s(-14, 12), s(-79, 28), s(-69, 32), s(-29, 17), s(35, -9), s(46, -37), 
  s(51, -97), s(88, -65), s(52, -41), s(-88, -4), s(10, -44), s(-39, -12), s(64, -51), s(69, -91), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(73, 175), s(89, 171), s(46, 169), s(81, 144), s(55, 159), s(62, 139), s(15, 172), s(-29, 193), 
  s(57, 176), s(8, 183), s(18, 153), s(18, 118), s(-29, 131), s(-12, 145), s(-66, 158), s(-46, 179), 
  s(22, 87), s(-4, 76), s(14, 65), s(8, 61), s(0, 51), s(41, 46), s(-48, 89), s(-22, 85), 
  s(-3, 40), s(-35, 37), s(-36, 30), s(-27, 29), s(-43, 31), s(-17, 24), s(-18, 41), s(11, 35), 
  s(-10, 2), s(-24, 6), s(-40, 12), s(-49, 12), s(-22, -4), s(19, -10), s(-7, 10), s(25, 1), 
  s(-18, -1), s(0, -3), s(0, -7), s(-36, 13), s(-18, -5), s(7, -7), s(27, -6), s(-14, 4), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(83, -247),
  s(35, -145),
  s(1, -61),
  s(6, -39),
  s(-2, -7),
  s(-7, -13),
  s(0, 0),
  s(0, 0),
]);

pub const TEMPO_BONUS: ScoreTuple = s(23, 27);
