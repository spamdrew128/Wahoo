#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(179, 263), s(273, 279), s(239, 331), s(296, 294), s(378, 286), s(229, 300), s(279, 265), s(233, 224), 
  s(272, 310), s(299, 327), s(417, 293), s(355, 322), s(357, 305), s(405, 290), s(346, 304), s(322, 281), 
  s(283, 311), s(390, 311), s(376, 345), s(395, 331), s(394, 320), s(432, 321), s(375, 303), s(329, 291), 
  s(342, 318), s(352, 337), s(356, 360), s(400, 352), s(363, 353), s(406, 341), s(351, 330), s(368, 300), 
  s(328, 327), s(342, 325), s(353, 357), s(359, 357), s(366, 351), s(357, 350), s(374, 324), s(339, 318), 
  s(315, 308), s(328, 329), s(346, 328), s(347, 344), s(364, 343), s(356, 316), s(355, 300), s(324, 314), 
  s(311, 286), s(314, 309), s(333, 312), s(357, 317), s(354, 321), s(352, 307), s(339, 294), s(334, 294), 
  s(234, 294), s(331, 299), s(311, 307), s(325, 321), s(336, 314), s(322, 313), s(331, 313), s(322, 270), 
]),
// Bishop PST
Pst::new([
  s(342, 331), s(314, 325), s(233, 343), s(199, 345), s(257, 331), s(244, 334), s(315, 327), s(310, 322), 
  s(329, 334), s(375, 331), s(320, 334), s(311, 327), s(366, 321), s(362, 326), s(353, 331), s(289, 331), 
  s(329, 340), s(387, 326), s(393, 331), s(381, 324), s(380, 322), s(399, 331), s(363, 335), s(358, 328), 
  s(347, 331), s(366, 338), s(366, 348), s(410, 342), s(382, 346), s(392, 338), s(365, 329), s(340, 338), 
  s(357, 326), s(362, 337), s(362, 344), s(387, 349), s(386, 340), s(360, 338), s(351, 331), s(354, 325), 
  s(363, 321), s(379, 329), s(376, 340), s(375, 339), s(376, 346), s(385, 333), s(369, 333), s(364, 325), 
  s(377, 309), s(382, 313), s(384, 316), s(368, 328), s(378, 326), s(389, 322), s(399, 316), s(370, 309), 
  s(350, 313), s(380, 326), s(366, 328), s(350, 331), s(371, 327), s(353, 340), s(360, 326), s(351, 315), 
]),
// Rook PST
Pst::new([
  s(540, 609), s(562, 601), s(501, 625), s(543, 612), s(530, 615), s(495, 622), s(556, 600), s(559, 600), 
  s(523, 611), s(521, 617), s(551, 611), s(571, 603), s(583, 589), s(565, 601), s(519, 614), s(528, 607), 
  s(490, 612), s(533, 608), s(528, 609), s(549, 604), s(535, 599), s(542, 596), s(570, 593), s(511, 599), 
  s(473, 614), s(519, 599), s(513, 613), s(522, 603), s(515, 602), s(504, 611), s(504, 600), s(487, 606), 
  s(469, 609), s(485, 607), s(497, 610), s(507, 604), s(527, 590), s(485, 601), s(514, 592), s(480, 596), 
  s(474, 596), s(494, 598), s(506, 590), s(510, 588), s(508, 595), s(511, 584), s(517, 584), s(481, 583), 
  s(474, 595), s(503, 587), s(513, 586), s(519, 593), s(524, 583), s(513, 584), s(515, 580), s(445, 597), 
  s(508, 588), s(516, 589), s(531, 588), s(536, 586), s(533, 583), s(515, 586), s(485, 594), s(500, 573), 
]),
// Queen PST
Pst::new([
  s(973, 1063), s(969, 1087), s(969, 1091), s(981, 1086), s(1043, 1063), s(1015, 1067), s(1053, 1047), s(1054, 1069), 
  s(989, 1042), s(947, 1086), s(990, 1086), s(988, 1095), s(957, 1114), s(1024, 1063), s(1016, 1067), s(1063, 1047), 
  s(999, 1048), s(991, 1064), s(1002, 1065), s(990, 1100), s(1030, 1075), s(1055, 1057), s(1042, 1034), s(1036, 1059), 
  s(973, 1085), s(986, 1083), s(972, 1082), s(971, 1108), s(988, 1094), s(1012, 1070), s(1005, 1085), s(1007, 1071), 
  s(1002, 1054), s(970, 1092), s(993, 1079), s(981, 1113), s(992, 1091), s(992, 1065), s(1011, 1064), s(1003, 1073), 
  s(990, 1056), s(1012, 1037), s(1007, 1065), s(1008, 1057), s(1004, 1081), s(1014, 1046), s(1019, 1048), s(1012, 1058), 
  s(999, 1029), s(1009, 1039), s(1027, 1022), s(1032, 1017), s(1033, 1030), s(1036, 1009), s(1016, 997), s(1035, 978), 
  s(1019, 1023), s(1010, 1023), s(1023, 1017), s(1035, 1017), s(1024, 1029), s(991, 1020), s(1001, 1011), s(996, 988), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(203, 244), s(200, 244), s(171, 240), s(195, 221), s(175, 232), s(183, 218), s(148, 245), s(120, 258), 
  s(74, 176), s(92, 184), s(106, 167), s(110, 162), s(155, 150), s(173, 138), s(152, 177), s(106, 165), 
  s(73, 144), s(105, 138), s(96, 125), s(115, 102), s(113, 121), s(111, 124), s(109, 139), s(76, 128), 
  s(63, 135), s(92, 137), s(92, 121), s(115, 110), s(106, 118), s(101, 120), s(96, 130), s(64, 117), 
  s(67, 123), s(93, 129), s(90, 116), s(97, 121), s(103, 130), s(98, 124), s(125, 119), s(81, 106), 
  s(67, 132), s(106, 126), s(85, 125), s(102, 121), s(98, 139), s(121, 127), s(141, 118), s(78, 104), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-67, -104), s(-6, -49), s(13, -30), s(-36, -14), s(-58, -1), s(-71, 23), s(16, 10), s(3, -30), 
  s(19, -23), s(-14, 36), s(-52, 34), s(46, 21), s(-20, 37), s(-34, 60), s(0, 39), s(-29, 16), 
  s(-43, 15), s(15, 32), s(61, 28), s(4, 32), s(31, 39), s(82, 57), s(102, 51), s(-5, 14), 
  s(12, -7), s(0, 35), s(33, 35), s(-26, 47), s(-39, 50), s(-2, 46), s(-3, 40), s(-66, 12), 
  s(-98, 0), s(13, 2), s(-2, 30), s(-66, 48), s(-66, 50), s(-16, 28), s(-33, 16), s(-81, -1), 
  s(35, -29), s(8, -1), s(-1, 15), s(-15, 26), s(5, 24), s(15, 10), s(21, 0), s(-3, -17), 
  s(53, -45), s(42, -18), s(9, 5), s(-29, 17), s(-19, 19), s(2, 8), s(38, -12), s(29, -32), 
  s(7, -80), s(52, -51), s(33, -28), s(-77, 2), s(-2, -23), s(-42, -1), s(29, -35), s(13, -67), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(103, 144), s(100, 144), s(71, 140), s(95, 121), s(75, 132), s(83, 118), s(48, 145), s(20, 158), 
  s(88, 141), s(60, 138), s(44, 122), s(38, 94), s(3, 98), s(34, 122), s(-6, 123), s(-3, 141), 
  s(21, 85), s(0, 77), s(16, 67), s(2, 67), s(3, 51), s(33, 51), s(-31, 84), s(-12, 83), 
  s(-2, 39), s(-28, 35), s(-35, 32), s(-27, 32), s(-40, 32), s(-37, 33), s(-18, 43), s(7, 38), 
  s(-9, 1), s(-22, 10), s(-34, 12), s(-51, 19), s(-37, 3), s(2, -2), s(-34, 19), s(9, 6), 
  s(-19, -4), s(-6, 0), s(-9, 1), s(-51, 18), s(-27, 2), s(-23, 0), s(-23, 10), s(-21, 7), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(-53, -165),
  s(0, -124),
  s(-5, -55),
  s(2, -35),
  s(-6, -4),
  s(-12, -11),
  s(0, 0),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(35, 64);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(38, 21), s(49, 42), s(53, 52), s(65, 54), s(69, 62), s(76, 60), s(78, 58), s(87, 42), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(18, 14), s(32, 33), s(40, 49), s(47, 60), s(51, 70), s(55, 77), s(55, 77), s(52, 84), s(59, 79), s(68, 74), s(91, 71), s(34, 106), s(79, 66), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(12, 62), s(17, 77), s(25, 83), s(24, 95), s(33, 106), s(36, 114), s(42, 115), s(55, 118), s(57, 125), s(60, 130), s(69, 133), s(71, 140), s(73, 137), s(55, 138), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(65, 61), s(68, 79), s(69, 114), s(78, 127), s(82, 145), s(84, 156), s(83, 186), s(87, 196), s(91, 202), s(93, 214), s(97, 222), s(97, 224), s(101, 226), s(104, 229), s(106, 235), s(113, 238), s(123, 225), s(136, 225), s(152, 216), s(148, 223), s(180, 204), s(160, 206), s(181, 198), s(156, 186), s(150, 184), s(113, 159), s(105, 155), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-9, -1), s(-4, 0), s(3, 17), s(6, 10), s(10, 11), s(15, 7), s(10, 21), s(18, 8), s(22, 8), s(24, 8), s(32, 2), s(35, 2), s(30, 2), s(37, -2), s(44, -3), s(42, -4), s(40, -2), s(48, -7), s(40, -9), s(38, -9), s(68, -16), s(47, -11), s(32, -12), s(9, -11), s(4, -8), s(-60, -7), s(13, -8), s(-51, -5), 
],
// Bishop attack values
[
  s(1, 8), s(-1, 13), s(2, 15), s(7, 11), s(10, 16), s(17, 4), s(17, 1), s(19, 7), s(31, -2), s(25, 0), s(37, -7), s(31, -4), s(40, -5), s(38, -7), s(41, -4), s(34, -7), s(34, -5), s(37, -8), s(40, -6), s(37, -8), s(21, -4), s(23, -5), s(-2, 0), s(-17, 0), s(-33, 1), s(-22, -4), s(3, -16), s(-14, -5), 
],
// Rook attack values
[
  s(15, 10), s(3, 0), s(15, -11), s(22, -21), s(21, -15), s(26, -18), s(24, -9), s(18, -7), s(30, -14), s(30, -13), s(37, -15), s(33, -14), s(31, -11), s(28, -10), s(38, -12), s(33, -9), s(35, -9), s(46, -12), s(39, -9), s(38, -8), s(24, -4), s(25, -4), s(33, -7), s(28, -4), s(22, 0), s(52, -10), s(13, 1), s(15, -1), 
],
// Queen attack values
[
  s(-6, 7), s(-3, 7), s(0, -4), s(7, -9), s(10, -3), s(8, 5), s(10, 2), s(12, 13), s(18, 2), s(23, 8), s(17, 13), s(26, 11), s(33, 7), s(29, 10), s(37, 5), s(51, -1), s(50, -1), s(64, -11), s(65, -11), s(74, -15), s(84, -20), s(88, -24), s(69, -5), s(107, -32), s(96, -19), s(107, -33), s(36, 12), s(7, 6), 
],
// Pawn attack values
[
  s(3, 29), s(7, -1), s(8, -8), s(9, -6), s(9, -8), s(7, -8), s(10, -7), s(10, -7), s(8, -8), s(10, -8), s(12, -10), s(11, -10), s(19, -12), s(19, -11), s(17, -12), s(23, -12), s(29, -15), s(28, -15), s(23, -14), s(27, -16), s(40, -19), s(64, -23), s(48, -19), s(32, -18), s(36, -17), s(55, -14), s(48, -10), s(25, -4), 
],
];
