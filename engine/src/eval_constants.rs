#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(224, 330), s(339, 358), s(350, 412), s(416, 375), s(536, 363), s(311, 388), s(379, 342), s(299, 279), 
  s(361, 386), s(398, 409), s(528, 380), s(495, 411), s(480, 401), s(542, 376), s(452, 385), s(437, 354), 
  s(381, 392), s(506, 395), s(502, 426), s(535, 422), s(561, 405), s(599, 398), s(528, 388), s(476, 367), 
  s(429, 400), s(451, 428), s(467, 448), s(513, 446), s(481, 452), s(534, 433), s(460, 431), s(473, 388), 
  s(411, 406), s(435, 413), s(454, 445), s(453, 451), s(469, 446), s(455, 446), s(474, 417), s(423, 397), 
  s(398, 383), s(419, 417), s(446, 416), s(442, 436), s(461, 435), s(451, 413), s(458, 395), s(404, 389), 
  s(386, 356), s(384, 389), s(415, 400), s(426, 409), s(427, 413), s(450, 393), s(428, 368), s(415, 361), 
  s(285, 359), s(399, 332), s(371, 385), s(388, 393), s(398, 389), s(405, 384), s(404, 352), s(396, 321), 
]),
// Bishop PST
Pst::new([
  s(414, 424), s(418, 420), s(331, 439), s(309, 447), s(372, 432), s(351, 433), s(427, 421), s(392, 417), 
  s(422, 424), s(463, 435), s(419, 437), s(414, 431), s(499, 425), s(484, 427), s(482, 430), s(392, 420), 
  s(417, 436), s(485, 428), s(491, 436), s(497, 431), s(507, 428), s(535, 433), s(495, 436), s(470, 431), 
  s(431, 429), s(445, 448), s(473, 455), s(509, 454), s(489, 459), s(500, 445), s(453, 441), s(431, 440), 
  s(428, 429), s(449, 445), s(452, 454), s(477, 459), s(479, 450), s(454, 448), s(449, 437), s(428, 426), 
  s(445, 417), s(459, 431), s(455, 447), s(459, 446), s(459, 452), s(462, 443), s(453, 432), s(448, 418), 
  s(454, 400), s(456, 406), s(463, 416), s(438, 431), s(445, 434), s(465, 422), s(478, 409), s(444, 395), 
  s(406, 395), s(438, 418), s(421, 396), s(411, 424), s(426, 419), s(420, 411), s(427, 416), s(414, 398), 
]),
// Rook PST
Pst::new([
  s(650, 789), s(670, 783), s(626, 806), s(676, 791), s(678, 790), s(629, 794), s(660, 780), s(691, 774), 
  s(622, 793), s(625, 798), s(665, 791), s(692, 784), s(706, 766), s(703, 771), s(633, 788), s(650, 780), 
  s(573, 795), s(617, 792), s(621, 792), s(636, 788), s(631, 781), s(678, 762), s(682, 765), s(633, 766), 
  s(548, 795), s(597, 781), s(591, 798), s(611, 787), s(611, 781), s(619, 780), s(605, 771), s(590, 776), 
  s(530, 792), s(545, 792), s(563, 796), s(575, 792), s(598, 772), s(572, 775), s(600, 766), s(565, 769), 
  s(525, 780), s(552, 783), s(558, 778), s(559, 778), s(566, 781), s(575, 765), s(600, 758), s(552, 758), 
  s(522, 779), s(557, 772), s(563, 775), s(563, 784), s(571, 771), s(584, 766), s(595, 757), s(501, 777), 
  s(558, 770), s(563, 782), s(577, 786), s(586, 786), s(588, 779), s(573, 773), s(553, 782), s(559, 748), 
]),
// Queen PST
Pst::new([
  s(1230, 1421), s(1251, 1445), s(1257, 1473), s(1289, 1458), s(1404, 1392), s(1362, 1413), s(1370, 1384), s(1333, 1435), 
  s(1278, 1372), s(1237, 1436), s(1286, 1451), s(1268, 1481), s(1241, 1534), s(1359, 1427), s(1319, 1434), s(1356, 1394), 
  s(1284, 1373), s(1278, 1402), s(1293, 1420), s(1288, 1480), s(1344, 1460), s(1392, 1435), s(1380, 1394), s(1355, 1423), 
  s(1256, 1410), s(1263, 1433), s(1267, 1436), s(1268, 1479), s(1284, 1487), s(1307, 1479), s(1286, 1490), s(1291, 1455), 
  s(1273, 1382), s(1254, 1440), s(1267, 1432), s(1264, 1481), s(1272, 1461), s(1272, 1460), s(1295, 1439), s(1282, 1439), 
  s(1260, 1388), s(1286, 1364), s(1274, 1416), s(1278, 1406), s(1276, 1430), s(1287, 1412), s(1296, 1401), s(1286, 1402), 
  s(1253, 1356), s(1276, 1371), s(1299, 1346), s(1292, 1362), s(1293, 1375), s(1306, 1358), s(1291, 1333), s(1300, 1320), 
  s(1281, 1350), s(1254, 1368), s(1271, 1363), s(1297, 1322), s(1271, 1370), s(1243, 1366), s(1255, 1353), s(1253, 1319), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(169, 273), s(182, 269), s(145, 266), s(181, 241), s(148, 256), s(159, 235), s(106, 271), s(66, 290), 
  s(92, 166), s(132, 161), s(143, 144), s(148, 136), s(207, 112), s(220, 121), s(205, 157), s(137, 147), 
  s(77, 149), s(123, 142), s(117, 126), s(131, 104), s(146, 117), s(130, 122), s(144, 133), s(87, 131), 
  s(62, 140), s(104, 140), s(102, 123), s(129, 113), s(129, 115), s(115, 119), s(128, 127), s(77, 118), 
  s(63, 128), s(99, 134), s(102, 117), s(97, 129), s(114, 133), s(110, 125), s(152, 119), s(92, 109), 
  s(55, 139), s(104, 134), s(84, 135), s(76, 136), s(91, 147), s(135, 130), s(160, 122), s(82, 109), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-31, -124), s(114, -83), s(143, -61), s(20, -29), s(-115, 1), s(-112, 33), s(126, -14), s(61, -46), 
  s(119, -52), s(24, 19), s(-30, 21), s(90, 6), s(16, 27), s(-30, 58), s(9, 33), s(0, 9), 
  s(-19, 2), s(37, 20), s(90, 15), s(-1, 28), s(10, 37), s(104, 52), s(138, 42), s(2, 11), 
  s(6, -15), s(-44, 37), s(-23, 42), s(-86, 56), s(-111, 63), s(-73, 62), s(-43, 50), s(-102, 19), 
  s(-154, 3), s(-26, 5), s(-86, 46), s(-164, 69), s(-168, 74), s(-111, 56), s(-96, 34), s(-125, 9), 
  s(20, -29), s(-22, 4), s(-71, 33), s(-123, 51), s(-92, 50), s(-88, 42), s(-26, 17), s(-44, -2), 
  s(68, -50), s(35, -17), s(-18, 13), s(-78, 28), s(-71, 32), s(-33, 18), s(32, -8), s(44, -34), 
  s(48, -98), s(86, -64), s(52, -40), s(-93, -3), s(10, -43), s(-43, -10), s(62, -48), s(65, -88), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(69, 173), s(82, 169), s(45, 166), s(81, 141), s(48, 156), s(59, 135), s(6, 171), s(-33, 190), 
  s(59, 180), s(4, 188), s(17, 162), s(14, 131), s(-29, 142), s(-11, 150), s(-67, 162), s(-49, 185), 
  s(21, 91), s(-3, 79), s(12, 69), s(6, 65), s(0, 50), s(42, 48), s(-48, 91), s(-21, 87), 
  s(-4, 42), s(-36, 39), s(-37, 32), s(-29, 31), s(-44, 32), s(-18, 27), s(-20, 43), s(11, 37), 
  s(-10, 3), s(-24, 9), s(-41, 13), s(-50, 15), s(-22, -3), s(18, -9), s(-3, 10), s(27, 1), 
  s(-20, 0), s(1, -1), s(0, -4), s(-38, 15), s(-16, -1), s(8, -7), s(31, -5), s(-14, 5), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(87, -228),
  s(35, -145),
  s(0, -58),
  s(6, -36),
  s(-1, -5),
  s(-3, -15),
  s(0, 0),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(32, 72);
