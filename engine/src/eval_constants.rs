#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, piece_tables::{Pst, Prt}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(250, 289), s(359, 320), s(340, 383), s(390, 350), s(496, 335), s(307, 352), s(371, 302), s(319, 245), 
  s(348, 329), s(382, 358), s(477, 325), s(426, 353), s(446, 329), s(467, 320), s(434, 330), s(396, 299), 
  s(371, 327), s(453, 338), s(458, 371), s(472, 359), s(462, 355), s(551, 335), s(465, 323), s(429, 302), 
  s(431, 335), s(451, 359), s(447, 389), s(498, 381), s(463, 382), s(503, 369), s(456, 355), s(470, 315), 
  s(420, 345), s(442, 349), s(454, 385), s(467, 385), s(468, 381), s(463, 379), s(480, 352), s(435, 339), 
  s(408, 331), s(420, 359), s(441, 360), s(445, 375), s(462, 376), s(448, 349), s(455, 330), s(411, 337), 
  s(398, 298), s(399, 323), s(415, 339), s(438, 343), s(434, 346), s(437, 332), s(429, 306), s(416, 306), 
  s(308, 291), s(394, 295), s(383, 314), s(397, 330), s(407, 323), s(396, 322), s(394, 308), s(407, 262), 
]),
// Bishop PST
Pst::new([
  s(416, 395), s(401, 389), s(317, 406), s(267, 413), s(342, 399), s(318, 401), s(406, 391), s(405, 383), 
  s(418, 387), s(435, 393), s(408, 386), s(394, 380), s(429, 378), s(458, 379), s(410, 393), s(377, 381), 
  s(442, 382), s(474, 377), s(476, 383), s(464, 374), s(479, 369), s(508, 378), s(482, 382), s(481, 370), 
  s(433, 379), s(467, 382), s(457, 398), s(510, 395), s(477, 400), s(491, 387), s(462, 379), s(444, 386), 
  s(442, 372), s(449, 385), s(462, 395), s(483, 400), s(490, 388), s(448, 394), s(445, 380), s(443, 368), 
  s(444, 369), s(464, 380), s(463, 393), s(464, 392), s(461, 399), s(473, 385), s(449, 383), s(446, 370), 
  s(462, 351), s(464, 357), s(466, 364), s(447, 378), s(455, 379), s(468, 372), s(481, 361), s(447, 350), 
  s(427, 353), s(452, 370), s(430, 371), s(425, 375), s(440, 372), s(420, 385), s(436, 367), s(436, 352), 
]),
// Rook PST
Pst::new([
  s(664, 748), s(693, 738), s(635, 763), s(687, 746), s(671, 750), s(629, 755), s(688, 735), s(677, 741), 
  s(635, 752), s(639, 756), s(667, 751), s(689, 743), s(697, 728), s(684, 740), s(633, 752), s(645, 745), 
  s(611, 739), s(645, 737), s(642, 739), s(658, 733), s(659, 727), s(664, 724), s(705, 716), s(637, 721), 
  s(582, 739), s(629, 725), s(619, 742), s(636, 730), s(629, 729), s(622, 737), s(625, 724), s(601, 730), 
  s(576, 730), s(592, 730), s(606, 731), s(619, 727), s(641, 713), s(596, 725), s(626, 713), s(584, 719), 
  s(578, 711), s(599, 716), s(609, 709), s(618, 704), s(610, 714), s(615, 705), s(615, 706), s(582, 700), 
  s(567, 712), s(602, 702), s(607, 705), s(616, 708), s(622, 700), s(610, 705), s(612, 698), s(530, 716), 
  s(593, 705), s(604, 706), s(615, 704), s(621, 700), s(619, 698), s(598, 707), s(572, 714), s(582, 688), 
]),
// Queen PST
Pst::new([
  s(1182, 1190), s(1185, 1223), s(1176, 1248), s(1193, 1243), s(1291, 1194), s(1225, 1234), s(1291, 1168), s(1260, 1216), 
  s(1199, 1154), s(1168, 1206), s(1190, 1234), s(1175, 1262), s(1116, 1324), s(1222, 1229), s(1228, 1207), s(1289, 1157), 
  s(1217, 1140), s(1205, 1163), s(1225, 1161), s(1195, 1229), s(1245, 1211), s(1271, 1190), s(1275, 1150), s(1247, 1190), 
  s(1183, 1181), s(1206, 1172), s(1182, 1185), s(1186, 1219), s(1203, 1212), s(1222, 1198), s(1214, 1217), s(1219, 1189), 
  s(1216, 1127), s(1181, 1187), s(1209, 1172), s(1192, 1220), s(1210, 1188), s(1197, 1182), s(1223, 1172), s(1209, 1179), 
  s(1200, 1131), s(1223, 1113), s(1217, 1153), s(1217, 1148), s(1214, 1172), s(1219, 1146), s(1228, 1138), s(1216, 1150), 
  s(1208, 1098), s(1224, 1103), s(1234, 1098), s(1238, 1095), s(1239, 1107), s(1245, 1093), s(1227, 1072), s(1240, 1064), 
  s(1226, 1084), s(1213, 1087), s(1224, 1085), s(1231, 1080), s(1225, 1091), s(1190, 1097), s(1215, 1074), s(1202, 1057), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(154, 300), s(145, 298), s(134, 291), s(166, 265), s(130, 282), s(164, 258), s(84, 299), s(63, 316), 
  s(97, 166), s(101, 159), s(131, 155), s(131, 143), s(183, 135), s(199, 138), s(181, 158), s(139, 158), 
  s(82, 148), s(97, 136), s(103, 136), s(123, 115), s(124, 130), s(120, 131), s(105, 136), s(92, 136), 
  s(77, 127), s(74, 128), s(99, 123), s(123, 115), s(115, 121), s(114, 120), s(85, 119), s(87, 115), 
  s(85, 121), s(91, 121), s(103, 123), s(110, 131), s(117, 138), s(117, 131), s(128, 111), s(106, 110), 
  s(77, 129), s(90, 119), s(85, 138), s(100, 133), s(96, 153), s(132, 132), s(131, 111), s(94, 108), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-97, -105), s(75, -65), s(115, -48), s(-33, -12), s(-116, 12), s(-128, 35), s(66, 1), s(37, -48), 
  s(68, -27), s(9, 37), s(-66, 43), s(77, 18), s(-2, 43), s(-60, 77), s(20, 46), s(-54, 25), 
  s(-46, 23), s(28, 38), s(95, 29), s(14, 36), s(75, 39), s(120, 63), s(162, 52), s(-3, 19), 
  s(23, -8), s(0, 42), s(39, 39), s(-13, 51), s(-48, 59), s(-14, 55), s(-6, 49), s(-86, 17), 
  s(-124, 4), s(16, 6), s(2, 32), s(-58, 51), s(-66, 55), s(-21, 33), s(-44, 22), s(-92, 0), 
  s(30, -31), s(20, -3), s(8, 15), s(-14, 27), s(3, 25), s(13, 11), s(20, 0), s(-9, -18), 
  s(55, -49), s(47, -19), s(10, 4), s(-42, 21), s(-28, 21), s(-1, 8), s(39, -13), s(28, -37), 
  s(16, -92), s(53, -57), s(22, -29), s(-91, 0), s(-15, -26), s(-51, -1), s(24, -38), s(19, -78), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(54, 200), s(45, 198), s(34, 191), s(66, 165), s(30, 182), s(64, 158), s(-15, 199), s(-36, 216), 
  s(46, 210), s(25, 216), s(12, 179), s(16, 150), s(-31, 148), s(-7, 162), s(-65, 186), s(-64, 206), 
  s(26, 118), s(8, 109), s(16, 86), s(0, 81), s(0, 66), s(36, 67), s(-25, 113), s(-19, 110), 
  s(5, 68), s(-7, 63), s(-31, 48), s(-21, 45), s(-40, 48), s(-36, 49), s(0, 67), s(6, 60), 
  s(7, 25), s(-4, 33), s(-30, 26), s(-42, 31), s(-30, 15), s(8, 10), s(-23, 41), s(16, 24), 
  s(-3, 18), s(9, 24), s(-2, 11), s(-36, 24), s(-20, 12), s(-18, 14), s(-16, 30), s(-12, 25), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(57, -260),
  s(23, -150),
  s(0, -62),
  s(10, -38),
  s(-5, -2),
  s(-4, -13),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(40, -25),
  s(9, -24),
  s(-4, -26),
  s(-18, -14),
  s(-34, -18),
  s(-17, -18),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(78, 373),
  s(201, 137),
  s(48, 52),
  s(18, 16),
  s(-7, -7),
  s(6, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(31, 72);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(4, 51), s(6, 59), s(4, 61), s(10, 56), s(10, 59), s(12, 55), s(8, 52), s(18, 33), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(12, 17), s(21, 33), s(24, 46), s(27, 55), s(28, 62), s(28, 68), s(25, 68), s(17, 75), s(24, 68), s(30, 63), s(52, 58), s(-11, 98), s(41, 49), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(6, 43), s(10, 57), s(17, 60), s(15, 71), s(20, 84), s(21, 90), s(24, 91), s(33, 92), s(31, 97), s(31, 101), s(37, 103), s(41, 106), s(42, 102), s(30, 101), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(5, 346), s(8, 308), s(7, 329), s(14, 329), s(17, 339), s(19, 344), s(20, 365), s(22, 376), s(27, 377), s(29, 384), s(32, 396), s(32, 394), s(36, 396), s(40, 398), s(38, 409), s(40, 415), s(52, 397), s(61, 397), s(82, 385), s(61, 400), s(126, 361), s(72, 382), s(178, 327), s(190, 297), s(290, 250), s(210, 308), s(180, 290), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(19, 23), s(31, 34), s(40, 37), s(51, 40), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(3, 10), s(10, 13), s(17, 16), s(22, 17), s(22, 17), s(27, 14), s(30, 23), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 2), s(7, 12), s(15, 15), s(22, 19), s(19, 29), s(31, 28), s(35, 36), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(4, 5), s(4, 15), s(8, 6), s(6, 23), s(5, 34), s(3, 33), s(1, 42), s(-2, 51), s(-6, 65), s(2, 60), s(-31, 96), s(-18, 90), s(-43, 150), s(4, 95), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-10, -23), s(-8, 0), s(0, 15), s(2, 11), s(7, 11), s(11, 6), s(6, 22), s(14, 8), s(18, 7), s(20, 7), s(28, 2), s(32, 0), s(28, 0), s(34, -4), s(45, -6), s(42, -7), s(41, -6), s(47, -11), s(47, -14), s(40, -14), s(72, -21), s(55, -17), s(36, -19), s(21, -18), s(12, -14), s(-62, -12), s(25, -15), s(-80, -5), 
],
// Bishop attack values
[
  s(1, 15), s(-3, 12), s(-1, 16), s(3, 12), s(6, 16), s(14, 5), s(14, 2), s(16, 7), s(28, -2), s(22, 0), s(35, -7), s(29, -5), s(36, -4), s(37, -8), s(39, -5), s(32, -8), s(35, -7), s(38, -10), s(41, -8), s(40, -10), s(22, -5), s(24, -7), s(-8, -1), s(-15, -1), s(-37, 1), s(-27, -5), s(21, -21), s(-37, -3), 
],
// Rook attack values
[
  s(15, 5), s(3, -3), s(13, -11), s(21, -22), s(20, -16), s(25, -19), s(24, -11), s(17, -9), s(31, -16), s(33, -16), s(39, -18), s(35, -17), s(33, -15), s(32, -13), s(42, -15), s(37, -12), s(39, -12), s(52, -16), s(47, -13), s(44, -12), s(30, -8), s(32, -8), s(41, -11), s(38, -8), s(28, -3), s(64, -14), s(14, 0), s(35, -6), 
],
// Queen attack values
[
  s(-2, -14), s(0, -11), s(4, -19), s(10, -22), s(14, -16), s(13, -7), s(15, -10), s(16, 1), s(24, -12), s(29, -5), s(24, -1), s(32, -2), s(41, -8), s(39, -5), s(46, -10), s(65, -20), s(65, -20), s(83, -33), s(83, -31), s(94, -37), s(121, -51), s(119, -52), s(115, -42), s(144, -62), s(162, -63), s(200, -89), s(142, -49), s(92, -46), 
],
// Pawn attack values
[
  s(6, 11), s(7, -4), s(8, -10), s(8, -7), s(8, -8), s(6, -9), s(9, -9), s(10, -8), s(7, -8), s(10, -9), s(12, -11), s(12, -11), s(20, -14), s(20, -13), s(18, -13), s(24, -14), s(29, -17), s(29, -16), s(23, -16), s(27, -17), s(38, -19), s(64, -24), s(48, -20), s(32, -19), s(33, -17), s(48, -13), s(50, -9), s(15, -4), 
],
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(93, 32);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(94, 58);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(152, -7);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(100, 5);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(42, 41);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(85, 19);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(59, -26);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 47);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(72, 29);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(72, 61);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(113, -3);

pub const TEMPO_BONUS: ScoreTuple = s(39, 29);
