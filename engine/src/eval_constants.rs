#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, piece_tables::{Pst, Prt}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(224, 272), s(323, 296), s(291, 354), s(344, 320), s(447, 305), s(268, 322), s(334, 277), s(288, 229), 
  s(337, 329), s(361, 352), s(462, 322), s(404, 351), s(427, 327), s(447, 318), s(415, 325), s(379, 299), 
  s(364, 331), s(446, 338), s(448, 371), s(462, 358), s(447, 355), s(536, 336), s(446, 327), s(415, 309), 
  s(421, 341), s(438, 361), s(434, 389), s(480, 381), s(441, 383), s(485, 370), s(437, 358), s(453, 322), 
  s(408, 349), s(426, 348), s(437, 384), s(442, 384), s(448, 380), s(441, 377), s(463, 352), s(419, 341), 
  s(389, 329), s(407, 353), s(424, 353), s(433, 370), s(446, 370), s(434, 343), s(435, 324), s(400, 336), 
  s(390, 304), s(393, 329), s(411, 338), s(431, 343), s(430, 347), s(432, 331), s(424, 311), s(413, 310), 
  s(310, 310), s(401, 315), s(394, 325), s(406, 342), s(417, 334), s(404, 333), s(401, 325), s(407, 278), 
]),
// Bishop PST
Pst::new([
  s(392, 377), s(372, 371), s(291, 388), s(235, 394), s(315, 380), s(291, 382), s(381, 371), s(377, 365), 
  s(402, 378), s(416, 387), s(388, 379), s(380, 373), s(409, 371), s(439, 372), s(388, 386), s(361, 372), 
  s(428, 376), s(464, 373), s(465, 379), s(453, 370), s(466, 366), s(496, 374), s(467, 379), s(463, 364), 
  s(423, 375), s(449, 381), s(446, 395), s(496, 390), s(464, 395), s(478, 384), s(443, 377), s(429, 382), 
  s(431, 369), s(437, 381), s(446, 390), s(470, 398), s(474, 386), s(435, 389), s(432, 376), s(433, 365), 
  s(435, 365), s(456, 375), s(453, 388), s(452, 386), s(451, 395), s(463, 381), s(444, 378), s(437, 368), 
  s(455, 348), s(457, 354), s(459, 361), s(443, 373), s(452, 374), s(464, 369), s(474, 358), s(446, 347), 
  s(427, 355), s(458, 369), s(435, 374), s(434, 375), s(450, 370), s(423, 387), s(442, 366), s(436, 353), 
]),
// Rook PST
Pst::new([
  s(632, 723), s(659, 713), s(597, 738), s(648, 722), s(629, 727), s(595, 732), s(661, 710), s(646, 716), 
  s(615, 730), s(615, 734), s(644, 728), s(665, 721), s(674, 706), s(659, 719), s(612, 730), s(624, 724), 
  s(594, 727), s(630, 724), s(625, 727), s(644, 720), s(641, 714), s(647, 711), s(688, 704), s(619, 710), 
  s(568, 733), s(613, 717), s(604, 734), s(618, 722), s(608, 721), s(601, 730), s(604, 717), s(580, 725), 
  s(559, 727), s(580, 724), s(591, 726), s(602, 721), s(623, 707), s(577, 719), s(611, 706), s(564, 716), 
  s(562, 711), s(587, 713), s(595, 706), s(603, 702), s(596, 710), s(599, 701), s(603, 702), s(566, 699), 
  s(557, 710), s(592, 699), s(598, 702), s(608, 706), s(613, 697), s(599, 700), s(604, 693), s(523, 712), 
  s(587, 699), s(602, 701), s(615, 701), s(620, 699), s(618, 695), s(594, 699), s(570, 707), s(577, 683), 
]),
// Queen PST
Pst::new([
  s(1161, 1187), s(1164, 1217), s(1154, 1240), s(1172, 1232), s(1272, 1184), s(1207, 1225), s(1278, 1157), s(1240, 1210), 
  s(1177, 1175), s(1147, 1216), s(1172, 1239), s(1160, 1265), s(1099, 1327), s(1204, 1233), s(1208, 1215), s(1266, 1180), 
  s(1195, 1170), s(1182, 1199), s(1202, 1193), s(1172, 1261), s(1222, 1240), s(1252, 1219), s(1250, 1184), s(1223, 1221), 
  s(1159, 1220), s(1178, 1215), s(1155, 1230), s(1160, 1262), s(1177, 1255), s(1196, 1237), s(1188, 1256), s(1192, 1227), 
  s(1186, 1177), s(1153, 1236), s(1181, 1215), s(1163, 1267), s(1181, 1233), s(1169, 1227), s(1196, 1215), s(1179, 1229), 
  s(1169, 1188), s(1194, 1164), s(1187, 1203), s(1187, 1194), s(1184, 1221), s(1190, 1195), s(1198, 1193), s(1187, 1205), 
  s(1176, 1158), s(1192, 1162), s(1205, 1152), s(1209, 1149), s(1211, 1161), s(1214, 1148), s(1196, 1127), s(1210, 1124), 
  s(1199, 1148), s(1193, 1145), s(1202, 1149), s(1207, 1149), s(1205, 1150), s(1168, 1152), s(1189, 1135), s(1171, 1123), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(153, 300), s(142, 298), s(129, 292), s(163, 265), s(127, 282), s(161, 259), s(82, 299), s(62, 316), 
  s(96, 166), s(99, 160), s(127, 156), s(127, 145), s(179, 135), s(194, 138), s(177, 159), s(138, 158), 
  s(80, 148), s(94, 137), s(101, 138), s(121, 116), s(120, 131), s(118, 131), s(103, 137), s(91, 136), 
  s(72, 129), s(75, 128), s(98, 124), s(123, 116), s(112, 122), s(112, 121), s(85, 119), s(83, 117), 
  s(82, 122), s(91, 122), s(104, 125), s(111, 133), s(117, 140), s(117, 132), s(127, 112), s(104, 111), 
  s(73, 131), s(91, 121), s(87, 139), s(103, 134), s(98, 154), s(131, 134), s(132, 112), s(93, 108), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-107, -105), s(51, -61), s(98, -45), s(-41, -11), s(-123, 13), s(-125, 34), s(56, 2), s(27, -47), 
  s(56, -26), s(4, 37), s(-69, 44), s(69, 19), s(-9, 44), s(-67, 78), s(16, 46), s(-65, 25), 
  s(-51, 22), s(21, 38), s(89, 29), s(9, 36), s(66, 40), s(118, 63), s(157, 53), s(-8, 19), 
  s(21, -8), s(-3, 42), s(37, 39), s(-17, 51), s(-50, 59), s(-15, 55), s(-11, 50), s(-90, 17), 
  s(-126, 4), s(12, 6), s(0, 32), s(-59, 51), s(-69, 54), s(-23, 33), s(-49, 22), s(-95, -1), 
  s(26, -31), s(14, -2), s(6, 15), s(-15, 27), s(2, 25), s(12, 11), s(17, 0), s(-11, -18), 
  s(51, -49), s(43, -18), s(7, 5), s(-42, 20), s(-28, 21), s(-2, 8), s(36, -13), s(26, -37), 
  s(15, -92), s(56, -57), s(27, -29), s(-87, 0), s(-12, -25), s(-45, -2), s(26, -39), s(17, -78), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(53, 200), s(42, 198), s(29, 192), s(63, 165), s(27, 182), s(61, 159), s(-17, 199), s(-37, 216), 
  s(48, 211), s(24, 216), s(11, 180), s(15, 149), s(-33, 149), s(-3, 161), s(-66, 186), s(-64, 206), 
  s(27, 119), s(9, 108), s(16, 85), s(0, 81), s(0, 66), s(38, 67), s(-24, 113), s(-19, 110), 
  s(8, 68), s(-7, 63), s(-31, 48), s(-21, 44), s(-39, 47), s(-34, 48), s(0, 67), s(9, 60), 
  s(8, 25), s(-2, 32), s(-29, 25), s(-41, 30), s(-30, 14), s(10, 10), s(-22, 40), s(18, 24), 
  s(-3, 18), s(10, 23), s(-2, 9), s(-39, 25), s(-21, 12), s(-17, 13), s(-15, 30), s(-13, 25), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(55, -255),
  s(24, -150),
  s(2, -62),
  s(11, -37),
  s(-4, 0),
  s(-2, -11),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(42, -24),
  s(9, -24),
  s(-5, -26),
  s(-18, -14),
  s(-34, -18),
  s(-17, -18),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(81, 344),
  s(209, 135),
  s(49, 51),
  s(18, 15),
  s(-7, -7),
  s(5, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(30, 72);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(21, 59), s(34, 77), s(40, 87), s(52, 88), s(57, 96), s(64, 94), s(66, 93), s(78, 75), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(16, 27), s(31, 46), s(40, 61), s(47, 72), s(50, 82), s(53, 88), s(53, 89), s(48, 96), s(55, 90), s(63, 85), s(85, 82), s(21, 120), s(81, 72), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(11, 50), s(17, 66), s(26, 72), s(24, 85), s(34, 97), s(38, 105), s(45, 107), s(58, 110), s(60, 118), s(63, 123), s(74, 126), s(77, 132), s(82, 127), s(72, 127), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(10, 287), s(14, 272), s(14, 294), s(22, 299), s(25, 316), s(27, 327), s(26, 353), s(28, 367), s(32, 374), s(35, 384), s(37, 398), s(36, 400), s(41, 403), s(43, 408), s(40, 421), s(43, 430), s(54, 413), s(61, 417), s(81, 407), s(55, 427), s(128, 384), s(72, 407), s(177, 358), s(200, 321), s(281, 285), s(229, 338), s(207, 317), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(21, 59), s(34, 77), s(40, 87), s(52, 88), s(57, 96), s(64, 94), s(66, 93), s(78, 75), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(16, 27), s(31, 46), s(40, 61), s(47, 72), s(50, 82), s(53, 88), s(53, 89), s(48, 96), s(55, 90), s(63, 85), s(85, 82), s(21, 120), s(81, 72), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(11, 50), s(17, 66), s(26, 72), s(24, 85), s(34, 97), s(38, 105), s(45, 107), s(58, 110), s(60, 118), s(63, 123), s(74, 126), s(77, 132), s(82, 127), s(72, 127), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(10, 287), s(14, 272), s(14, 294), s(22, 299), s(25, 316), s(27, 327), s(26, 353), s(28, 367), s(32, 374), s(35, 384), s(37, 398), s(36, 400), s(41, 403), s(43, 408), s(40, 421), s(43, 430), s(54, 413), s(61, 417), s(81, 407), s(55, 427), s(128, 384), s(72, 407), s(177, 358), s(200, 321), s(281, 285), s(229, 338), s(207, 317), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-6, -17), s(-5, 3), s(4, 16), s(6, 11), s(11, 11), s(15, 6), s(10, 22), s(18, 8), s(23, 7), s(25, 8), s(32, 2), s(37, 0), s(32, 0), s(37, -4), s(49, -6), s(45, -7), s(44, -6), s(50, -10), s(50, -14), s(44, -15), s(75, -21), s(59, -17), s(40, -19), s(24, -18), s(14, -14), s(-58, -12), s(28, -15), s(-70, -6), 
],
// Bishop attack values
[
  s(3, 18), s(-2, 13), s(0, 17), s(5, 13), s(8, 17), s(16, 5), s(16, 2), s(18, 8), s(30, -2), s(23, 0), s(37, -7), s(30, -4), s(39, -4), s(38, -7), s(41, -5), s(33, -8), s(36, -7), s(40, -10), s(43, -8), s(42, -10), s(24, -6), s(26, -7), s(-6, -1), s(-14, -1), s(-36, 1), s(-26, -5), s(17, -21), s(-36, -4), 
],
// Rook attack values
[
  s(17, 7), s(5, -2), s(16, -11), s(24, -22), s(22, -17), s(27, -20), s(26, -11), s(19, -9), s(33, -16), s(35, -17), s(41, -18), s(37, -17), s(35, -15), s(34, -13), s(44, -16), s(39, -12), s(41, -13), s(54, -16), s(48, -13), s(45, -12), s(31, -8), s(34, -8), s(42, -11), s(40, -9), s(30, -3), s(65, -14), s(15, -1), s(38, -7), 
],
// Queen attack values
[
  s(-1, -11), s(0, -7), s(4, -16), s(9, -20), s(14, -14), s(12, -5), s(15, -8), s(16, 2), s(23, -11), s(29, -4), s(24, 0), s(32, -1), s(41, -7), s(38, -4), s(46, -10), s(65, -19), s(65, -19), s(83, -32), s(84, -31), s(94, -36), s(120, -50), s(119, -51), s(119, -43), s(143, -61), s(160, -62), s(202, -90), s(121, -37), s(75, -37), 
],
// Pawn attack values
[
  s(8, 16), s(8, -2), s(8, -10), s(9, -7), s(9, -8), s(7, -9), s(10, -9), s(10, -8), s(7, -8), s(10, -9), s(12, -11), s(12, -11), s(20, -14), s(21, -13), s(18, -13), s(24, -14), s(30, -17), s(30, -16), s(23, -16), s(28, -17), s(39, -20), s(65, -24), s(49, -20), s(34, -20), s(33, -17), s(49, -14), s(55, -9), s(18, -5), 
],
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(92, 31);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(95, 60);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(150, -10);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(100, 6);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(43, 42);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(85, 19);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(60, -25);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(24, 47);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(73, 28);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(71, 64);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(115, -3);

pub const TEMPO_BONUS: ScoreTuple = s(39, 29);
