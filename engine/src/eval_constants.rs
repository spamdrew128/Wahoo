#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(201, 274), s(312, 288), s(285, 345), s(346, 306), s(433, 299), s(266, 317), s(318, 273), s(260, 230), 
  s(307, 322), s(337, 343), s(422, 320), s(400, 339), s(392, 325), s(435, 308), s(377, 320), s(355, 294), 
  s(342, 320), s(431, 328), s(429, 362), s(439, 350), s(432, 342), s(494, 333), s(426, 318), s(384, 302), 
  s(399, 330), s(413, 352), s(412, 378), s(459, 370), s(422, 371), s(463, 358), s(414, 345), s(427, 312), 
  s(388, 338), s(402, 337), s(413, 373), s(418, 374), s(425, 369), s(417, 366), s(439, 339), s(398, 331), 
  s(373, 319), s(386, 345), s(405, 344), s(409, 360), s(424, 359), s(414, 333), s(414, 314), s(383, 327), 
  s(370, 295), s(374, 319), s(390, 329), s(412, 334), s(410, 338), s(410, 323), s(400, 302), s(392, 304), 
  s(289, 304), s(388, 305), s(371, 318), s(383, 333), s(396, 326), s(383, 325), s(388, 317), s(382, 271), 
]),
// Bishop PST
Pst::new([
  s(382, 362), s(371, 353), s(302, 367), s(230, 378), s(303, 363), s(285, 368), s(371, 359), s(355, 353), 
  s(376, 366), s(395, 371), s(364, 364), s(355, 359), s(399, 354), s(397, 361), s(372, 368), s(331, 360), 
  s(408, 361), s(443, 357), s(437, 365), s(431, 354), s(436, 352), s(473, 358), s(441, 362), s(440, 352), 
  s(400, 361), s(427, 365), s(420, 380), s(469, 373), s(438, 376), s(453, 367), s(424, 359), s(402, 368), 
  s(410, 356), s(416, 366), s(424, 373), s(445, 381), s(449, 369), s(416, 370), s(408, 362), s(410, 353), 
  s(415, 351), s(436, 359), s(429, 372), s(434, 370), s(432, 377), s(440, 365), s(423, 363), s(418, 354), 
  s(434, 336), s(436, 341), s(439, 346), s(423, 358), s(432, 359), s(442, 353), s(455, 344), s(426, 336), 
  s(406, 339), s(437, 354), s(418, 359), s(408, 360), s(427, 356), s(408, 370), s(419, 354), s(409, 342), 
]),
// Rook PST
Pst::new([
  s(601, 701), s(624, 693), s(556, 720), s(609, 703), s(592, 708), s(547, 717), s(645, 687), s(625, 693), 
  s(583, 704), s(579, 710), s(612, 704), s(634, 697), s(647, 682), s(616, 695), s(573, 707), s(594, 699), 
  s(560, 702), s(600, 699), s(592, 702), s(614, 696), s(607, 689), s(617, 684), s(645, 681), s(584, 686), 
  s(539, 706), s(587, 690), s(576, 707), s(587, 697), s(578, 695), s(571, 701), s(574, 690), s(551, 697), 
  s(529, 702), s(550, 700), s(561, 702), s(570, 697), s(592, 681), s(549, 693), s(580, 683), s(541, 689), 
  s(538, 688), s(558, 690), s(568, 683), s(575, 680), s(570, 688), s(576, 676), s(581, 677), s(543, 674), 
  s(534, 686), s(564, 679), s(573, 679), s(581, 685), s(586, 675), s(573, 675), s(577, 671), s(504, 687), 
  s(567, 679), s(577, 681), s(591, 681), s(597, 678), s(594, 675), s(575, 678), s(549, 686), s(559, 662), 
]),
// Queen PST
Pst::new([
  s(1107, 1179), s(1118, 1198), s(1085, 1234), s(1122, 1215), s(1217, 1169), s(1150, 1207), s(1231, 1148), s(1188, 1202), 
  s(1135, 1153), s(1096, 1196), s(1128, 1216), s(1118, 1242), s(1059, 1300), s(1156, 1199), s(1145, 1195), s(1217, 1166), 
  s(1159, 1144), s(1145, 1167), s(1146, 1178), s(1136, 1232), s(1176, 1208), s(1211, 1189), s(1206, 1149), s(1185, 1191), 
  s(1120, 1198), s(1141, 1188), s(1124, 1195), s(1121, 1230), s(1129, 1232), s(1161, 1204), s(1150, 1230), s(1158, 1195), 
  s(1157, 1152), s(1121, 1203), s(1146, 1188), s(1130, 1235), s(1142, 1206), s(1138, 1196), s(1163, 1188), s(1147, 1205), 
  s(1139, 1165), s(1163, 1138), s(1157, 1174), s(1159, 1166), s(1154, 1195), s(1161, 1168), s(1166, 1169), s(1157, 1183), 
  s(1144, 1140), s(1160, 1140), s(1177, 1128), s(1181, 1124), s(1182, 1136), s(1185, 1120), s(1165, 1103), s(1179, 1099), 
  s(1167, 1128), s(1161, 1126), s(1172, 1127), s(1183, 1127), s(1176, 1131), s(1137, 1133), s(1157, 1116), s(1139, 1104), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(139, 290), s(135, 286), s(122, 280), s(152, 255), s(120, 271), s(117, 255), s(72, 288), s(47, 305), 
  s(86, 164), s(94, 156), s(119, 152), s(125, 134), s(177, 123), s(189, 134), s(167, 157), s(127, 156), 
  s(73, 146), s(85, 134), s(94, 134), s(114, 111), s(112, 129), s(111, 129), s(93, 134), s(82, 134), 
  s(65, 126), s(69, 125), s(89, 122), s(114, 114), s(104, 120), s(104, 118), s(79, 115), s(75, 113), 
  s(75, 120), s(81, 119), s(96, 122), s(103, 129), s(108, 137), s(107, 130), s(117, 108), s(95, 108), 
  s(69, 128), s(83, 119), s(82, 136), s(98, 129), s(93, 149), s(124, 130), s(124, 109), s(87, 105), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-107, -106), s(34, -63), s(80, -40), s(-47, -12), s(-122, 11), s(-135, 39), s(53, 3), s(35, -41), 
  s(49, -31), s(-8, 36), s(-69, 40), s(71, 18), s(-12, 40), s(-56, 70), s(10, 41), s(-52, 24), 
  s(-52, 18), s(30, 32), s(95, 24), s(10, 35), s(47, 41), s(120, 57), s(157, 46), s(-10, 17), 
  s(27, -11), s(2, 37), s(43, 36), s(-16, 50), s(-30, 53), s(-12, 51), s(-5, 44), s(-83, 15), 
  s(-133, 5), s(13, 3), s(0, 32), s(-64, 51), s(-71, 54), s(-25, 32), s(-47, 19), s(-94, 0), 
  s(26, -31), s(5, -1), s(0, 16), s(-18, 28), s(1, 26), s(11, 11), s(13, 0), s(-14, -16), 
  s(51, -49), s(43, -19), s(3, 6), s(-37, 19), s(-26, 21), s(-3, 9), s(33, -11), s(25, -34), 
  s(11, -90), s(53, -55), s(30, -29), s(-86, 2), s(-7, -24), s(-47, 0), s(27, -36), s(12, -73), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(39, 190), s(35, 186), s(22, 180), s(52, 155), s(20, 171), s(17, 155), s(-27, 188), s(-52, 205), 
  s(50, 210), s(20, 216), s(12, 180), s(9, 158), s(-34, 158), s(-3, 163), s(-69, 184), s(-62, 205), 
  s(27, 120), s(11, 109), s(15, 87), s(-1, 84), s(0, 65), s(36, 68), s(-22, 113), s(-13, 109), 
  s(11, 69), s(-6, 64), s(-29, 49), s(-22, 44), s(-38, 46), s(-33, 51), s(0, 69), s(11, 61), 
  s(9, 26), s(0, 34), s(-27, 25), s(-42, 33), s(-31, 15), s(12, 10), s(-19, 42), s(22, 24), 
  s(-4, 19), s(12, 25), s(-3, 13), s(-42, 28), s(-24, 16), s(-17, 14), s(-10, 31), s(-10, 26), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(62, -227),
  s(23, -144),
  s(0, -58),
  s(9, -33),
  s(-5, 0),
  s(-1, -12),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_RST: Rst = Rst::new([
  s(0, 0),
  s(50, -26),
  s(9, -23),
  s(-4, -26),
  s(-18, -14),
  s(-34, -17),
  s(-17, -18),
  s(0, 0),
]);

pub const PHALANX_PAWNS_RST: Rst = Rst::new([
  s(0, 0),
  s(81, 329),
  s(198, 135),
  s(52, 52),
  s(19, 17),
  s(-5, -6),
  s(5, -7),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(30, 71);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(22, 55), s(33, 74), s(39, 84), s(50, 85), s(56, 93), s(64, 90), s(65, 89), s(78, 71), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(15, 28), s(29, 47), s(37, 63), s(45, 74), s(48, 83), s(51, 90), s(51, 92), s(46, 99), s(52, 94), s(64, 88), s(87, 87), s(15, 128), s(81, 81), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(11, 52), s(17, 66), s(25, 72), s(24, 85), s(33, 95), s(38, 103), s(44, 105), s(58, 108), s(60, 115), s(63, 121), s(75, 124), s(78, 131), s(84, 128), s(76, 129), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(8, 250), s(12, 243), s(12, 267), s(20, 269), s(22, 286), s(23, 298), s(23, 321), s(25, 335), s(29, 339), s(30, 352), s(31, 366), s(30, 369), s(34, 372), s(34, 381), s(31, 394), s(33, 403), s(45, 387), s(51, 394), s(66, 385), s(43, 408), s(117, 365), s(60, 394), s(171, 340), s(187, 309), s(256, 279), s(225, 325), s(197, 303), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-9, -8), s(-4, 3), s(3, 18), s(6, 12), s(9, 14), s(14, 9), s(9, 24), s(17, 11), s(22, 9), s(24, 9), s(32, 3), s(36, 2), s(31, 2), s(39, -3), s(47, -4), s(45, -5), s(41, -3), s(51, -8), s(45, -11), s(44, -12), s(75, -19), s(58, -14), s(39, -16), s(23, -15), s(12, -11), s(-55, -9), s(27, -11), s(-95, 0), 
],
// Bishop attack values
[
  s(4, 9), s(-1, 12), s(0, 17), s(6, 13), s(8, 18), s(15, 7), s(16, 3), s(17, 9), s(29, -1), s(23, 1), s(37, -6), s(31, -4), s(38, -4), s(38, -7), s(42, -5), s(34, -7), s(35, -6), s(37, -9), s(42, -7), s(45, -10), s(23, -5), s(29, -7), s(0, -2), s(-16, 0), s(-35, 1), s(-31, -4), s(22, -20), s(-42, -3), 
],
// Rook attack values
[
  s(17, 7), s(4, 0), s(16, -10), s(24, -22), s(22, -16), s(27, -18), s(26, -10), s(19, -8), s(32, -14), s(33, -15), s(39, -16), s(36, -15), s(33, -12), s(31, -11), s(42, -13), s(37, -10), s(39, -11), s(52, -14), s(45, -11), s(42, -10), s(30, -7), s(32, -6), s(42, -9), s(38, -7), s(30, -2), s(63, -12), s(13, 1), s(39, -5), 
],
// Queen attack values
[
  s(0, -9), s(0, -5), s(4, -16), s(11, -20), s(15, -13), s(13, -4), s(14, -6), s(16, 3), s(23, -8), s(28, -2), s(23, 1), s(31, 0), s(40, -5), s(36, -1), s(47, -8), s(64, -17), s(64, -17), s(81, -30), s(90, -33), s(96, -36), s(121, -49), s(127, -53), s(131, -46), s(153, -64), s(165, -63), s(208, -91), s(128, -38), s(59, -27), 
],
// Pawn attack values
[
  s(7, 22), s(7, -2), s(8, -10), s(9, -6), s(9, -8), s(6, -8), s(9, -8), s(10, -7), s(8, -8), s(10, -8), s(12, -11), s(12, -10), s(20, -13), s(19, -12), s(17, -13), s(24, -14), s(30, -16), s(31, -16), s(24, -16), s(28, -17), s(41, -19), s(65, -24), s(48, -19), s(31, -19), s(34, -17), s(51, -14), s(58, -12), s(32, -6), 
],
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(59, 11);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(65, 39);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(119, -38);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(61, -14);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(29, 20);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(59, -9);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(26, -48);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(20, 37);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(44, 0);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(36, 44);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(78, -22);

pub const CHECKS: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(137, 0), s(117, 62), s(210, -11), s(82, 129), s(382, -29), 
];
