#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(204, 269), s(326, 282), s(290, 338), s(349, 299), s(451, 288), s(263, 310), s(331, 269), s(266, 225), 
  s(328, 316), s(354, 335), s(482, 298), s(417, 329), s(419, 312), s(473, 294), s(406, 311), s(384, 285), 
  s(343, 316), s(456, 316), s(436, 354), s(459, 339), s(458, 328), s(505, 325), s(439, 309), s(392, 296), 
  s(402, 324), s(411, 347), s(416, 369), s(462, 362), s(423, 363), s(470, 350), s(412, 340), s(431, 306), 
  s(388, 334), s(402, 331), s(414, 366), s(418, 368), s(425, 362), s(417, 361), s(435, 333), s(398, 326), 
  s(374, 314), s(388, 338), s(406, 338), s(407, 354), s(425, 353), s(415, 325), s(416, 307), s(384, 321), 
  s(371, 290), s(373, 315), s(390, 322), s(414, 329), s(411, 332), s(412, 315), s(400, 299), s(391, 300), 
  s(292, 298), s(390, 297), s(371, 313), s(384, 328), s(394, 322), s(381, 321), s(391, 311), s(383, 271), 
]),
// Bishop PST
Pst::new([
  s(381, 353), s(362, 345), s(277, 363), s(226, 370), s(300, 352), s(283, 356), s(376, 345), s(354, 342), 
  s(379, 355), s(423, 352), s(369, 353), s(360, 346), s(418, 340), s(413, 346), s(402, 351), s(336, 351), 
  s(378, 360), s(440, 345), s(446, 350), s(435, 342), s(433, 341), s(456, 349), s(416, 355), s(407, 349), 
  s(397, 350), s(419, 358), s(417, 369), s(464, 362), s(435, 365), s(445, 358), s(417, 349), s(390, 358), 
  s(408, 346), s(412, 357), s(414, 363), s(439, 369), s(438, 360), s(411, 358), s(401, 352), s(405, 345), 
  s(415, 341), s(431, 349), s(427, 361), s(427, 359), s(427, 367), s(435, 355), s(420, 353), s(415, 345), 
  s(430, 328), s(434, 332), s(434, 336), s(418, 349), s(427, 348), s(440, 342), s(452, 336), s(423, 328), 
  s(402, 333), s(431, 346), s(415, 350), s(401, 352), s(422, 348), s(406, 359), s(415, 344), s(403, 333), 
]),
// Rook PST
Pst::new([
  s(601, 702), s(630, 692), s(563, 719), s(610, 704), s(594, 709), s(553, 717), s(638, 689), s(626, 692), 
  s(580, 705), s(577, 712), s(612, 705), s(633, 697), s(649, 681), s(624, 695), s(574, 708), s(589, 701), 
  s(547, 705), s(592, 702), s(585, 704), s(607, 698), s(592, 693), s(604, 689), s(631, 685), s(569, 691), 
  s(529, 707), s(577, 692), s(569, 707), s(578, 697), s(571, 696), s(561, 705), s(562, 694), s(541, 700), 
  s(525, 703), s(542, 700), s(553, 704), s(563, 699), s(583, 683), s(541, 695), s(569, 687), s(534, 690), 
  s(530, 690), s(551, 691), s(562, 684), s(566, 682), s(564, 690), s(568, 678), s(574, 678), s(536, 676), 
  s(531, 687), s(559, 680), s(569, 680), s(575, 687), s(579, 677), s(569, 678), s(571, 673), s(499, 690), 
  s(565, 680), s(572, 682), s(587, 682), s(593, 680), s(589, 677), s(571, 679), s(541, 688), s(556, 664), 
]),
// Queen PST
Pst::new([
  s(1125, 1171), s(1117, 1206), s(1099, 1232), s(1123, 1218), s(1222, 1170), s(1159, 1202), s(1237, 1146), s(1222, 1180), 
  s(1151, 1144), s(1112, 1185), s(1149, 1201), s(1130, 1230), s(1073, 1290), s(1179, 1194), s(1169, 1190), s(1232, 1156), 
  s(1166, 1143), s(1156, 1161), s(1169, 1162), s(1145, 1226), s(1190, 1204), s(1219, 1184), s(1207, 1153), s(1192, 1189), 
  s(1135, 1189), s(1152, 1181), s(1135, 1187), s(1131, 1224), s(1146, 1217), s(1167, 1203), s(1159, 1224), s(1166, 1197), 
  s(1171, 1142), s(1133, 1197), s(1160, 1177), s(1145, 1223), s(1155, 1198), s(1153, 1183), s(1172, 1185), s(1163, 1195), 
  s(1154, 1157), s(1180, 1127), s(1174, 1160), s(1175, 1153), s(1170, 1182), s(1178, 1154), s(1183, 1154), s(1172, 1172), 
  s(1163, 1126), s(1178, 1131), s(1195, 1113), s(1198, 1110), s(1199, 1124), s(1203, 1108), s(1183, 1090), s(1196, 1091), 
  s(1188, 1114), s(1177, 1116), s(1190, 1111), s(1201, 1109), s(1192, 1119), s(1154, 1122), s(1171, 1105), s(1162, 1087), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(169, 277), s(179, 274), s(144, 271), s(178, 246), s(148, 262), s(165, 242), s(112, 278), s(74, 294), 
  s(96, 170), s(122, 167), s(128, 150), s(132, 143), s(185, 128), s(199, 135), s(181, 171), s(130, 155), 
  s(80, 152), s(114, 147), s(103, 134), s(123, 109), s(122, 129), s(119, 133), s(119, 148), s(83, 136), 
  s(69, 142), s(100, 146), s(100, 129), s(122, 119), s(113, 127), s(110, 128), s(105, 140), s(72, 124), 
  s(74, 130), s(101, 138), s(97, 124), s(103, 130), s(111, 140), s(105, 134), s(134, 128), s(89, 113), 
  s(74, 138), s(113, 135), s(89, 135), s(103, 134), s(102, 150), s(130, 136), s(152, 126), s(87, 109), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-110, -106), s(49, -63), s(79, -41), s(-41, -13), s(-122, 10), s(-155, 43), s(67, -1), s(31, -41), 
  s(58, -32), s(4, 34), s(-57, 37), s(76, 16), s(-11, 39), s(-51, 67), s(9, 39), s(-40, 20), 
  s(-52, 17), s(30, 32), s(96, 23), s(8, 35), s(52, 39), s(119, 55), s(159, 45), s(-16, 17), 
  s(20, -9), s(-7, 38), s(49, 34), s(-15, 48), s(-37, 53), s(-8, 49), s(-9, 44), s(-79, 14), 
  s(-128, 4), s(17, 2), s(-3, 32), s(-65, 50), s(-70, 52), s(-21, 31), s(-39, 18), s(-94, 0), 
  s(31, -29), s(6, 0), s(-2, 17), s(-17, 28), s(3, 26), s(10, 11), s(17, 0), s(-11, -15), 
  s(49, -47), s(41, -18), s(5, 7), s(-37, 20), s(-26, 22), s(-2, 9), s(35, -11), s(24, -33), 
  s(5, -86), s(51, -52), s(30, -28), s(-86, 3), s(-9, -23), s(-47, 0), s(26, -35), s(10, -71), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(69, 177), s(79, 174), s(44, 171), s(78, 146), s(48, 162), s(65, 142), s(12, 178), s(-25, 194), 
  s(52, 184), s(14, 193), s(20, 168), s(17, 138), s(-29, 146), s(-1, 154), s(-61, 165), s(-51, 189), 
  s(19, 94), s(-3, 83), s(18, 73), s(2, 73), s(3, 55), s(38, 54), s(-37, 93), s(-15, 90), 
  s(-4, 44), s(-32, 39), s(-38, 36), s(-29, 35), s(-41, 35), s(-40, 36), s(-21, 46), s(5, 42), 
  s(-11, 3), s(-23, 10), s(-36, 13), s(-54, 22), s(-39, 4), s(3, -2), s(-37, 20), s(7, 8), 
  s(-23, -1), s(-6, 1), s(-7, 1), s(-51, 18), s(-27, 4), s(-21, 1), s(-25, 10), s(-23, 10), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(42, -223),
  s(19, -143),
  s(-4, -59),
  s(4, -36),
  s(-7, -3),
  s(-12, -12),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_RST: Rst = Rst::new([
  s(42, -223),
  s(19, -143),
  s(-4, -59),
  s(4, -36),
  s(-7, -3),
  s(-12, -1),
  s(3, 2),
  s(4, 5),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 74);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(19, 50), s(30, 73), s(34, 82), s(45, 84), s(50, 93), s(58, 90), s(59, 89), s(70, 73), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(16, 26), s(29, 46), s(37, 64), s(45, 76), s(48, 86), s(51, 94), s(52, 96), s(47, 103), s(54, 97), s(64, 94), s(87, 90), s(18, 133), s(84, 84), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(11, 43), s(17, 55), s(25, 61), s(24, 73), s(33, 85), s(37, 92), s(43, 94), s(57, 97), s(59, 104), s(62, 110), s(71, 114), s(73, 121), s(77, 119), s(61, 118), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(5, 229), s(6, 224), s(6, 240), s(13, 248), s(16, 264), s(17, 275), s(15, 304), s(17, 315), s(22, 320), s(22, 335), s(24, 347), s(22, 352), s(27, 354), s(27, 363), s(24, 376), s(26, 386), s(34, 372), s(40, 379), s(51, 374), s(28, 397), s(95, 354), s(38, 387), s(140, 338), s(163, 306), s(248, 264), s(221, 317), s(184, 291), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-8, -10), s(-4, 1), s(3, 18), s(6, 12), s(10, 13), s(14, 8), s(10, 23), s(18, 10), s(22, 9), s(24, 8), s(32, 2), s(36, 2), s(30, 2), s(38, -2), s(48, -3), s(46, -5), s(43, -3), s(54, -8), s(44, -10), s(44, -11), s(74, -18), s(57, -13), s(42, -16), s(21, -15), s(12, -11), s(-61, -9), s(30, -11), s(-101, 0), 
],
// Bishop attack values
[
  s(5, 8), s(-1, 12), s(2, 15), s(8, 11), s(10, 16), s(17, 5), s(18, 2), s(20, 7), s(32, -2), s(26, 0), s(40, -7), s(33, -4), s(42, -5), s(40, -7), s(43, -5), s(36, -8), s(37, -6), s(39, -9), s(42, -7), s(43, -9), s(24, -5), s(25, -6), s(2, -2), s(-15, 0), s(-36, 1), s(-28, -4), s(17, -20), s(-31, -5), 
],
// Rook attack values
[
  s(15, 11), s(2, 0), s(16, -12), s(22, -23), s(21, -16), s(27, -19), s(25, -10), s(19, -8), s(32, -15), s(32, -14), s(40, -16), s(36, -15), s(34, -13), s(32, -11), s(43, -13), s(38, -11), s(40, -11), s(53, -14), s(45, -11), s(45, -10), s(31, -6), s(35, -7), s(44, -10), s(39, -7), s(31, -2), s(67, -13), s(17, 0), s(46, -7), 
],
// Queen attack values
[
  s(0, -11), s(0, -5), s(4, -16), s(11, -21), s(15, -15), s(13, -5), s(15, -8), s(18, 1), s(25, -11), s(30, -4), s(24, 0), s(33, -1), s(42, -6), s(38, -2), s(48, -9), s(66, -18), s(65, -18), s(81, -30), s(89, -32), s(98, -36), s(121, -48), s(129, -54), s(124, -42), s(152, -63), s(168, -65), s(212, -93), s(127, -39), s(62, -29), 
],
// Pawn attack values
[
  s(8, 24), s(8, -1), s(9, -9), s(10, -7), s(10, -8), s(8, -9), s(10, -8), s(10, -7), s(8, -8), s(10, -8), s(13, -11), s(12, -10), s(20, -13), s(20, -12), s(18, -12), s(24, -13), s(30, -16), s(29, -16), s(25, -16), s(28, -17), s(41, -20), s(66, -25), s(46, -20), s(30, -20), s(32, -18), s(55, -17), s(57, -14), s(31, -7), 
],
];
