#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::{NUM_SQUARES, NUM_PIECES}};

const fn s(mg: i16, eg: i16) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const PST: [[ScoreTuple; NUM_SQUARES as usize]; NUM_PIECES as usize] = [
// Knight PST
[
  s(186, 208), s(381, 143), s(315, 168), s(405, 154), s(491, 154), s(298, 178), s(256, 164), s(238, 201), 
  s(366, 135), s(406, 159), s(460, 163), s(459, 168), s(484, 177), s(517, 149), s(365, 175), s(446, 117), 
  s(423, 162), s(474, 151), s(463, 192), s(513, 161), s(512, 176), s(551, 136), s(459, 191), s(431, 157), 
  s(384, 195), s(404, 193), s(480, 183), s(466, 179), s(443, 206), s(472, 180), s(432, 188), s(429, 179), 
  s(384, 167), s(415, 180), s(406, 208), s(422, 194), s(439, 183), s(430, 187), s(449, 169), s(399, 169), 
  s(363, 152), s(403, 158), s(402, 179), s(423, 195), s(419, 194), s(415, 163), s(427, 160), s(390, 143), 
  s(366, 161), s(403, 175), s(411, 149), s(386, 179), s(398, 166), s(424, 148), s(406, 156), s(381, 81), 
  s(441, 112), s(364, 111), s(325, 204), s(355, 177), s(362, 145), s(356, 154), s(376, 103), s(312, 109), 
],
// Bishop PST
[
  s(374, 232), s(420, 202), s(437, 186), s(417, 196), s(350, 233), s(302, 230), s(429, 167), s(405, 151), 
  s(372, 216), s(452, 190), s(447, 199), s(365, 224), s(489, 177), s(414, 213), s(502, 159), s(505, 205), 
  s(427, 183), s(461, 197), s(496, 213), s(487, 187), s(510, 200), s(520, 188), s(494, 196), s(459, 204), 
  s(451, 177), s(439, 197), s(497, 185), s(501, 192), s(490, 201), s(498, 211), s(457, 191), s(458, 185), 
  s(415, 203), s(444, 188), s(460, 225), s(473, 189), s(480, 210), s(455, 218), s(454, 180), s(429, 172), 
  s(428, 186), s(463, 183), s(455, 196), s(452, 210), s(438, 204), s(452, 195), s(450, 194), s(450, 182), 
  s(416, 188), s(441, 184), s(466, 161), s(432, 194), s(442, 182), s(452, 165), s(453, 174), s(421, 181), 
  s(361, 187), s(367, 194), s(417, 145), s(414, 164), s(422, 168), s(412, 159), s(353, 191), s(420, 162), 
],
// Rook PST
[
  s(647, 342), s(648, 346), s(652, 342), s(684, 330), s(660, 338), s(657, 347), s(656, 342), s(722, 318), 
  s(649, 339), s(625, 359), s(673, 346), s(727, 327), s(659, 350), s(702, 328), s(641, 348), s(657, 341), 
  s(594, 355), s(637, 353), s(669, 341), s(722, 315), s(733, 304), s(678, 334), s(711, 329), s(679, 323), 
  s(623, 326), s(591, 349), s(641, 333), s(646, 325), s(635, 333), s(637, 331), s(655, 319), s(600, 345), 
  s(537, 355), s(552, 355), s(595, 356), s(584, 334), s(610, 341), s(573, 347), s(570, 345), s(559, 338), 
  s(547, 333), s(565, 338), s(575, 337), s(562, 336), s(567, 325), s(572, 323), s(586, 321), s(550, 336), 
  s(545, 318), s(555, 338), s(605, 328), s(578, 315), s(590, 316), s(599, 327), s(618, 302), s(539, 316), 
  s(557, 327), s(562, 339), s(570, 353), s(580, 344), s(600, 336), s(582, 338), s(556, 346), s(575, 300), 
],
// Queen PST
[
  s(1301, 561), s(1359, 545), s(1489, 459), s(1394, 511), s(1436, 536), s(1536, 465), s(1483, 481), s(1386, 544), 
  s(1333, 519), s(1346, 558), s(1402, 521), s(1382, 545), s(1458, 529), s(1458, 489), s(1411, 511), s(1411, 518), 
  s(1342, 505), s(1371, 473), s(1367, 541), s(1434, 523), s(1448, 521), s(1509, 472), s(1423, 538), s(1449, 467), 
  s(1358, 469), s(1379, 468), s(1381, 514), s(1400, 524), s(1404, 549), s(1392, 528), s(1387, 528), s(1401, 485), 
  s(1378, 455), s(1371, 492), s(1384, 508), s(1381, 505), s(1372, 479), s(1385, 529), s(1384, 490), s(1385, 484), 
  s(1372, 428), s(1381, 433), s(1381, 491), s(1389, 410), s(1379, 482), s(1383, 481), s(1407, 406), s(1365, 443), 
  s(1350, 455), s(1361, 419), s(1388, 413), s(1379, 433), s(1396, 369), s(1409, 373), s(1379, 352), s(1328, 400), 
  s(1380, 419), s(1365, 423), s(1391, 377), s(1389, 359), s(1381, 391), s(1366, 357), s(1375, 345), s(1320, 419), 
],
// Pawn PST
[
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(308, 217), s(279, 240), s(173, 249), s(253, 201), s(205, 198), s(226, 227), s(115, 235), s(100, 195), 
  s(102, 187), s(103, 157), s(132, 153), s(160, 144), s(161, 122), s(144, 117), s(98, 162), s(85, 158), 
  s(76, 143), s(114, 114), s(95, 98), s(115, 85), s(125, 89), s(101, 100), s(100, 109), s(68, 116), 
  s(61, 120), s(98, 100), s(98, 86), s(103, 82), s(113, 77), s(98, 89), s(97, 102), s(67, 95), 
  s(66, 113), s(92, 94), s(89, 85), s(84, 93), s(85, 97), s(79, 98), s(124, 92), s(71, 93), 
  s(49, 135), s(88, 114), s(71, 99), s(58, 94), s(65, 102), s(100, 102), s(113, 104), s(57, 102), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
],
// King PST
[
  s(459, -109), s(-62, 16), s(560, -122), s(981, -353), s(420, -154), s(143, -9), s(142, -25), s(-246, 42), 
  s(-14, 12), s(-186, 112), s(-300, 89), s(-218, 121), s(250, -11), s(-73, 106), s(55, 106), s(-8, 51), 
  s(-7, 70), s(-222, 115), s(-212, 148), s(-161, 137), s(-192, 136), s(-86, 110), s(-55, 109), s(-61, 93), 
  s(30, 49), s(-186, 116), s(-96, 105), s(-111, 122), s(-66, 112), s(-27, 104), s(-50, 112), s(-67, 93), 
  s(-6, 43), s(-8, 70), s(-171, 111), s(-162, 116), s(-69, 101), s(-63, 96), s(-76, 88), s(-138, 87), 
  s(-124, 90), s(-62, 66), s(-124, 103), s(-151, 105), s(-141, 104), s(-118, 102), s(-86, 86), s(-84, 75), 
  s(-24, 49), s(-40, 68), s(-33, 65), s(-106, 87), s(-123, 106), s(-59, 81), s(-15, 64), s(-6, 51), 
  s(-205, 108), s(-68, 59), s(-19, 42), s(-113, 65), s(-41, 26), s(-72, 58), s(16, 47), s(6, 26), 
],
];
