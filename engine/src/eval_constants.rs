#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, piece_tables::{Pst, Prt, Pft}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(229, 272), s(326, 295), s(291, 355), s(350, 320), s(451, 305), s(272, 322), s(331, 277), s(296, 227), 
  s(340, 327), s(363, 352), s(464, 322), s(403, 351), s(430, 327), s(446, 318), s(414, 326), s(377, 300), 
  s(363, 331), s(448, 338), s(451, 371), s(464, 358), s(447, 356), s(538, 336), s(446, 327), s(417, 308), 
  s(426, 339), s(440, 361), s(438, 388), s(483, 381), s(445, 383), s(489, 370), s(440, 357), s(457, 321), 
  s(410, 349), s(428, 349), s(440, 384), s(445, 383), s(450, 380), s(445, 377), s(467, 352), s(422, 340), 
  s(392, 330), s(410, 354), s(426, 353), s(437, 369), s(449, 370), s(437, 343), s(440, 324), s(404, 337), 
  s(391, 306), s(397, 328), s(413, 339), s(433, 344), s(433, 347), s(434, 332), s(428, 311), s(417, 310), 
  s(313, 312), s(401, 314), s(394, 327), s(405, 343), s(417, 335), s(408, 333), s(402, 326), s(413, 279), 
]),
// Bishop PST
Pst::new([
  s(399, 376), s(376, 372), s(294, 388), s(239, 394), s(315, 381), s(292, 382), s(386, 371), s(379, 366), 
  s(405, 378), s(418, 387), s(388, 381), s(379, 374), s(409, 372), s(438, 373), s(384, 389), s(366, 371), 
  s(430, 376), s(462, 375), s(468, 379), s(451, 372), s(467, 367), s(498, 374), s(465, 380), s(462, 365), 
  s(424, 376), s(451, 382), s(445, 396), s(498, 390), s(464, 396), s(480, 384), s(445, 377), s(432, 382), 
  s(431, 371), s(438, 382), s(447, 391), s(472, 398), s(476, 387), s(436, 390), s(434, 377), s(434, 366), 
  s(434, 367), s(458, 376), s(454, 389), s(454, 387), s(452, 395), s(464, 382), s(446, 379), s(439, 369), 
  s(454, 351), s(458, 356), s(461, 362), s(444, 374), s(453, 375), s(465, 370), s(477, 359), s(448, 347), 
  s(426, 357), s(458, 371), s(433, 375), s(431, 376), s(447, 372), s(424, 388), s(442, 367), s(441, 352), 
]),
// Rook PST
Pst::new([
  s(618, 724), s(649, 717), s(591, 742), s(638, 723), s(619, 726), s(601, 735), s(622, 727), s(594, 730), 
  s(599, 732), s(600, 739), s(630, 734), s(648, 723), s(651, 708), s(657, 723), s(536, 757), s(564, 740), 
  s(578, 729), s(610, 729), s(607, 733), s(618, 725), s(613, 717), s(642, 717), s(647, 720), s(578, 720), 
  s(559, 731), s(603, 719), s(590, 738), s(600, 724), s(590, 721), s(601, 733), s(568, 732), s(562, 728), 
  s(559, 720), s(568, 726), s(578, 730), s(586, 723), s(608, 705), s(577, 723), s(587, 718), s(555, 715), 
  s(563, 704), s(578, 713), s(583, 710), s(587, 704), s(583, 709), s(600, 705), s(588, 709), s(564, 694), 
  s(558, 703), s(584, 699), s(582, 709), s(591, 709), s(598, 698), s(596, 705), s(572, 705), s(516, 709), 
  s(588, 700), s(597, 702), s(599, 709), s(603, 702), s(603, 697), s(593, 706), s(549, 716), s(573, 685), 
]),
// Queen PST
Pst::new([
  s(1168, 1188), s(1173, 1219), s(1165, 1240), s(1186, 1230), s(1281, 1185), s(1221, 1224), s(1281, 1161), s(1248, 1211), 
  s(1185, 1175), s(1153, 1216), s(1177, 1241), s(1162, 1270), s(1103, 1331), s(1212, 1233), s(1212, 1217), s(1269, 1183), 
  s(1203, 1169), s(1188, 1199), s(1207, 1195), s(1177, 1263), s(1230, 1241), s(1260, 1220), s(1256, 1186), s(1231, 1219), 
  s(1166, 1219), s(1184, 1216), s(1162, 1230), s(1167, 1263), s(1184, 1256), s(1204, 1238), s(1194, 1256), s(1199, 1227), 
  s(1193, 1177), s(1161, 1236), s(1188, 1216), s(1170, 1268), s(1188, 1233), s(1177, 1229), s(1204, 1215), s(1187, 1229), 
  s(1177, 1188), s(1201, 1165), s(1195, 1203), s(1195, 1195), s(1192, 1221), s(1197, 1197), s(1205, 1195), s(1194, 1206), 
  s(1182, 1159), s(1199, 1162), s(1212, 1153), s(1216, 1150), s(1218, 1162), s(1220, 1150), s(1203, 1130), s(1214, 1128), 
  s(1204, 1151), s(1196, 1149), s(1203, 1153), s(1211, 1149), s(1208, 1154), s(1175, 1154), s(1189, 1141), s(1174, 1127), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(160, 304), s(146, 298), s(133, 291), s(173, 263), s(132, 280), s(165, 257), s(80, 299), s(69, 316), 
  s(104, 170), s(103, 160), s(134, 155), s(132, 145), s(191, 136), s(202, 137), s(183, 159), s(152, 158), 
  s(85, 152), s(98, 138), s(105, 138), s(126, 116), s(126, 130), s(125, 130), s(108, 136), s(101, 135), 
  s(75, 133), s(78, 129), s(100, 125), s(126, 117), s(116, 121), s(118, 120), s(91, 118), s(91, 116), 
  s(83, 127), s(92, 123), s(105, 126), s(112, 134), s(118, 139), s(120, 132), s(131, 111), s(111, 110), 
  s(72, 136), s(91, 123), s(86, 140), s(104, 133), s(98, 153), s(134, 133), s(135, 112), s(98, 108), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-108, -106), s(53, -62), s(98, -45), s(-45, -10), s(-126, 13), s(-125, 35), s(57, 2), s(31, -46), 
  s(56, -28), s(4, 36), s(-69, 43), s(69, 19), s(-10, 44), s(-68, 78), s(12, 47), s(-68, 26), 
  s(-48, 20), s(22, 38), s(91, 28), s(7, 37), s(62, 41), s(114, 63), s(155, 53), s(-11, 19), 
  s(25, -10), s(-2, 41), s(35, 39), s(-22, 52), s(-53, 59), s(-17, 55), s(-15, 50), s(-93, 18), 
  s(-123, 3), s(16, 5), s(0, 32), s(-61, 51), s(-70, 55), s(-25, 33), s(-51, 22), s(-94, -1), 
  s(27, -31), s(20, -3), s(9, 14), s(-15, 27), s(2, 25), s(14, 10), s(17, 0), s(-10, -18), 
  s(58, -50), s(49, -19), s(14, 4), s(-40, 20), s(-25, 20), s(0, 8), s(39, -13), s(28, -37), 
  s(17, -92), s(57, -58), s(28, -30), s(-87, 0), s(-12, -25), s(-45, -2), s(25, -38), s(18, -77), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(60, 204), s(46, 198), s(33, 191), s(73, 163), s(32, 180), s(65, 157), s(-19, 199), s(-30, 216), 
  s(54, 211), s(27, 216), s(14, 180), s(24, 147), s(-33, 147), s(-3, 162), s(-73, 187), s(-66, 207), 
  s(31, 119), s(11, 109), s(17, 85), s(2, 80), s(1, 67), s(38, 68), s(-27, 114), s(-18, 111), 
  s(10, 68), s(-5, 63), s(-28, 48), s(-20, 44), s(-40, 48), s(-36, 50), s(-2, 68), s(8, 61), 
  s(9, 25), s(0, 31), s(-27, 25), s(-38, 29), s(-28, 15), s(9, 10), s(-20, 40), s(19, 25), 
  s(-2, 19), s(12, 23), s(-2, 10), s(-38, 26), s(-16, 11), s(-18, 14), s(-15, 30), s(-11, 26), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(65, -250),
  s(24, -147),
  s(2, -60),
  s(9, -34),
  s(-8, 3),
  s(-17, -3),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(40, -23),
  s(8, -24),
  s(-5, -26),
  s(-19, -14),
  s(-35, -18),
  s(-19, -18),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(84, 345),
  s(211, 135),
  s(52, 51),
  s(19, 16),
  s(-7, -6),
  s(5, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(30, 72);

pub const OPEN_ROOK: Pft = Pft::new([
  s(51, -2), s(49, -2), s(45, -3), s(49, 0), s(54, 3), s(49, -5), s(121, -26), s(120, -18), 
]);

pub const SEMI_OPEN_ROOK: Pft = Pft::new([
  s(3, 43), s(15, 14), s(16, 5), s(25, 2), s(21, -4), s(18, -4), s(46, -11), s(24, 17), 
]);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(21, 60), s(33, 78), s(38, 87), s(51, 88), s(56, 96), s(63, 94), s(65, 93), s(77, 75), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(17, 27), s(30, 45), s(39, 61), s(47, 72), s(50, 81), s(53, 88), s(52, 89), s(47, 95), s(54, 90), s(62, 84), s(85, 81), s(23, 119), s(79, 72), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(10, 50), s(14, 65), s(22, 70), s(20, 82), s(26, 95), s(27, 104), s(29, 106), s(38, 110), s(36, 118), s(34, 122), s(42, 125), s(43, 130), s(43, 126), s(34, 126), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(10, 288), s(12, 271), s(12, 291), s(20, 297), s(22, 316), s(23, 326), s(23, 353), s(25, 366), s(29, 373), s(30, 383), s(32, 398), s(32, 399), s(36, 403), s(38, 408), s(37, 420), s(38, 430), s(49, 413), s(58, 416), s(76, 407), s(53, 426), s(121, 385), s(68, 407), s(170, 360), s(196, 321), s(285, 281), s(226, 338), s(208, 315), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-6, -16), s(-5, 2), s(4, 17), s(7, 11), s(11, 11), s(15, 5), s(10, 22), s(18, 8), s(23, 7), s(24, 8), s(31, 2), s(37, 0), s(33, 0), s(36, -3), s(49, -6), s(44, -7), s(44, -6), s(49, -10), s(49, -14), s(43, -14), s(72, -20), s(56, -17), s(40, -19), s(22, -18), s(12, -14), s(-56, -12), s(25, -15), s(-70, -6), 
],
// Bishop attack values
[
  s(3, 18), s(-2, 14), s(0, 17), s(6, 13), s(8, 17), s(16, 5), s(17, 2), s(18, 8), s(29, -2), s(23, 0), s(36, -7), s(30, -4), s(38, -4), s(39, -8), s(40, -5), s(33, -8), s(36, -7), s(39, -10), s(43, -8), s(41, -10), s(23, -5), s(26, -7), s(-8, -1), s(-14, -1), s(-36, 1), s(-26, -5), s(19, -21), s(-35, -4), 
],
// Rook attack values
[
  s(16, 7), s(3, 0), s(12, -8), s(19, -20), s(18, -14), s(23, -17), s(21, -9), s(16, -8), s(29, -15), s(31, -15), s(38, -17), s(34, -16), s(32, -13), s(32, -12), s(42, -15), s(38, -12), s(39, -12), s(53, -16), s(48, -13), s(44, -12), s(31, -8), s(33, -8), s(42, -11), s(40, -9), s(30, -3), s(66, -14), s(15, 0), s(36, -7), 
],
// Queen attack values
[
  s(0, -10), s(0, -9), s(4, -17), s(10, -20), s(14, -15), s(12, -5), s(14, -8), s(16, 2), s(23, -11), s(29, -4), s(24, 0), s(32, -1), s(41, -7), s(38, -4), s(46, -10), s(64, -19), s(64, -18), s(84, -33), s(84, -31), s(95, -37), s(120, -50), s(119, -51), s(116, -41), s(143, -61), s(161, -63), s(194, -86), s(123, -38), s(74, -36), 
],
// Pawn attack values
[
  s(6, 13), s(7, -1), s(7, -9), s(8, -7), s(8, -8), s(6, -8), s(9, -9), s(10, -8), s(7, -8), s(10, -9), s(12, -11), s(12, -11), s(20, -14), s(21, -13), s(18, -13), s(24, -14), s(29, -17), s(29, -16), s(23, -16), s(27, -17), s(38, -20), s(65, -25), s(48, -20), s(33, -20), s(33, -18), s(49, -14), s(52, -9), s(12, -4), 
],
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(91, 31);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(95, 61);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(151, -11);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(100, 5);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(44, 43);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(85, 19);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(60, -25);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 48);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(72, 28);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(71, 65);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(107, -3);

pub const TEMPO_BONUS: ScoreTuple = s(39, 29);
