#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(205, 272), s(328, 287), s(299, 342), s(350, 305), s(454, 294), s(263, 317), s(328, 274), s(267, 229), 
  s(329, 319), s(356, 339), s(485, 303), s(422, 335), s(421, 319), s(476, 299), s(408, 314), s(387, 289), 
  s(348, 320), s(460, 321), s(444, 359), s(466, 344), s(465, 333), s(514, 330), s(448, 312), s(399, 300), 
  s(409, 328), s(418, 351), s(424, 376), s(470, 368), s(431, 369), s(477, 356), s(418, 345), s(436, 311), 
  s(394, 338), s(409, 336), s(421, 372), s(425, 373), s(432, 367), s(425, 366), s(444, 338), s(404, 331), 
  s(380, 318), s(394, 343), s(413, 343), s(415, 359), s(433, 358), s(422, 332), s(423, 312), s(389, 326), 
  s(378, 295), s(379, 318), s(398, 328), s(420, 334), s(418, 337), s(418, 322), s(406, 302), s(398, 303), 
  s(297, 304), s(396, 301), s(378, 317), s(392, 332), s(403, 325), s(390, 324), s(397, 315), s(389, 271), 
]),
// Bishop PST
Pst::new([
  s(387, 363), s(366, 355), s(283, 373), s(231, 380), s(305, 365), s(283, 370), s(383, 357), s(359, 352), 
  s(383, 365), s(425, 364), s(374, 365), s(368, 359), s(421, 352), s(420, 358), s(405, 362), s(344, 360), 
  s(386, 370), s(445, 357), s(453, 364), s(440, 355), s(441, 354), s(463, 361), s(423, 366), s(415, 360), 
  s(405, 361), s(427, 369), s(424, 382), s(471, 376), s(442, 379), s(450, 370), s(425, 359), s(397, 369), 
  s(416, 356), s(418, 369), s(423, 376), s(446, 383), s(446, 373), s(419, 370), s(408, 363), s(413, 354), 
  s(422, 352), s(439, 361), s(433, 374), s(436, 370), s(435, 378), s(443, 366), s(429, 363), s(422, 356), 
  s(439, 337), s(441, 342), s(443, 346), s(426, 360), s(436, 360), s(447, 354), s(459, 346), s(430, 338), 
  s(408, 341), s(441, 355), s(422, 360), s(411, 362), s(430, 357), s(414, 370), s(424, 354), s(410, 343), 
]),
// Rook PST
Pst::new([
  s(607, 708), s(633, 700), s(568, 726), s(616, 711), s(603, 715), s(560, 722), s(643, 697), s(630, 701), 
  s(588, 712), s(583, 718), s(619, 711), s(638, 705), s(653, 689), s(629, 702), s(584, 714), s(600, 706), 
  s(561, 710), s(601, 708), s(592, 710), s(615, 704), s(600, 700), s(612, 695), s(643, 691), s(582, 696), 
  s(541, 714), s(587, 699), s(579, 715), s(587, 705), s(580, 703), s(567, 712), s(573, 700), s(553, 706), 
  s(531, 710), s(549, 708), s(561, 711), s(571, 706), s(590, 691), s(548, 702), s(578, 693), s(541, 698), 
  s(538, 696), s(561, 697), s(570, 690), s(574, 688), s(572, 695), s(576, 684), s(583, 685), s(545, 682), 
  s(538, 693), s(568, 686), s(577, 686), s(583, 693), s(588, 683), s(577, 684), s(580, 679), s(507, 695), 
  s(572, 686), s(582, 688), s(596, 687), s(602, 685), s(599, 683), s(580, 685), s(552, 695), s(564, 669), 
]),
// Queen PST
Pst::new([
  s(1129, 1183), s(1128, 1213), s(1104, 1241), s(1130, 1230), s(1239, 1174), s(1170, 1213), s(1241, 1158), s(1225, 1195), 
  s(1156, 1154), s(1117, 1198), s(1149, 1218), s(1134, 1247), s(1078, 1303), s(1182, 1208), s(1174, 1200), s(1241, 1167), 
  s(1173, 1151), s(1162, 1170), s(1176, 1173), s(1151, 1239), s(1196, 1218), s(1227, 1196), s(1215, 1164), s(1200, 1200), 
  s(1141, 1199), s(1159, 1193), s(1142, 1198), s(1139, 1236), s(1153, 1231), s(1173, 1215), s(1165, 1236), s(1173, 1208), 
  s(1179, 1151), s(1140, 1207), s(1166, 1190), s(1152, 1234), s(1161, 1209), s(1160, 1194), s(1180, 1195), s(1170, 1205), 
  s(1161, 1165), s(1188, 1134), s(1182, 1172), s(1183, 1163), s(1178, 1193), s(1185, 1164), s(1191, 1166), s(1180, 1183), 
  s(1169, 1136), s(1186, 1138), s(1202, 1124), s(1206, 1120), s(1207, 1134), s(1210, 1117), s(1191, 1100), s(1204, 1099), 
  s(1194, 1125), s(1185, 1123), s(1198, 1122), s(1209, 1119), s(1200, 1130), s(1164, 1128), s(1181, 1113), s(1169, 1094), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(157, 287), s(170, 279), s(135, 279), s(169, 254), s(138, 269), s(160, 247), s(104, 283), s(65, 303), 
  s(89, 166), s(101, 155), s(124, 153), s(128, 142), s(182, 129), s(196, 133), s(168, 158), s(130, 155), 
  s(76, 147), s(93, 136), s(101, 135), s(121, 111), s(120, 130), s(117, 132), s(101, 135), s(85, 135), 
  s(68, 130), s(78, 127), s(98, 124), s(122, 117), s(111, 123), s(109, 121), s(85, 120), s(76, 118), 
  s(75, 119), s(80, 119), s(97, 121), s(103, 128), s(109, 136), s(107, 128), s(116, 107), s(95, 106), 
  s(73, 125), s(90, 115), s(87, 132), s(102, 128), s(99, 145), s(129, 127), s(131, 105), s(91, 102), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-109, -106), s(43, -64), s(80, -41), s(-44, -12), s(-120, 11), s(-145, 40), s(52, 2), s(33, -40), 
  s(50, -29), s(-1, 35), s(-65, 40), s(69, 18), s(-12, 41), s(-53, 70), s(10, 41), s(-46, 22), 
  s(-51, 18), s(29, 33), s(92, 25), s(11, 35), s(53, 40), s(121, 57), s(158, 46), s(-17, 18), 
  s(30, -12), s(0, 37), s(49, 36), s(-13, 49), s(-34, 54), s(-9, 51), s(-6, 44), s(-81, 15), 
  s(-129, 4), s(12, 3), s(-3, 33), s(-64, 51), s(-72, 54), s(-24, 32), s(-46, 19), s(-96, 0), 
  s(31, -31), s(6, -1), s(0, 16), s(-18, 27), s(2, 26), s(9, 12), s(15, 0), s(-13, -16), 
  s(51, -50), s(43, -19), s(3, 6), s(-39, 19), s(-27, 21), s(-3, 9), s(33, -11), s(24, -34), 
  s(8, -89), s(52, -55), s(30, -30), s(-86, 2), s(-8, -24), s(-47, -1), s(26, -36), s(11, -72), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(57, 187), s(70, 179), s(35, 179), s(69, 154), s(38, 169), s(60, 147), s(4, 183), s(-34, 203), 
  s(55, 211), s(22, 220), s(18, 182), s(14, 154), s(-31, 157), s(-2, 168), s(-59, 188), s(-58, 209), 
  s(31, 120), s(12, 109), s(17, 87), s(3, 86), s(3, 66), s(43, 68), s(-22, 115), s(-10, 111), 
  s(12, 67), s(-7, 63), s(-29, 48), s(-21, 44), s(-36, 45), s(-32, 49), s(0, 67), s(16, 59), 
  s(10, 25), s(1, 32), s(-28, 25), s(-44, 33), s(-33, 15), s(11, 10), s(-18, 41), s(23, 24), 
  s(-4, 19), s(11, 26), s(-2, 13), s(-44, 29), s(-23, 16), s(-16, 15), s(-11, 32), s(-9, 26), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(45, -228),
  s(18, -147),
  s(-3, -60),
  s(5, -34),
  s(-7, 0),
  s(-10, -8),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_RST: Rst = Rst::new([
  s(0, 0),
  s(32, -23),
  s(9, -27),
  s(-5, -29),
  s(-21, -17),
  s(-31, -16),
  s(-20, -15),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(30, 74);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(18, 54), s(30, 74), s(34, 83), s(45, 85), s(50, 93), s(57, 91), s(58, 89), s(70, 73), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(15, 27), s(29, 46), s(37, 62), s(44, 73), s(48, 83), s(51, 90), s(51, 91), s(47, 97), s(55, 92), s(65, 87), s(88, 85), s(22, 124), s(82, 78), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(12, 45), s(17, 59), s(26, 65), s(25, 77), s(35, 88), s(39, 96), s(46, 97), s(59, 100), s(62, 108), s(65, 113), s(76, 117), s(79, 123), s(84, 120), s(74, 121), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(6, 242), s(7, 242), s(7, 261), s(14, 267), s(17, 283), s(18, 294), s(17, 321), s(19, 331), s(23, 336), s(23, 350), s(26, 362), s(24, 367), s(28, 368), s(28, 378), s(25, 391), s(27, 401), s(36, 386), s(45, 392), s(57, 385), s(33, 408), s(101, 366), s(44, 399), s(152, 346), s(169, 316), s(257, 274), s(225, 326), s(194, 301), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-9, -8), s(-5, 3), s(3, 19), s(5, 12), s(9, 13), s(14, 8), s(9, 24), s(16, 11), s(21, 9), s(23, 8), s(32, 3), s(35, 2), s(30, 2), s(37, -2), s(48, -4), s(45, -5), s(42, -4), s(53, -9), s(45, -11), s(44, -12), s(75, -19), s(58, -14), s(43, -16), s(22, -15), s(14, -12), s(-58, -9), s(26, -11), s(-95, 0), 
],
// Bishop attack values
[
  s(5, 16), s(-1, 12), s(2, 16), s(7, 12), s(10, 17), s(17, 5), s(18, 2), s(19, 8), s(32, -3), s(25, 0), s(38, -7), s(32, -4), s(41, -5), s(39, -7), s(43, -5), s(35, -8), s(37, -7), s(40, -9), s(43, -8), s(44, -9), s(26, -6), s(29, -7), s(1, -2), s(-14, -1), s(-34, 1), s(-27, -5), s(22, -20), s(-35, -4), 
],
// Rook attack values
[
  s(16, 9), s(4, 0), s(16, -11), s(23, -22), s(22, -16), s(26, -18), s(25, -9), s(18, -8), s(32, -15), s(33, -15), s(40, -16), s(36, -15), s(34, -13), s(32, -11), s(43, -14), s(38, -11), s(40, -11), s(54, -15), s(46, -11), s(44, -10), s(30, -7), s(35, -7), s(43, -10), s(39, -7), s(31, -2), s(64, -12), s(11, 1), s(42, -6), 
],
// Queen attack values
[
  s(0, -10), s(0, -5), s(4, -16), s(11, -20), s(15, -15), s(13, -5), s(14, -8), s(17, 1), s(24, -10), s(29, -3), s(24, 0), s(33, -1), s(41, -6), s(37, -2), s(48, -9), s(66, -19), s(66, -18), s(82, -30), s(89, -32), s(96, -36), s(121, -49), s(130, -55), s(126, -44), s(151, -63), s(168, -65), s(208, -92), s(125, -38), s(67, -31), 
],
// Pawn attack values
[
  s(7, 20), s(8, -1), s(9, -10), s(10, -7), s(10, -9), s(8, -9), s(10, -9), s(11, -8), s(8, -8), s(10, -8), s(13, -11), s(12, -11), s(20, -13), s(20, -12), s(17, -13), s(23, -13), s(30, -16), s(30, -16), s(25, -16), s(28, -17), s(41, -19), s(65, -24), s(47, -19), s(31, -19), s(32, -16), s(53, -14), s(55, -11), s(32, -6), 
],
];
