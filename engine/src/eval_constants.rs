#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(202, 272), s(314, 288), s(286, 346), s(341, 308), s(437, 298), s(263, 318), s(320, 273), s(264, 230), 
  s(311, 322), s(338, 343), s(442, 315), s(398, 341), s(410, 322), s(436, 309), s(398, 315), s(359, 294), 
  s(344, 321), s(433, 329), s(429, 363), s(444, 350), s(432, 344), s(511, 330), s(427, 320), s(395, 301), 
  s(401, 331), s(414, 352), s(413, 379), s(461, 371), s(424, 371), s(465, 359), s(416, 346), s(429, 313), 
  s(389, 338), s(404, 338), s(415, 374), s(420, 375), s(426, 370), s(419, 367), s(440, 339), s(400, 332), 
  s(375, 320), s(387, 345), s(406, 345), s(410, 361), s(426, 360), s(416, 333), s(416, 314), s(385, 326), 
  s(372, 296), s(375, 320), s(391, 330), s(414, 335), s(411, 339), s(412, 323), s(402, 302), s(394, 305), 
  s(289, 305), s(390, 305), s(373, 318), s(385, 333), s(398, 326), s(385, 325), s(390, 317), s(384, 272), 
]),
// Bishop PST
Pst::new([
  s(381, 364), s(369, 355), s(285, 372), s(227, 380), s(305, 364), s(284, 370), s(374, 361), s(356, 354), 
  s(378, 367), s(395, 372), s(364, 366), s(359, 360), s(398, 357), s(416, 358), s(371, 371), s(344, 359), 
  s(408, 362), s(445, 358), s(446, 364), s(433, 356), s(444, 353), s(474, 360), s(444, 362), s(441, 353), 
  s(402, 362), s(431, 366), s(422, 382), s(472, 375), s(440, 379), s(456, 369), s(426, 360), s(406, 369), 
  s(411, 357), s(417, 368), s(426, 374), s(447, 383), s(451, 370), s(418, 372), s(410, 363), s(412, 354), 
  s(417, 352), s(438, 360), s(431, 374), s(436, 371), s(434, 379), s(442, 366), s(425, 364), s(419, 356), 
  s(437, 337), s(438, 343), s(442, 347), s(425, 360), s(434, 361), s(445, 354), s(457, 345), s(427, 337), 
  s(407, 341), s(439, 355), s(420, 360), s(410, 361), s(429, 357), s(409, 371), s(420, 355), s(412, 343), 
]),
// Rook PST
Pst::new([
  s(605, 702), s(631, 694), s(567, 719), s(619, 703), s(604, 708), s(561, 715), s(647, 689), s(631, 693), 
  s(586, 705), s(583, 711), s(617, 705), s(634, 699), s(651, 683), s(625, 696), s(584, 707), s(599, 700), 
  s(562, 703), s(603, 700), s(595, 703), s(616, 698), s(609, 691), s(618, 686), s(652, 681), s(589, 687), 
  s(542, 707), s(590, 691), s(579, 708), s(590, 698), s(582, 696), s(573, 703), s(579, 691), s(556, 698), 
  s(532, 703), s(553, 701), s(564, 703), s(574, 698), s(595, 683), s(552, 694), s(585, 683), s(544, 690), 
  s(541, 689), s(562, 691), s(571, 684), s(578, 681), s(573, 689), s(578, 677), s(584, 678), s(546, 675), 
  s(538, 687), s(567, 679), s(576, 680), s(584, 686), s(589, 676), s(577, 676), s(580, 672), s(507, 688), 
  s(569, 680), s(580, 682), s(594, 681), s(600, 679), s(597, 676), s(577, 679), s(551, 687), s(561, 663), 
]),
// Queen PST
Pst::new([
  s(1115, 1181), s(1127, 1202), s(1109, 1226), s(1134, 1217), s(1233, 1167), s(1165, 1207), s(1237, 1149), s(1205, 1196), 
  s(1136, 1155), s(1097, 1200), s(1129, 1219), s(1118, 1245), s(1061, 1303), s(1163, 1208), s(1153, 1202), s(1224, 1164), 
  s(1161, 1146), s(1146, 1169), s(1159, 1172), s(1136, 1237), s(1185, 1214), s(1212, 1194), s(1209, 1155), s(1186, 1200), 
  s(1122, 1199), s(1145, 1189), s(1125, 1199), s(1123, 1235), s(1135, 1232), s(1161, 1211), s(1151, 1236), s(1160, 1202), 
  s(1159, 1152), s(1122, 1207), s(1148, 1190), s(1131, 1239), s(1145, 1209), s(1140, 1199), s(1164, 1192), s(1148, 1211), 
  s(1140, 1166), s(1165, 1141), s(1159, 1177), s(1161, 1168), s(1156, 1197), s(1163, 1170), s(1168, 1171), s(1159, 1187), 
  s(1147, 1141), s(1162, 1142), s(1179, 1130), s(1183, 1125), s(1184, 1138), s(1187, 1122), s(1167, 1105), s(1181, 1103), 
  s(1169, 1130), s(1163, 1127), s(1174, 1128), s(1184, 1128), s(1178, 1132), s(1139, 1134), s(1159, 1117), s(1141, 1105), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(144, 289), s(138, 285), s(126, 279), s(159, 253), s(123, 270), s(157, 246), s(76, 287), s(56, 303), 
  s(87, 164), s(95, 155), s(118, 153), s(124, 136), s(175, 124), s(190, 134), s(166, 157), s(128, 156), 
  s(74, 146), s(85, 134), s(95, 134), s(115, 111), s(113, 129), s(111, 129), s(94, 134), s(83, 134), 
  s(66, 126), s(69, 125), s(90, 122), s(115, 114), s(105, 120), s(105, 118), s(79, 116), s(76, 114), 
  s(76, 120), s(82, 119), s(97, 122), s(104, 129), s(109, 137), s(108, 130), s(117, 108), s(96, 108), 
  s(70, 128), s(84, 119), s(82, 136), s(99, 129), s(94, 149), s(125, 131), s(124, 109), s(88, 105), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-107, -106), s(37, -63), s(80, -40), s(-46, -12), s(-123, 12), s(-137, 40), s(49, 4), s(33, -41), 
  s(54, -31), s(-4, 36), s(-66, 40), s(71, 18), s(-12, 40), s(-54, 70), s(13, 41), s(-55, 25), 
  s(-52, 18), s(30, 32), s(95, 25), s(12, 35), s(52, 40), s(121, 57), s(158, 46), s(-13, 17), 
  s(29, -11), s(1, 37), s(47, 36), s(-14, 50), s(-32, 53), s(-7, 50), s(-4, 44), s(-79, 14), 
  s(-128, 4), s(12, 3), s(1, 31), s(-60, 50), s(-71, 54), s(-24, 32), s(-46, 19), s(-95, 0), 
  s(28, -31), s(6, -2), s(0, 15), s(-16, 27), s(1, 26), s(11, 11), s(13, 0), s(-14, -16), 
  s(51, -49), s(43, -19), s(3, 6), s(-37, 19), s(-26, 21), s(-3, 9), s(33, -11), s(24, -34), 
  s(11, -90), s(53, -55), s(29, -28), s(-86, 2), s(-8, -23), s(-47, 0), s(26, -36), s(12, -73), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(44, 189), s(38, 185), s(26, 179), s(59, 153), s(23, 170), s(57, 146), s(-23, 187), s(-43, 203), 
  s(50, 209), s(19, 217), s(13, 179), s(9, 156), s(-33, 157), s(-2, 163), s(-66, 184), s(-61, 206), 
  s(26, 120), s(11, 109), s(15, 87), s(-1, 84), s(0, 65), s(37, 68), s(-22, 113), s(-14, 109), 
  s(10, 69), s(-6, 64), s(-29, 49), s(-21, 44), s(-38, 46), s(-33, 50), s(0, 69), s(11, 61), 
  s(9, 26), s(0, 34), s(-28, 25), s(-43, 33), s(-30, 15), s(11, 10), s(-20, 42), s(21, 25), 
  s(-4, 19), s(12, 25), s(-2, 12), s(-41, 28), s(-20, 15), s(-16, 14), s(-10, 31), s(-11, 26), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(56, -227),
  s(23, -144),
  s(0, -58),
  s(9, -33),
  s(-6, 0),
  s(0, -12),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_RST: Rst = Rst::new([
  s(0, 0),
  s(42, -23),
  s(9, -23),
  s(-4, -26),
  s(-18, -14),
  s(-34, -18),
  s(-18, -18),
  s(0, 0),
]);

pub const PHALANX_PAWNS_RST: Rst = Rst::new([
  s(0, 0),
  s(80, 331),
  s(202, 134),
  s(52, 52),
  s(19, 17),
  s(-5, -6),
  s(5, -7),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(29, 72);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(21, 55), s(33, 75), s(39, 84), s(51, 85), s(56, 93), s(64, 90), s(65, 89), s(78, 71), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(15, 27), s(29, 46), s(37, 62), s(45, 73), s(48, 83), s(51, 89), s(51, 91), s(46, 98), s(54, 93), s(63, 88), s(86, 86), s(18, 126), s(81, 79), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(11, 51), s(17, 66), s(25, 72), s(24, 84), s(33, 95), s(37, 103), s(44, 105), s(57, 108), s(59, 115), s(63, 120), s(75, 124), s(78, 130), s(83, 128), s(73, 129), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(9, 252), s(12, 246), s(12, 269), s(20, 272), s(22, 288), s(24, 300), s(23, 324), s(25, 338), s(29, 343), s(30, 355), s(32, 369), s(31, 372), s(35, 374), s(36, 383), s(33, 396), s(34, 406), s(46, 390), s(54, 396), s(69, 387), s(45, 410), s(115, 367), s(61, 396), s(171, 343), s(189, 312), s(261, 279), s(228, 327), s(194, 303), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-9, -9), s(-4, 2), s(3, 18), s(6, 12), s(9, 14), s(14, 8), s(9, 24), s(16, 11), s(22, 9), s(24, 9), s(32, 3), s(36, 2), s(31, 2), s(38, -2), s(47, -4), s(46, -5), s(43, -4), s(52, -9), s(46, -11), s(44, -12), s(77, -19), s(58, -14), s(40, -16), s(22, -15), s(13, -11), s(-56, -9), s(29, -12), s(-94, 0), 
],
// Bishop attack values
[
  s(4, 9), s(-2, 12), s(0, 17), s(6, 12), s(8, 18), s(16, 6), s(16, 3), s(18, 8), s(30, -1), s(23, 1), s(37, -6), s(31, -4), s(39, -4), s(38, -7), s(42, -5), s(34, -7), s(36, -6), s(38, -9), s(42, -8), s(44, -9), s(25, -6), s(28, -7), s(-1, -1), s(-16, 0), s(-34, 1), s(-27, -5), s(23, -21), s(-40, -3), 
],
// Rook attack values
[
  s(17, 7), s(4, -1), s(16, -11), s(23, -22), s(22, -16), s(27, -18), s(26, -10), s(19, -8), s(32, -15), s(34, -15), s(39, -16), s(36, -15), s(34, -13), s(32, -11), s(43, -14), s(38, -11), s(40, -11), s(53, -15), s(46, -11), s(44, -10), s(30, -7), s(34, -7), s(43, -10), s(39, -7), s(31, -2), s(62, -12), s(10, 2), s(41, -6), 
],
// Queen attack values
[
  s(0, -10), s(0, -5), s(4, -16), s(11, -21), s(15, -14), s(13, -5), s(14, -7), s(16, 2), s(23, -9), s(29, -3), s(24, 0), s(32, 0), s(41, -6), s(37, -2), s(47, -8), s(66, -19), s(66, -18), s(81, -30), s(88, -31), s(96, -36), s(120, -48), s(126, -53), s(127, -44), s(151, -63), s(168, -64), s(210, -92), s(121, -35), s(63, -29), 
],
// Pawn attack values
[
  s(7, 22), s(7, -3), s(8, -10), s(9, -7), s(9, -8), s(6, -8), s(9, -8), s(10, -8), s(7, -8), s(10, -8), s(12, -11), s(12, -10), s(20, -13), s(20, -12), s(18, -13), s(24, -14), s(30, -16), s(31, -16), s(24, -16), s(29, -17), s(41, -19), s(65, -24), s(48, -19), s(31, -19), s(34, -17), s(52, -14), s(60, -12), s(29, -6), 
],
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(59, 10);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(65, 40);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(120, -39);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(62, -15);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(30, 20);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(61, -10);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(26, -46);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(20, 37);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(46, 0);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(35, 44);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(78, -23);

pub const CHECKS: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(17, 7), s(4, -1), s(16, -11), s(23, -22), s(22, -16),
];
