#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i16, eg: i16) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(159, 214), s(258, 308), s(203, 303), s(358, 289), s(389, 250), s(250, 311), s(282, 241), s(253, 234), 
  s(326, 269), s(397, 259), s(396, 281), s(385, 295), s(322, 343), s(424, 277), s(392, 250), s(378, 254), 
  s(302, 313), s(382, 291), s(381, 315), s(427, 303), s(435, 288), s(434, 302), s(398, 290), s(381, 255), 
  s(356, 257), s(364, 288), s(397, 299), s(396, 292), s(381, 315), s(424, 293), s(364, 301), s(404, 229), 
  s(335, 259), s(345, 271), s(355, 305), s(364, 308), s(374, 316), s(368, 300), s(376, 296), s(342, 258), 
  s(310, 234), s(337, 276), s(345, 284), s(356, 289), s(361, 288), s(350, 275), s(370, 262), s(315, 242), 
  s(317, 193), s(308, 256), s(334, 273), s(340, 265), s(338, 264), s(360, 249), s(337, 253), s(312, 253), 
  s(254, 263), s(311, 200), s(309, 251), s(331, 250), s(335, 237), s(321, 236), s(314, 214), s(227, 301), 
]),
// Bishop PST
Pst::new([
  s(307, 350), s(279, 329), s(273, 333), s(280, 321), s(329, 317), s(336, 330), s(286, 310), s(373, 280), 
  s(361, 321), s(370, 319), s(403, 309), s(387, 301), s(345, 314), s(397, 270), s(381, 304), s(336, 314), 
  s(352, 307), s(384, 313), s(400, 303), s(429, 313), s(428, 321), s(426, 315), s(414, 293), s(415, 288), 
  s(378, 304), s(383, 314), s(414, 323), s(419, 336), s(414, 325), s(418, 310), s(387, 333), s(402, 282), 
  s(386, 284), s(390, 320), s(396, 315), s(389, 337), s(413, 312), s(388, 326), s(390, 307), s(384, 291), 
  s(379, 282), s(395, 282), s(375, 325), s(387, 306), s(375, 326), s(399, 310), s(380, 306), s(369, 303), 
  s(385, 254), s(379, 277), s(368, 286), s(367, 296), s(378, 297), s(389, 293), s(394, 282), s(377, 281), 
  s(285, 299), s(389, 272), s(357, 253), s(365, 291), s(351, 297), s(349, 269), s(277, 324), s(326, 294), 
]),
// Rook PST
Pst::new([
  s(578, 510), s(539, 534), s(586, 515), s(585, 529), s(562, 526), s(571, 532), s(561, 519), s(636, 488), 
  s(522, 540), s(546, 538), s(574, 528), s(582, 527), s(608, 518), s(595, 519), s(564, 524), s(591, 506), 
  s(497, 546), s(487, 543), s(558, 523), s(569, 519), s(572, 526), s(604, 512), s(576, 512), s(547, 510), 
  s(487, 539), s(467, 545), s(504, 539), s(533, 527), s(544, 513), s(545, 507), s(499, 524), s(501, 529), 
  s(453, 529), s(459, 544), s(470, 538), s(493, 535), s(505, 520), s(470, 540), s(494, 513), s(476, 513), 
  s(448, 511), s(470, 510), s(472, 515), s(457, 517), s(475, 504), s(458, 518), s(490, 500), s(450, 493), 
  s(455, 486), s(470, 504), s(473, 513), s(497, 499), s(490, 498), s(506, 481), s(473, 482), s(411, 511), 
  s(472, 502), s(482, 501), s(481, 518), s(495, 512), s(504, 499), s(480, 506), s(421, 547), s(459, 472), 
]),
// Queen PST
Pst::new([
  s(892, 949), s(973, 908), s(952, 961), s(950, 978), s(993, 966), s(998, 932), s(980, 951), s(956, 949), 
  s(912, 928), s(900, 955), s(916, 984), s(969, 966), s(958, 1000), s(983, 974), s(941, 953), s(948, 957), 
  s(890, 978), s(902, 974), s(938, 964), s(959, 984), s(987, 958), s(992, 963), s(963, 997), s(948, 981), 
  s(929, 933), s(912, 959), s(926, 951), s(913, 990), s(923, 1002), s(954, 993), s(936, 980), s(937, 966), 
  s(912, 899), s(912, 944), s(915, 962), s(909, 984), s(915, 972), s(916, 953), s(916, 990), s(906, 937), 
  s(886, 944), s(923, 902), s(890, 983), s(912, 930), s(902, 948), s(919, 922), s(939, 925), s(920, 869), 
  s(893, 912), s(932, 842), s(926, 867), s(921, 862), s(916, 900), s(915, 831), s(915, 851), s(877, 886), 
  s(906, 894), s(918, 887), s(917, 871), s(923, 833), s(920, 825), s(882, 836), s(923, 813), s(914, 834), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(193, 195), s(181, 202), s(177, 185), s(183, 189), s(182, 177), s(143, 193), s(135, 202), s(126, 177), 
  s(46, 151), s(86, 139), s(75, 124), s(120, 125), s(156, 141), s(135, 107), s(121, 162), s(111, 119), 
  s(56, 131), s(97, 119), s(92, 95), s(106, 107), s(122, 96), s(104, 88), s(100, 107), s(71, 107), 
  s(47, 114), s(77, 112), s(85, 95), s(101, 97), s(103, 103), s(94, 100), s(99, 108), s(62, 104), 
  s(48, 102), s(81, 109), s(79, 101), s(74, 100), s(81, 110), s(84, 105), s(127, 99), s(74, 90), 
  s(31, 119), s(73, 121), s(65, 115), s(54, 115), s(61, 119), s(110, 111), s(121, 112), s(59, 105), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(20, -40), s(15, 23), s(13, 51), s(22, 14), s(59, -7), s(66, 24), s(65, 59), s(-7, -59), 
  s(40, -33), s(-2, 21), s(7, 44), s(71, -26), s(-17, 18), s(38, 43), s(43, 27), s(-83, 12), 
  s(-2, 25), s(35, 30), s(32, 7), s(-61, 33), s(-100, 24), s(26, 41), s(-34, 56), s(-39, 24), 
  s(-69, 14), s(36, 34), s(4, 30), s(-27, 23), s(17, 24), s(-31, 34), s(4, 32), s(9, 1), 
  s(12, -9), s(2, 14), s(-43, 37), s(-47, 33), s(-88, 47), s(-44, 38), s(-19, 29), s(-46, 14), 
  s(5, -45), s(20, -12), s(-64, 36), s(-124, 47), s(-94, 41), s(-97, 42), s(-36, 23), s(-65, 8), 
  s(8, -19), s(-21, 14), s(-32, 22), s(-91, 35), s(-91, 33), s(-31, 21), s(22, 0), s(30, -23), 
  s(61, -36), s(17, -45), s(7, -24), s(-69, -11), s(3, -43), s(-30, -23), s(53, -33), s(59, -61), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(93, 95), s(81, 102), s(77, 85), s(83, 89), s(82, 77), s(43, 93), s(35, 102), s(26, 77), 
  s(88, 81), s(72, 93), s(93, 69), s(49, 61), s(12, 46), s(30, 78), s(-75, 74), s(40, 77), 
  s(35, 47), s(-11, 68), s(-10, 61), s(13, 34), s(3, 45), s(8, 48), s(25, 64), s(-27, 68), 
  s(22, 22), s(0, 37), s(0, 24), s(3, 11), s(-39, 25), s(0, 19), s(-16, 39), s(13, 30), 
  s(-1, 5), s(-41, 22), s(-4, 18), s(-18, 8), s(-20, 14), s(-5, 17), s(-20, 26), s(8, 9), 
  s(29, -15), s(-8, 10), s(4, -13), s(-8, -5), s(18, -9), s(-21, 15), s(-1, 10), s(0, -5), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);
pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(-52, -68),
  s(5, -63),
  s(8, -51),
  s(-6, -25),
  s(3, -35),
  s(-24, 3),
  s(0, 0),
  s(0, 0),
]);
