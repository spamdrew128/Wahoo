#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::Pst};

const fn s(mg: i16, eg: i16) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(216, 273), s(422, 417), s(213, 399), s(500, 355), s(617, 284), s(121, 420), s(356, 365), s(340, 277), 
  s(376, 367), s(521, 326), s(563, 319), s(576, 342), s(548, 377), s(646, 260), s(430, 374), s(426, 333), 
  s(491, 322), s(512, 337), s(513, 396), s(603, 353), s(596, 378), s(617, 357), s(549, 363), s(518, 313), 
  s(490, 328), s(491, 361), s(555, 365), s(531, 396), s(518, 388), s(563, 370), s(510, 377), s(537, 306), 
  s(460, 341), s(461, 351), s(482, 375), s(491, 387), s(501, 389), s(505, 398), s(505, 362), s(466, 313), 
  s(433, 310), s(443, 358), s(475, 348), s(487, 382), s(479, 371), s(487, 344), s(491, 318), s(441, 283), 
  s(397, 215), s(437, 331), s(455, 324), s(457, 362), s(468, 357), s(481, 326), s(492, 300), s(437, 312), 
  s(392, 395), s(427, 235), s(373, 326), s(450, 336), s(439, 294), s(427, 299), s(435, 265), s(361, 280), 
]),
// Bishop PST
Pst::new([
  s(431, 413), s(431, 425), s(430, 415), s(477, 361), s(542, 402), s(340, 381), s(492, 379), s(528, 323), 
  s(471, 370), s(510, 394), s(491, 413), s(519, 402), s(490, 393), s(495, 444), s(518, 372), s(493, 340), 
  s(477, 414), s(524, 387), s(536, 417), s(574, 396), s(628, 392), s(622, 400), s(556, 413), s(531, 355), 
  s(514, 361), s(518, 413), s(577, 396), s(576, 408), s(536, 423), s(559, 404), s(534, 394), s(527, 388), 
  s(499, 382), s(547, 385), s(547, 398), s(552, 419), s(564, 401), s(522, 412), s(533, 389), s(510, 353), 
  s(504, 362), s(529, 354), s(493, 429), s(527, 410), s(503, 420), s(525, 391), s(520, 396), s(513, 383), 
  s(561, 357), s(508, 350), s(527, 369), s(496, 384), s(518, 383), s(520, 376), s(542, 352), s(508, 355), 
  s(397, 403), s(487, 380), s(485, 305), s(522, 367), s(496, 346), s(477, 342), s(313, 388), s(443, 420), 
]),
// Rook PST
Pst::new([
  s(739, 636), s(763, 613), s(837, 616), s(751, 638), s(750, 642), s(770, 640), s(734, 656), s(736, 632), 
  s(690, 674), s(747, 644), s(773, 628), s(799, 624), s(802, 621), s(807, 609), s(705, 642), s(783, 612), 
  s(648, 660), s(714, 637), s(750, 640), s(757, 616), s(754, 618), s(812, 607), s(766, 625), s(679, 632), 
  s(644, 644), s(648, 669), s(691, 642), s(701, 633), s(704, 621), s(699, 637), s(655, 642), s(662, 628), 
  s(618, 637), s(636, 641), s(653, 629), s(635, 641), s(680, 613), s(640, 623), s(639, 638), s(639, 596), 
  s(595, 613), s(634, 623), s(633, 624), s(613, 644), s(637, 632), s(630, 629), s(658, 616), s(610, 623), 
  s(596, 604), s(628, 608), s(610, 630), s(629, 636), s(647, 606), s(666, 598), s(641, 595), s(548, 618), 
  s(617, 613), s(621, 630), s(639, 633), s(651, 631), s(668, 605), s(632, 626), s(574, 655), s(618, 565), 
]),
// Queen PST
Pst::new([
  s(1671, 1048), s(1730, 1019), s(1789, 1020), s(1857, 995), s(1894, 947), s(1830, 995), s(1850, 1001), s(1798, 1021), 
  s(1751, 990), s(1741, 1008), s(1769, 1051), s(1802, 1041), s(1778, 1064), s(1828, 1063), s(1819, 1026), s(1796, 1022), 
  s(1763, 956), s(1751, 1029), s(1770, 1016), s(1824, 1021), s(1790, 1040), s(1843, 1043), s(1820, 1065), s(1844, 963), 
  s(1731, 983), s(1762, 1001), s(1764, 1005), s(1770, 1035), s(1772, 1091), s(1795, 1052), s(1751, 1068), s(1789, 991), 
  s(1767, 923), s(1774, 928), s(1765, 992), s(1758, 1026), s(1758, 1030), s(1766, 1029), s(1760, 1045), s(1772, 954), 
  s(1721, 913), s(1778, 937), s(1748, 936), s(1762, 942), s(1743, 986), s(1783, 932), s(1781, 937), s(1764, 940), 
  s(1771, 831), s(1731, 879), s(1779, 822), s(1777, 866), s(1770, 869), s(1769, 840), s(1783, 821), s(1706, 1012), 
  s(1750, 897), s(1729, 929), s(1759, 897), s(1774, 827), s(1781, 791), s(1782, 766), s(1904, 580), s(1747, 892), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(174, 260), s(179, 271), s(195, 254), s(172, 239), s(183, 230), s(165, 245), s(96, 262), s(95, 236), 
  s(72, 234), s(167, 164), s(78, 147), s(143, 104), s(204, 156), s(168, 195), s(180, 172), s(132, 177), 
  s(74, 192), s(125, 179), s(114, 159), s(132, 148), s(143, 159), s(121, 132), s(132, 167), s(81, 176), 
  s(64, 166), s(98, 170), s(101, 139), s(129, 147), s(129, 155), s(117, 162), s(121, 155), s(88, 157), 
  s(63, 152), s(105, 156), s(105, 138), s(98, 163), s(105, 174), s(101, 158), s(163, 143), s(96, 145), 
  s(45, 171), s(93, 166), s(81, 172), s(67, 145), s(79, 167), s(127, 166), s(157, 152), s(80, 139), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(755, -189), s(224, 8), s(-12, 9), s(1411, -603), s(-198, 64), s(-21, 68), s(-208, 53), s(405, -114), 
  s(-137, 69), s(-68, 117), s(-461, 156), s(-434, 216), s(-14, 100), s(126, 71), s(-124, 140), s(315, 35), 
  s(62, 58), s(-213, 140), s(-360, 199), s(-260, 171), s(-86, 130), s(-94, 133), s(-22, 132), s(-71, 91), 
  s(-116, 95), s(-163, 129), s(-52, 88), s(-146, 118), s(-166, 128), s(-172, 142), s(-97, 124), s(-164, 78), 
  s(-275, 118), s(-190, 101), s(-171, 111), s(-151, 125), s(-221, 125), s(-202, 136), s(-94, 82), s(-227, 87), 
  s(-116, 55), s(-123, 98), s(-178, 105), s(-197, 118), s(-227, 129), s(-201, 116), s(-125, 90), s(-138, 71), 
  s(-69, 50), s(-48, 42), s(-42, 69), s(-125, 88), s(-129, 87), s(-58, 72), s(-5, 47), s(2, 27), 
  s(64, -40), s(-21, -7), s(-18, 0), s(-81, 9), s(-29, -13), s(-71, 15), s(36, -3), s(37, -52), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(74, 160), s(79, 171), s(95, 154), s(72, 139), s(83, 130), s(65, 145), s(-3, 162), s(-4, 136), 
  s(52, 86), s(-1, 153), s(91, 140), s(3, 157), s(-45, 86), s(-4, 60), s(-113, 146), s(-7, 134), 
  s(32, 72), s(-11, 60), s(-10, 65), s(0, 55), s(-1, 19), s(-31, 82), s(24, 68), s(-41, 69), 
  s(11, 36), s(16, 39), s(29, 29), s(-7, 13), s(-46, 18), s(-1, 23), s(-48, 54), s(-34, 48), 
  s(-6, -1), s(-6, 19), s(-37, 31), s(-64, 23), s(-7, -11), s(23, -8), s(-19, 5), s(-14, 0), 
  s(14, 5), s(-4, 26), s(1, 8), s(-10, 14), s(35, -13), s(-9, 2), s(-19, 19), s(4, -18), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);
