#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, piece_tables::{Pst, Prt}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(250, 290), s(361, 323), s(343, 384), s(391, 351), s(501, 335), s(306, 354), s(371, 305), s(320, 247), 
  s(348, 331), s(383, 359), s(472, 326), s(425, 354), s(449, 329), s(464, 321), s(434, 333), s(395, 301), 
  s(370, 328), s(453, 338), s(458, 369), s(472, 358), s(462, 353), s(554, 332), s(468, 322), s(432, 303), 
  s(432, 337), s(451, 360), s(449, 387), s(498, 380), s(467, 380), s(505, 367), s(456, 355), s(470, 316), 
  s(419, 346), s(445, 348), s(454, 383), s(468, 383), s(469, 380), s(464, 377), s(482, 352), s(434, 341), 
  s(414, 330), s(422, 359), s(443, 359), s(446, 373), s(463, 375), s(450, 349), s(457, 330), s(417, 337), 
  s(398, 299), s(399, 324), s(416, 338), s(437, 342), s(434, 345), s(438, 332), s(429, 307), s(416, 308), 
  s(308, 294), s(394, 295), s(383, 315), s(397, 331), s(407, 324), s(396, 322), s(395, 308), s(407, 264), 
]),
// Bishop PST
Pst::new([
  s(414, 391), s(403, 391), s(311, 406), s(269, 415), s(338, 398), s(319, 404), s(405, 390), s(402, 387), 
  s(415, 389), s(431, 393), s(409, 388), s(389, 380), s(425, 381), s(455, 380), s(406, 398), s(377, 378), 
  s(441, 379), s(472, 380), s(473, 384), s(465, 376), s(477, 371), s(503, 383), s(481, 382), s(477, 371), 
  s(432, 380), s(461, 383), s(454, 402), s(505, 396), s(469, 406), s(487, 388), s(452, 385), s(444, 379), 
  s(440, 368), s(449, 388), s(463, 393), s(476, 404), s(483, 389), s(449, 396), s(447, 377), s(434, 368), 
  s(444, 366), s(465, 376), s(464, 395), s(465, 389), s(462, 399), s(474, 380), s(452, 380), s(446, 360), 
  s(461, 343), s(463, 355), s(465, 359), s(449, 377), s(457, 373), s(467, 368), s(481, 351), s(446, 343), 
  s(424, 349), s(451, 361), s(430, 369), s(426, 368), s(440, 368), s(420, 377), s(434, 359), s(433, 341), 
]),
// Rook PST
Pst::new([
  s(669, 752), s(697, 742), s(640, 767), s(694, 750), s(677, 754), s(633, 759), s(692, 739), s(686, 743), 
  s(641, 756), s(644, 760), s(672, 755), s(696, 746), s(703, 731), s(688, 744), s(638, 756), s(649, 749), 
  s(617, 742), s(648, 741), s(646, 743), s(661, 737), s(662, 731), s(668, 728), s(708, 720), s(642, 725), 
  s(588, 743), s(633, 729), s(625, 746), s(641, 734), s(636, 732), s(627, 741), s(629, 728), s(606, 734), 
  s(582, 734), s(596, 734), s(612, 735), s(625, 730), s(647, 716), s(603, 729), s(632, 717), s(590, 722), 
  s(586, 714), s(604, 720), s(615, 712), s(624, 708), s(618, 718), s(623, 709), s(620, 711), s(588, 703), 
  s(572, 716), s(607, 706), s(612, 709), s(622, 712), s(626, 705), s(614, 709), s(615, 702), s(535, 719), 
  s(597, 708), s(608, 710), s(619, 708), s(625, 704), s(624, 702), s(602, 710), s(577, 718), s(587, 692), 
]),
// Queen PST
Pst::new([
  s(1204, 1184), s(1211, 1216), s(1198, 1242), s(1221, 1232), s(1319, 1184), s(1254, 1223), s(1320, 1157), s(1282, 1211), 
  s(1217, 1158), s(1186, 1212), s(1209, 1240), s(1196, 1266), s(1136, 1328), s(1243, 1232), s(1246, 1212), s(1309, 1161), 
  s(1236, 1145), s(1223, 1169), s(1245, 1166), s(1214, 1236), s(1266, 1216), s(1292, 1194), s(1294, 1155), s(1266, 1195), 
  s(1202, 1187), s(1226, 1177), s(1204, 1189), s(1207, 1224), s(1225, 1216), s(1242, 1203), s(1232, 1223), s(1238, 1195), 
  s(1234, 1132), s(1203, 1190), s(1228, 1178), s(1213, 1224), s(1229, 1194), s(1218, 1187), s(1244, 1176), s(1227, 1186), 
  s(1221, 1134), s(1242, 1119), s(1238, 1157), s(1237, 1153), s(1235, 1177), s(1240, 1150), s(1248, 1145), s(1237, 1154), 
  s(1226, 1105), s(1242, 1109), s(1251, 1106), s(1255, 1102), s(1256, 1115), s(1262, 1101), s(1244, 1080), s(1255, 1075), 
  s(1242, 1094), s(1231, 1095), s(1241, 1094), s(1248, 1090), s(1242, 1100), s(1207, 1106), s(1233, 1082), s(1221, 1064), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(155, 302), s(147, 299), s(135, 293), s(168, 266), s(132, 284), s(168, 259), s(85, 300), s(64, 318), 
  s(97, 169), s(100, 162), s(131, 159), s(132, 145), s(182, 138), s(199, 141), s(181, 162), s(140, 160), 
  s(82, 151), s(97, 139), s(103, 140), s(123, 119), s(123, 134), s(121, 134), s(105, 139), s(92, 139), 
  s(79, 130), s(74, 131), s(99, 127), s(124, 119), s(115, 125), s(114, 123), s(86, 122), s(88, 118), 
  s(85, 124), s(90, 124), s(103, 126), s(109, 135), s(116, 142), s(117, 134), s(127, 113), s(107, 113), 
  s(78, 132), s(90, 122), s(85, 141), s(99, 138), s(97, 157), s(132, 135), s(132, 114), s(94, 110), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-98, -104), s(79, -66), s(119, -49), s(-34, -13), s(-116, 12), s(-129, 35), s(67, 1), s(38, -49), 
  s(70, -27), s(11, 37), s(-63, 43), s(79, 18), s(-2, 43), s(-58, 77), s(21, 46), s(-52, 24), 
  s(-45, 23), s(27, 38), s(96, 28), s(12, 36), s(75, 39), s(120, 62), s(164, 52), s(-1, 19), 
  s(24, -7), s(0, 41), s(38, 38), s(-11, 50), s(-48, 59), s(-14, 54), s(-5, 49), s(-87, 17), 
  s(-125, 5), s(17, 5), s(3, 31), s(-56, 50), s(-65, 54), s(-19, 32), s(-45, 22), s(-90, -1), 
  s(29, -30), s(19, -2), s(10, 15), s(-14, 27), s(2, 25), s(15, 11), s(20, 0), s(-9, -17), 
  s(53, -48), s(47, -18), s(9, 5), s(-43, 21), s(-29, 21), s(-2, 9), s(37, -12), s(27, -36), 
  s(16, -92), s(53, -57), s(21, -29), s(-92, 0), s(-16, -26), s(-52, -1), s(23, -38), s(19, -77), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(55, 202), s(47, 199), s(35, 193), s(68, 166), s(32, 184), s(68, 159), s(-14, 200), s(-35, 218), 
  s(49, 210), s(29, 215), s(14, 178), s(17, 150), s(-28, 148), s(-5, 161), s(-63, 186), s(-63, 207), 
  s(28, 118), s(9, 109), s(17, 85), s(1, 81), s(1, 66), s(36, 67), s(-22, 112), s(-18, 109), 
  s(5, 68), s(-5, 62), s(-29, 47), s(-21, 44), s(-38, 46), s(-35, 49), s(4, 66), s(6, 60), 
  s(7, 24), s(-3, 32), s(-28, 25), s(-41, 30), s(-29, 14), s(12, 9), s(-21, 41), s(17, 24), 
  s(-2, 18), s(11, 24), s(0, 10), s(-36, 24), s(-20, 11), s(-16, 14), s(-12, 29), s(-12, 25), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(54, -260),
  s(22, -149),
  s(0, -61),
  s(11, -37),
  s(-4, -1),
  s(-4, -12),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(45, -26),
  s(9, -24),
  s(-5, -26),
  s(-18, -14),
  s(-33, -18),
  s(-18, -18),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(73, 388),
  s(204, 138),
  s(47, 53),
  s(18, 16),
  s(-5, -6),
  s(6, -7),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(36, 64);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(4, 49), s(6, 57), s(4, 60), s(10, 55), s(10, 59), s(13, 56), s(9, 53), s(21, 35), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(10, 16), s(18, 30), s(20, 40), s(21, 47), s(21, 51), s(22, 54), s(18, 54), s(10, 59), s(14, 52), s(20, 44), s(36, 41), s(-19, 69), s(28, 29), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(7, 40), s(11, 54), s(18, 56), s(16, 67), s(21, 80), s(22, 87), s(25, 88), s(34, 89), s(33, 94), s(32, 97), s(39, 99), s(42, 103), s(45, 98), s(32, 97), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(3, 343), s(5, 308), s(4, 329), s(11, 329), s(14, 341), s(15, 347), s(16, 368), s(18, 379), s(23, 381), s(25, 388), s(27, 401), s(27, 399), s(32, 401), s(35, 403), s(33, 415), s(35, 422), s(46, 403), s(55, 403), s(76, 392), s(55, 407), s(118, 370), s(64, 391), s(167, 337), s(182, 306), s(297, 251), s(211, 313), s(178, 295), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(20, 24), s(31, 34), s(41, 38), s(51, 41), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(6, 10), s(14, 14), s(21, 19), s(26, 20), s(26, 22), s(30, 20), s(31, 34), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 2), s(7, 12), s(15, 15), s(22, 19), s(19, 29), s(32, 28), s(36, 36), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(5, -3), s(6, 6), s(10, -3), s(8, 12), s(8, 23), s(6, 21), s(5, 29), s(1, 38), s(-3, 53), s(6, 47), s(-27, 82), s(-13, 75), s(-37, 134), s(9, 78), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-10, -20), s(-9, 0), s(0, 15), s(2, 11), s(6, 10), s(11, 6), s(6, 22), s(14, 8), s(19, 7), s(20, 7), s(28, 1), s(32, 0), s(29, 0), s(35, -4), s(47, -7), s(44, -8), s(44, -7), s(49, -11), s(50, -15), s(43, -15), s(75, -22), s(60, -18), s(40, -20), s(25, -19), s(17, -16), s(-57, -13), s(31, -17), s(-78, -6), 
],
// Bishop attack values
[
  s(3, 11), s(-2, 13), s(-1, 17), s(3, 13), s(6, 17), s(14, 6), s(14, 3), s(16, 8), s(28, -2), s(21, 0), s(34, -6), s(28, -3), s(35, -3), s(35, -6), s(37, -3), s(28, -6), s(31, -5), s(33, -8), s(35, -6), s(35, -8), s(16, -3), s(17, -4), s(-14, 1), s(-22, 0), s(-41, 2), s(-34, -3), s(18, -19), s(-42, -1), 
],
// Rook attack values
[
  s(16, 4), s(2, -3), s(14, -10), s(21, -22), s(20, -16), s(25, -19), s(24, -11), s(17, -9), s(32, -16), s(33, -16), s(39, -18), s(35, -17), s(34, -15), s(32, -13), s(42, -15), s(38, -12), s(39, -13), s(53, -16), s(47, -13), s(44, -12), s(30, -8), s(33, -8), s(41, -11), s(38, -8), s(29, -3), s(64, -14), s(15, -1), s(33, -6), 
],
// Queen attack values
[
  s(-2, -14), s(0, -12), s(5, -20), s(10, -23), s(14, -16), s(13, -7), s(15, -10), s(17, 1), s(24, -12), s(29, -5), s(25, -1), s(32, -2), s(41, -8), s(39, -5), s(47, -11), s(66, -20), s(66, -20), s(84, -33), s(85, -32), s(94, -37), s(122, -52), s(121, -53), s(114, -41), s(143, -61), s(159, -62), s(199, -89), s(148, -52), s(98, -49), 
],
// Pawn attack values
[
  s(7, 12), s(7, -3), s(8, -10), s(8, -7), s(8, -8), s(6, -8), s(9, -8), s(10, -8), s(7, -8), s(10, -9), s(12, -11), s(12, -11), s(20, -14), s(20, -13), s(18, -13), s(24, -14), s(30, -17), s(29, -16), s(24, -16), s(28, -17), s(39, -20), s(65, -25), s(50, -20), s(33, -20), s(34, -18), s(50, -14), s(51, -10), s(15, -5), 
],
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(95, 32);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(89, 64);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(150, -7);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(101, 3);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(42, 39);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(88, 19);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(62, -25);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 37);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(76, 29);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(84, 44);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(115, 1);

pub const TEMPO_BONUS: ScoreTuple = s(41, 29);

pub const FRIENDLY_BISHOP_PAWN_COMPLEX: [ScoreTuple; 9] = [
  s(25, 20), s(15, 17), s(9, 6), s(1, -1), s(-5, -12), s(-9, -28), s(-32, -24), s(-25, -47), s(-51, -36), 
];

pub const ENEMY_BISHOP_PAWN_COMPLEX: [ScoreTuple; 9] = [
  s(39, -21), s(19, 0), s(9, 5), s(3, 7), s(-5, 8), s(-15, 5), s(-39, 2), s(-36, 3), s(-65, -7), 
];
