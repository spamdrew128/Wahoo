#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(152, 281), s(256, 292), s(247, 341), s(320, 304), s(436, 293), s(232, 315), s(298, 274), s(229, 228), 
  s(273, 323), s(301, 341), s(432, 299), s(388, 333), s(380, 323), s(439, 298), s(369, 314), s(354, 291), 
  s(286, 322), s(397, 318), s(382, 356), s(417, 348), s(441, 334), s(477, 328), s(420, 310), s(387, 298), 
  s(345, 331), s(357, 347), s(360, 372), s(412, 368), s(381, 372), s(424, 358), s(368, 351), s(390, 319), 
  s(334, 337), s(346, 332), s(362, 365), s(369, 369), s(379, 366), s(369, 365), s(397, 335), s(351, 335), 
  s(320, 316), s(334, 336), s(356, 333), s(357, 354), s(380, 353), s(367, 328), s(371, 315), s(331, 327), 
  s(319, 293), s(322, 317), s(337, 321), s(366, 324), s(365, 330), s(369, 313), s(356, 303), s(345, 303), 
  s(222, 307), s(339, 297), s(319, 315), s(339, 328), s(348, 323), s(341, 321), s(343, 309), s(330, 278), 
]),
// Bishop PST
Pst::new([
  s(340, 351), s(327, 344), s(237, 363), s(212, 368), s(280, 352), s(269, 351), s(333, 345), s(321, 340), 
  s(339, 352), s(372, 350), s(330, 351), s(321, 345), s(400, 339), s(392, 342), s(392, 345), s(317, 347), 
  s(333, 358), s(396, 343), s(396, 348), s(396, 343), s(413, 340), s(437, 346), s(409, 349), s(388, 351), 
  s(351, 348), s(374, 353), s(382, 366), s(424, 362), s(402, 366), s(409, 356), s(380, 348), s(358, 359), 
  s(364, 344), s(373, 354), s(378, 360), s(405, 366), s(405, 357), s(374, 356), s(373, 348), s(373, 344), 
  s(377, 339), s(392, 346), s(390, 358), s(390, 356), s(394, 363), s(401, 351), s(383, 350), s(381, 344), 
  s(396, 327), s(397, 327), s(397, 333), s(383, 344), s(393, 343), s(408, 336), s(417, 330), s(385, 328), 
  s(363, 333), s(397, 345), s(380, 347), s(368, 349), s(387, 346), s(373, 352), s(382, 340), s(368, 332), 
]),
// Rook PST
Pst::new([
  s(564, 635), s(581, 629), s(523, 652), s(570, 637), s(563, 641), s(540, 644), s(577, 628), s(606, 621), 
  s(540, 640), s(543, 645), s(578, 637), s(605, 628), s(619, 613), s(623, 618), s(562, 636), s(574, 629), 
  s(505, 643), s(554, 638), s(550, 638), s(571, 634), s(563, 626), s(616, 611), s(627, 612), s(574, 615), 
  s(493, 643), s(543, 627), s(535, 643), s(549, 631), s(554, 626), s(561, 629), s(559, 620), s(536, 627), 
  s(486, 639), s(503, 637), s(519, 639), s(526, 634), s(552, 618), s(529, 624), s(556, 616), s(513, 622), 
  s(491, 626), s(511, 628), s(522, 620), s(527, 619), s(532, 624), s(546, 609), s(560, 607), s(515, 606), 
  s(493, 622), s(521, 615), s(532, 616), s(539, 623), s(548, 611), s(555, 608), s(563, 600), s(476, 622), 
  s(529, 613), s(538, 616), s(554, 616), s(565, 613), s(567, 608), s(556, 610), s(527, 617), s(534, 591), 
]),
// Queen PST
Pst::new([
  s(1018, 1128), s(1000, 1167), s(994, 1195), s(1023, 1178), s(1140, 1118), s(1097, 1147), s(1140, 1105), s(1112, 1148), 
  s(1036, 1107), s(992, 1150), s(1039, 1159), s(1015, 1197), s(985, 1251), s(1107, 1145), s(1078, 1152), s(1126, 1131), 
  s(1051, 1104), s(1036, 1122), s(1052, 1123), s(1036, 1193), s(1099, 1168), s(1149, 1152), s(1141, 1121), s(1122, 1168), 
  s(1023, 1140), s(1038, 1135), s(1026, 1144), s(1030, 1177), s(1049, 1187), s(1067, 1191), s(1060, 1216), s(1064, 1196), 
  s(1055, 1100), s(1022, 1154), s(1048, 1129), s(1038, 1176), s(1047, 1161), s(1047, 1170), s(1066, 1173), s(1058, 1188), 
  s(1043, 1113), s(1066, 1081), s(1061, 1114), s(1065, 1108), s(1063, 1136), s(1072, 1129), s(1074, 1137), s(1066, 1147), 
  s(1050, 1080), s(1063, 1086), s(1082, 1069), s(1091, 1063), s(1094, 1076), s(1098, 1077), s(1081, 1056), s(1093, 1058), 
  s(1076, 1067), s(1068, 1074), s(1084, 1066), s(1095, 1066), s(1086, 1076), s(1054, 1092), s(1070, 1073), s(1054, 1050), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(161, 277), s(173, 274), s(136, 271), s(167, 246), s(137, 262), s(155, 240), s(102, 276), s(64, 294), 
  s(96, 167), s(119, 165), s(123, 149), s(131, 145), s(197, 117), s(200, 127), s(193, 160), s(138, 148), 
  s(80, 151), s(114, 143), s(105, 128), s(124, 104), s(134, 117), s(124, 123), s(134, 136), s(89, 133), 
  s(73, 140), s(101, 142), s(106, 122), s(128, 111), s(130, 114), s(121, 118), s(126, 127), s(82, 119), 
  s(77, 128), s(104, 134), s(104, 118), s(109, 125), s(126, 130), s(119, 124), s(154, 119), s(99, 109), 
  s(80, 134), s(117, 131), s(94, 132), s(111, 130), s(118, 141), s(149, 127), s(171, 120), s(99, 105), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-27, -127), s(99, -78), s(132, -56), s(27, -30), s(-80, -2), s(-79, 27), s(111, -11), s(44, -45), 
  s(108, -48), s(39, 18), s(-6, 19), s(96, 6), s(27, 26), s(-24, 57), s(28, 31), s(1, 8), 
  s(0, -1), s(53, 19), s(99, 15), s(7, 28), s(24, 37), s(111, 52), s(140, 42), s(11, 8), 
  s(7, -16), s(-32, 36), s(-18, 42), s(-74, 56), s(-108, 64), s(-77, 64), s(-45, 50), s(-98, 17), 
  s(-153, 4), s(-22, 5), s(-85, 47), s(-163, 69), s(-169, 75), s(-115, 57), s(-95, 33), s(-125, 8), 
  s(14, -28), s(-26, 4), s(-82, 35), s(-128, 52), s(-101, 51), s(-94, 42), s(-36, 18), s(-49, -3), 
  s(61, -51), s(26, -16), s(-31, 15), s(-75, 26), s(-68, 30), s(-41, 19), s(22, -7), s(34, -34), 
  s(35, -98), s(82, -63), s(55, -39), s(-87, -1), s(8, -35), s(-32, -10), s(62, -51), s(54, -88), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(61, 177), s(73, 174), s(36, 171), s(67, 146), s(37, 162), s(55, 140), s(2, 176), s(-35, 194), 
  s(48, 186), s(9, 192), s(16, 167), s(13, 129), s(-38, 146), s(-8, 153), s(-64, 167), s(-56, 190), 
  s(18, 93), s(-3, 83), s(16, 71), s(3, 70), s(-1, 54), s(43, 51), s(-49, 94), s(-19, 88), 
  s(-7, 44), s(-36, 40), s(-38, 35), s(-30, 34), s(-41, 34), s(-22, 30), s(-23, 46), s(10, 38), 
  s(-13, 3), s(-26, 10), s(-36, 12), s(-51, 18), s(-24, 0), s(18, -9), s(-14, 12), s(25, 1), 
  s(-24, -1), s(-4, 0), s(-1, -2), s(-41, 13), s(-19, 1), s(3, -6), s(20, -3), s(-18, 7), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(62, -234),
  s(30, -151),
  s(-3, -61),
  s(6, -39),
  s(-7, -6),
  s(-15, -14),
  s(0, 0),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 74);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(52, -22), s(71, 38), s(83, 62), s(87, 73), s(100, 77), s(106, 87), s(116, 85), s(120, 83), s(141, 62), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(38, -7), s(53, 20), s(68, 40), s(78, 59), s(87, 72), s(92, 84), s(98, 92), s(101, 93), s(99, 101), s(110, 95), s(125, 89), s(154, 84), s(81, 127), s(172, 72), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(18, 63), s(32, 97), s(39, 111), s(48, 116), s(48, 128), s(59, 139), s(65, 147), s(73, 148), s(90, 151), s(94, 158), s(99, 163), s(109, 167), s(116, 173), s(124, 169), s(108, 170), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(215, 98), s(211, 127), s(213, 148), s(213, 161), s(222, 173), s(226, 191), s(227, 205), s(228, 234), s(231, 245), s(236, 251), s(238, 267), s(242, 281), s(241, 289), s(246, 294), s(248, 305), s(248, 320), s(249, 333), s(259, 324), s(266, 333), s(289, 326), s(259, 357), s(321, 322), s(287, 346), s(339, 331), s(313, 329), s(317, 326), s(276, 351), s(266, 344), 
];
