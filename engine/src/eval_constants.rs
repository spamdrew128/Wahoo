#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i16, eg: i16) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(220, 290), s(314, 326), s(317, 376), s(379, 341), s(493, 326), s(292, 343), s(338, 309), s(296, 242), 
  s(344, 348), s(383, 370), s(507, 341), s(464, 372), s(448, 359), s(513, 338), s(421, 349), s(413, 316), 
  s(355, 358), s(478, 357), s(477, 386), s(508, 380), s(538, 363), s(559, 360), s(498, 348), s(443, 330), 
  s(402, 362), s(423, 388), s(442, 407), s(484, 404), s(452, 410), s(505, 392), s(431, 389), s(445, 349), 
  s(382, 370), s(407, 376), s(427, 406), s(426, 408), s(441, 403), s(428, 404), s(446, 379), s(395, 356), 
  s(368, 347), s(390, 377), s(416, 374), s(415, 395), s(432, 394), s(421, 371), s(430, 354), s(374, 353), 
  s(357, 323), s(355, 354), s(387, 360), s(396, 369), s(398, 372), s(420, 352), s(399, 334), s(387, 323), 
  s(262, 320), s(367, 297), s(344, 347), s(362, 355), s(370, 350), s(378, 344), s(371, 315), s(367, 291), 
]),
// Bishop PST
Pst::new([
  s(421, 386), s(406, 388), s(332, 407), s(308, 412), s(364, 398), s(349, 396), s(405, 386), s(404, 378), 
  s(429, 388), s(480, 396), s(429, 402), s(420, 396), s(501, 388), s(485, 391), s(495, 391), s(394, 386), 
  s(414, 404), s(482, 395), s(494, 400), s(500, 394), s(503, 392), s(527, 397), s(489, 402), s(465, 393), 
  s(434, 396), s(443, 413), s(475, 417), s(509, 414), s(492, 421), s(498, 407), s(452, 406), s(431, 406), 
  s(430, 395), s(452, 408), s(453, 418), s(477, 422), s(480, 412), s(454, 412), s(450, 399), s(429, 390), 
  s(444, 383), s(458, 398), s(456, 411), s(457, 409), s(457, 416), s(463, 405), s(453, 395), s(447, 383), 
  s(454, 365), s(456, 371), s(461, 383), s(438, 396), s(446, 399), s(465, 387), s(477, 374), s(444, 361), 
  s(405, 367), s(438, 385), s(420, 365), s(412, 393), s(426, 385), s(419, 379), s(427, 380), s(417, 366), 
]),
// Rook PST
Pst::new([
  s(592, 719), s(611, 711), s(571, 731), s(612, 718), s(614, 717), s(566, 723), s(575, 714), s(610, 709), 
  s(576, 722), s(583, 726), s(615, 720), s(641, 710), s(647, 695), s(655, 701), s(583, 718), s(597, 711), 
  s(530, 726), s(569, 722), s(574, 722), s(589, 717), s(589, 710), s(622, 696), s(629, 698), s(583, 700), 
  s(503, 728), s(547, 714), s(545, 728), s(568, 716), s(565, 710), s(571, 712), s(550, 705), s(543, 709), 
  s(487, 722), s(499, 723), s(519, 724), s(530, 720), s(552, 702), s(527, 704), s(552, 695), s(519, 700), 
  s(480, 709), s(506, 712), s(513, 706), s(515, 705), s(521, 708), s(528, 694), s(549, 686), s(505, 689), 
  s(476, 709), s(513, 699), s(516, 704), s(518, 710), s(526, 698), s(539, 694), s(546, 685), s(455, 707), 
  s(510, 697), s(517, 709), s(531, 712), s(540, 710), s(542, 703), s(526, 697), s(506, 708), s(510, 677), 
]),
// Queen PST
Pst::new([
  s(1105, 1222), s(1119, 1244), s(1143, 1252), s(1161, 1248), s(1217, 1225), s(1191, 1229), s(1187, 1210), s(1189, 1237), 
  s(1145, 1182), s(1115, 1235), s(1163, 1241), s(1160, 1251), s(1157, 1270), s(1217, 1232), s(1196, 1222), s(1209, 1206), 
  s(1145, 1189), s(1142, 1214), s(1166, 1221), s(1168, 1256), s(1212, 1248), s(1239, 1241), s(1226, 1213), s(1211, 1224), 
  s(1121, 1217), s(1127, 1238), s(1131, 1240), s(1141, 1267), s(1163, 1265), s(1179, 1258), s(1159, 1262), s(1154, 1249), 
  s(1133, 1193), s(1121, 1240), s(1130, 1237), s(1132, 1270), s(1140, 1256), s(1137, 1254), s(1159, 1233), s(1146, 1233), 
  s(1122, 1190), s(1148, 1172), s(1136, 1220), s(1138, 1214), s(1139, 1231), s(1148, 1214), s(1158, 1204), s(1148, 1199), 
  s(1114, 1160), s(1137, 1177), s(1159, 1154), s(1151, 1169), s(1153, 1181), s(1166, 1165), s(1152, 1138), s(1161, 1113), 
  s(1141, 1154), s(1115, 1171), s(1132, 1167), s(1156, 1125), s(1131, 1174), s(1106, 1162), s(1112, 1156), s(1109, 1123), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(173, 260), s(185, 256), s(145, 256), s(178, 232), s(155, 244), s(160, 226), s(119, 257), s(76, 276), 
  s(90, 153), s(127, 151), s(142, 138), s(141, 136), s(201, 112), s(213, 113), s(201, 146), s(136, 137), 
  s(75, 138), s(122, 131), s(114, 118), s(129, 98), s(144, 106), s(128, 112), s(142, 123), s(86, 122), 
  s(60, 129), s(101, 130), s(99, 114), s(125, 103), s(125, 106), s(111, 111), s(123, 118), s(75, 110), 
  s(61, 119), s(97, 124), s(99, 108), s(94, 120), s(111, 123), s(107, 116), s(147, 110), s(90, 101), 
  s(52, 130), s(100, 124), s(80, 126), s(71, 127), s(86, 140), s(130, 120), s(153, 114), s(79, 102), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-43, -108), s(65, -63), s(86, -50), s(7, -21), s(-72, -2), s(-64, 20), s(83, -3), s(37, -39), 
  s(74, -36), s(22, 21), s(-31, 23), s(80, 9), s(15, 29), s(-30, 61), s(13, 37), s(-4, 10), 
  s(-25, 9), s(22, 25), s(72, 20), s(1, 28), s(20, 37), s(94, 55), s(123, 47), s(16, 10), 
  s(4, -10), s(-34, 39), s(-26, 42), s(-78, 54), s(-106, 63), s(-68, 63), s(-40, 52), s(-91, 19), 
  s(-131, 3), s(-21, 7), s(-75, 44), s(-149, 66), s(-147, 71), s(-94, 55), s(-83, 34), s(-109, 8), 
  s(20, -25), s(-10, 4), s(-58, 31), s(-106, 48), s(-79, 47), s(-74, 40), s(-16, 16), s(-32, -4), 
  s(68, -45), s(38, -15), s(-10, 12), s(-72, 27), s(-64, 31), s(-23, 16), s(38, -9), s(48, -35), 
  s(52, -92), s(88, -62), s(53, -39), s(-82, -3), s(13, -42), s(-35, -11), s(65, -49), s(69, -86), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(73, 160), s(85, 156), s(45, 156), s(78, 132), s(55, 144), s(60, 126), s(19, 157), s(-23, 176), 
  s(58, 166), s(12, 170), s(17, 143), s(20, 107), s(-26, 121), s(-11, 136), s(-61, 147), s(-41, 167), 
  s(21, 83), s(-4, 73), s(13, 61), s(7, 58), s(-1, 48), s(38, 44), s(-46, 84), s(-21, 80), 
  s(-3, 39), s(-34, 36), s(-34, 28), s(-27, 28), s(-42, 30), s(-17, 24), s(-16, 39), s(11, 34), 
  s(-10, 2), s(-23, 7), s(-39, 12), s(-47, 12), s(-23, -3), s(17, -9), s(-8, 10), s(24, 1), 
  s(-17, -1), s(0, -2), s(0, -6), s(-34, 12), s(-17, -5), s(4, -7), s(24, -4), s(-14, 3), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(67, -228),
  s(32, -137),
  s(2, -58),
  s(6, -39),
  s(-1, -7),
  s(-7, -13),
  s(0, 0),
  s(0, 0),
]);

pub const TEMPO_BONUS: ScoreTuple = s(22, 24);
