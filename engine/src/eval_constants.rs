#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, piece_tables::{Pst, Prt}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(251, 289), s(359, 322), s(341, 383), s(391, 350), s(497, 335), s(307, 352), s(368, 305), s(319, 246), 
  s(348, 330), s(382, 358), s(473, 325), s(424, 352), s(448, 328), s(464, 320), s(433, 332), s(394, 300), 
  s(369, 327), s(453, 336), s(459, 367), s(473, 355), s(463, 350), s(554, 330), s(467, 322), s(432, 302), 
  s(432, 335), s(452, 358), s(450, 385), s(500, 377), s(468, 378), s(506, 365), s(457, 353), s(470, 315), 
  s(420, 345), s(445, 346), s(455, 381), s(469, 381), s(470, 378), s(465, 375), s(482, 351), s(435, 340), 
  s(415, 328), s(423, 357), s(444, 356), s(448, 371), s(464, 373), s(452, 346), s(458, 328), s(418, 335), 
  s(398, 298), s(400, 322), s(416, 336), s(439, 340), s(435, 342), s(439, 330), s(430, 306), s(417, 306), 
  s(310, 293), s(395, 294), s(384, 313), s(397, 329), s(408, 322), s(396, 320), s(395, 307), s(407, 263), 
]),
// Bishop PST
Pst::new([
  s(320, 340), s(309, 340), s(218, 353), s(176, 362), s(244, 347), s(226, 352), s(309, 338), s(311, 333), 
  s(323, 336), s(334, 343), s(314, 336), s(292, 328), s(330, 328), s(358, 328), s(312, 345), s(280, 326), 
  s(343, 328), s(377, 327), s(375, 333), s(367, 325), s(378, 319), s(408, 330), s(382, 330), s(383, 317), 
  s(339, 326), s(361, 333), s(358, 351), s(405, 347), s(372, 355), s(389, 337), s(356, 332), s(345, 328), 
  s(341, 316), s(354, 336), s(363, 344), s(379, 354), s(383, 340), s(351, 345), s(347, 326), s(338, 315), 
  s(348, 314), s(365, 326), s(367, 345), s(364, 340), s(365, 349), s(373, 331), s(354, 329), s(347, 309), 
  s(361, 292), s(367, 305), s(365, 309), s(352, 326), s(357, 323), s(371, 317), s(381, 302), s(350, 291), 
  s(329, 297), s(350, 311), s(334, 317), s(326, 317), s(345, 316), s(320, 327), s(339, 307), s(335, 290), 
]),
// Rook PST
Pst::new([
  s(666, 747), s(694, 737), s(638, 762), s(690, 745), s(673, 749), s(632, 754), s(690, 734), s(682, 739), 
  s(638, 751), s(642, 755), s(669, 750), s(692, 742), s(700, 727), s(685, 739), s(635, 751), s(646, 745), 
  s(614, 737), s(645, 736), s(642, 738), s(659, 732), s(659, 726), s(665, 723), s(706, 715), s(639, 720), 
  s(585, 739), s(630, 725), s(621, 741), s(639, 729), s(632, 727), s(623, 737), s(627, 724), s(603, 729), 
  s(579, 729), s(593, 730), s(609, 730), s(622, 726), s(644, 711), s(600, 724), s(629, 712), s(587, 718), 
  s(583, 709), s(601, 715), s(613, 707), s(620, 703), s(615, 713), s(619, 704), s(617, 706), s(585, 698), 
  s(568, 712), s(605, 701), s(610, 704), s(619, 707), s(624, 699), s(612, 704), s(613, 697), s(532, 715), 
  s(594, 703), s(605, 705), s(617, 703), s(622, 699), s(621, 697), s(600, 705), s(574, 713), s(584, 686), 
]),
// Queen PST
Pst::new([
  s(1184, 1193), s(1189, 1226), s(1178, 1252), s(1199, 1243), s(1295, 1196), s(1231, 1235), s(1295, 1170), s(1261, 1220), 
  s(1200, 1154), s(1169, 1208), s(1191, 1236), s(1177, 1263), s(1117, 1326), s(1225, 1230), s(1229, 1209), s(1289, 1159), 
  s(1219, 1140), s(1206, 1164), s(1226, 1163), s(1197, 1231), s(1248, 1212), s(1272, 1192), s(1275, 1152), s(1249, 1190), 
  s(1185, 1183), s(1208, 1172), s(1185, 1185), s(1189, 1220), s(1207, 1213), s(1225, 1198), s(1215, 1218), s(1220, 1190), 
  s(1217, 1129), s(1185, 1186), s(1210, 1173), s(1195, 1221), s(1211, 1190), s(1201, 1183), s(1226, 1172), s(1210, 1182), 
  s(1204, 1129), s(1225, 1115), s(1220, 1153), s(1220, 1149), s(1218, 1173), s(1222, 1146), s(1230, 1141), s(1220, 1150), 
  s(1209, 1100), s(1224, 1105), s(1233, 1102), s(1238, 1097), s(1239, 1110), s(1245, 1097), s(1227, 1075), s(1239, 1069), 
  s(1225, 1089), s(1214, 1090), s(1224, 1089), s(1231, 1084), s(1225, 1095), s(1190, 1101), s(1215, 1077), s(1204, 1058), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(155, 301), s(147, 298), s(135, 293), s(169, 265), s(133, 283), s(168, 259), s(87, 300), s(65, 317), 
  s(100, 167), s(103, 160), s(134, 157), s(135, 144), s(186, 136), s(202, 139), s(183, 160), s(142, 159), 
  s(85, 150), s(100, 137), s(106, 139), s(126, 117), s(126, 132), s(123, 133), s(108, 138), s(95, 138), 
  s(81, 129), s(77, 130), s(103, 125), s(127, 118), s(118, 123), s(117, 122), s(89, 121), s(90, 117), 
  s(88, 123), s(94, 122), s(107, 125), s(113, 133), s(120, 140), s(120, 133), s(131, 112), s(110, 112), 
  s(80, 131), s(93, 120), s(89, 139), s(103, 135), s(101, 155), s(135, 134), s(135, 112), s(97, 109), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-94, -105), s(82, -67), s(117, -49), s(-33, -12), s(-115, 12), s(-128, 36), s(66, 1), s(35, -48), 
  s(69, -27), s(10, 37), s(-62, 43), s(80, 18), s(0, 42), s(-59, 77), s(21, 46), s(-49, 24), 
  s(-45, 23), s(27, 39), s(96, 29), s(14, 36), s(76, 39), s(120, 62), s(163, 52), s(-3, 19), 
  s(24, -7), s(-1, 42), s(37, 39), s(-13, 50), s(-50, 59), s(-16, 55), s(-7, 49), s(-87, 18), 
  s(-125, 5), s(17, 5), s(1, 32), s(-57, 51), s(-67, 54), s(-19, 32), s(-45, 22), s(-90, -1), 
  s(29, -30), s(19, -2), s(10, 15), s(-14, 27), s(2, 25), s(15, 11), s(21, 0), s(-8, -18), 
  s(54, -49), s(48, -18), s(8, 5), s(-42, 21), s(-28, 21), s(-1, 9), s(38, -12), s(29, -37), 
  s(16, -92), s(53, -56), s(22, -29), s(-92, 0), s(-16, -26), s(-52, -1), s(24, -38), s(19, -77), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(55, 201), s(47, 198), s(35, 193), s(69, 165), s(33, 183), s(68, 159), s(-12, 200), s(-34, 217), 
  s(47, 210), s(27, 216), s(13, 179), s(16, 151), s(-31, 149), s(-5, 161), s(-63, 187), s(-63, 207), 
  s(27, 118), s(8, 109), s(16, 85), s(0, 81), s(0, 67), s(36, 68), s(-24, 113), s(-19, 109), 
  s(5, 68), s(-7, 63), s(-31, 48), s(-22, 45), s(-39, 47), s(-36, 49), s(1, 67), s(5, 60), 
  s(7, 24), s(-5, 33), s(-29, 25), s(-43, 31), s(-31, 15), s(10, 10), s(-22, 41), s(16, 24), 
  s(-3, 18), s(10, 24), s(-1, 10), s(-37, 25), s(-20, 12), s(-17, 14), s(-15, 30), s(-12, 25), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(54, -260),
  s(22, -149),
  s(0, -61),
  s(11, -37),
  s(-4, -1),
  s(-5, -11),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(43, -25),
  s(8, -24),
  s(-5, -26),
  s(-18, -15),
  s(-33, -18),
  s(-17, -18),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(79, 370),
  s(204, 137),
  s(48, 51),
  s(18, 15),
  s(-5, -7),
  s(6, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(29, 70);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(4, 49), s(6, 57), s(4, 60), s(10, 56), s(10, 60), s(12, 57), s(8, 55), s(18, 38), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(10, 14), s(18, 28), s(20, 37), s(22, 44), s(23, 49), s(24, 52), s(21, 50), s(14, 55), s(21, 45), s(27, 38), s(48, 31), s(-11, 65), s(40, 18), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(7, 45), s(10, 58), s(18, 60), s(16, 72), s(21, 85), s(21, 92), s(25, 92), s(33, 94), s(32, 99), s(31, 102), s(38, 104), s(41, 108), s(43, 103), s(30, 103), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(4, 346), s(7, 312), s(7, 331), s(14, 330), s(17, 341), s(19, 345), s(20, 365), s(22, 376), s(27, 377), s(29, 384), s(32, 397), s(31, 394), s(36, 396), s(39, 398), s(37, 410), s(40, 416), s(51, 398), s(60, 398), s(81, 387), s(60, 402), s(123, 364), s(70, 384), s(175, 330), s(189, 298), s(291, 251), s(210, 309), s(179, 291), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(19, 23), s(31, 34), s(40, 38), s(51, 41), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(6, 11), s(14, 15), s(21, 20), s(26, 22), s(26, 23), s(30, 21), s(33, 32), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 2), s(7, 12), s(14, 15), s(22, 19), s(18, 29), s(31, 28), s(35, 36), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(4, 7), s(4, 17), s(8, 8), s(6, 25), s(5, 36), s(3, 34), s(2, 43), s(-1, 52), s(-6, 67), s(3, 61), s(-30, 96), s(-18, 91), s(-43, 151), s(4, 95), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-9, -23), s(-8, -1), s(0, 14), s(2, 10), s(7, 10), s(11, 5), s(6, 21), s(14, 8), s(18, 7), s(20, 7), s(28, 1), s(32, 0), s(28, 0), s(34, -4), s(45, -6), s(42, -8), s(42, -7), s(47, -11), s(48, -14), s(41, -14), s(72, -21), s(56, -17), s(37, -19), s(20, -17), s(14, -14), s(-61, -11), s(32, -16), s(-82, -4), 
],
// Bishop attack values
[
  s(2, 14), s(-3, 14), s(-1, 18), s(3, 14), s(6, 18), s(14, 6), s(15, 3), s(16, 9), s(28, -2), s(22, 0), s(35, -6), s(29, -4), s(37, -4), s(37, -7), s(39, -4), s(31, -7), s(34, -7), s(37, -10), s(40, -8), s(39, -10), s(21, -6), s(22, -7), s(-9, -1), s(-17, -2), s(-37, 0), s(-29, -6), s(19, -21), s(-44, -3), 
],
// Rook attack values
[
  s(16, 4), s(2, -3), s(14, -10), s(21, -22), s(20, -16), s(25, -19), s(24, -12), s(17, -9), s(31, -16), s(33, -16), s(38, -18), s(35, -17), s(33, -15), s(32, -13), s(41, -15), s(37, -12), s(39, -12), s(52, -16), s(46, -13), s(43, -12), s(30, -8), s(32, -8), s(40, -11), s(38, -8), s(29, -3), s(64, -14), s(14, 0), s(35, -7), 
],
// Queen attack values
[
  s(-2, -13), s(0, -11), s(5, -20), s(10, -23), s(14, -16), s(13, -7), s(15, -10), s(16, 1), s(24, -12), s(29, -5), s(25, -1), s(32, -2), s(41, -8), s(39, -5), s(46, -11), s(65, -20), s(66, -20), s(84, -33), s(84, -31), s(94, -37), s(121, -51), s(120, -52), s(112, -40), s(143, -61), s(159, -62), s(198, -88), s(143, -50), s(93, -47), 
],
// Pawn attack values
[
  s(7, 11), s(7, -3), s(8, -10), s(8, -7), s(8, -8), s(6, -8), s(9, -8), s(10, -8), s(7, -8), s(10, -9), s(12, -11), s(12, -11), s(20, -14), s(20, -13), s(17, -13), s(23, -14), s(29, -17), s(28, -16), s(23, -16), s(27, -17), s(37, -20), s(64, -24), s(48, -20), s(31, -19), s(32, -17), s(47, -14), s(50, -9), s(15, -5), 
],
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(95, 32);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(91, 61);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(150, -7);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(101, 2);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(42, 39);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(88, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(63, -28);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 37);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(76, 30);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(83, 49);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(114, 1);

pub const TEMPO_BONUS: ScoreTuple = s(41, 29);

pub const BISHOP_COLOR_BONUS: [ScoreTuple; 9] = [
  s(109, 82), s(109, 72), s(107, 59), s(101, 51), s(99, 40), s(100, 25), s(95, 27), s(94, 9), s(94, -43), 
];

