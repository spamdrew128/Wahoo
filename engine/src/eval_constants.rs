#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i16, eg: i16) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(207, 287), s(303, 318), s(309, 369), s(373, 332), s(480, 322), s(284, 341), s(329, 305), s(279, 241), 
  s(324, 341), s(361, 362), s(483, 335), s(450, 365), s(435, 355), s(493, 332), s(411, 340), s(396, 311), 
  s(340, 348), s(463, 349), s(459, 378), s(491, 373), s(516, 357), s(544, 354), s(482, 343), s(431, 324), 
  s(389, 353), s(410, 378), s(427, 397), s(470, 395), s(440, 401), s(490, 383), s(419, 380), s(430, 341), 
  s(371, 360), s(393, 366), s(414, 396), s(413, 399), s(428, 395), s(415, 394), s(432, 369), s(384, 348), 
  s(359, 337), s(378, 369), s(406, 365), s(402, 386), s(420, 384), s(410, 362), s(418, 346), s(365, 343), 
  s(346, 314), s(344, 344), s(375, 351), s(386, 360), s(386, 364), s(408, 344), s(386, 325), s(376, 317), 
  s(249, 314), s(360, 288), s(331, 339), s(349, 347), s(358, 342), s(366, 337), s(364, 308), s(354, 284), 
]),
// Bishop PST
Pst::new([
  s(412, 378), s(406, 376), s(325, 397), s(303, 402), s(360, 387), s(347, 388), s(403, 379), s(389, 372), 
  s(411, 380), s(453, 389), s(409, 393), s(404, 387), s(483, 381), s(469, 382), s(471, 384), s(382, 377), 
  s(407, 391), s(469, 384), s(477, 391), s(484, 386), s(490, 384), s(513, 389), s(479, 391), s(457, 384), 
  s(419, 387), s(433, 403), s(459, 409), s(493, 405), s(476, 412), s(485, 398), s(440, 397), s(419, 397), 
  s(416, 386), s(438, 399), s(441, 408), s(463, 413), s(466, 403), s(442, 402), s(436, 391), s(416, 383), 
  s(432, 374), s(446, 388), s(442, 402), s(446, 400), s(446, 406), s(450, 395), s(440, 386), s(435, 375), 
  s(441, 357), s(443, 364), s(449, 373), s(427, 386), s(434, 390), s(452, 377), s(464, 365), s(431, 354), 
  s(393, 356), s(425, 374), s(410, 356), s(398, 383), s(412, 376), s(409, 369), s(414, 372), s(403, 358), 
]),
// Rook PST
Pst::new([
  s(577, 703), s(595, 697), s(555, 718), s(598, 705), s(603, 703), s(554, 708), s(571, 697), s(605, 691), 
  s(560, 704), s(564, 709), s(598, 703), s(623, 696), s(632, 681), s(635, 685), s(568, 701), s(581, 694), 
  s(514, 707), s(555, 704), s(558, 705), s(574, 701), s(570, 693), s(607, 678), s(611, 681), s(568, 681), 
  s(489, 708), s(535, 694), s(531, 710), s(551, 699), s(550, 693), s(556, 693), s(539, 686), s(531, 689), 
  s(473, 703), s(485, 705), s(504, 708), s(514, 704), s(537, 686), s(512, 688), s(539, 679), s(508, 681), 
  s(469, 692), s(493, 695), s(500, 690), s(502, 690), s(507, 692), s(516, 677), s(539, 670), s(495, 671), 
  s(465, 691), s(499, 684), s(504, 687), s(505, 694), s(512, 682), s(526, 677), s(534, 670), s(446, 689), 
  s(501, 682), s(505, 693), s(519, 697), s(528, 696), s(530, 689), s(516, 683), s(495, 693), s(502, 662), 
]),
// Queen PST
Pst::new([
  s(1076, 1201), s(1098, 1218), s(1121, 1225), s(1139, 1222), s(1193, 1201), s(1167, 1203), s(1165, 1187), s(1166, 1212), 
  s(1116, 1155), s(1081, 1211), s(1133, 1216), s(1133, 1225), s(1130, 1242), s(1188, 1204), s(1159, 1198), s(1180, 1180), 
  s(1121, 1157), s(1117, 1181), s(1135, 1195), s(1142, 1229), s(1186, 1221), s(1212, 1213), s(1201, 1181), s(1187, 1198), 
  s(1095, 1188), s(1103, 1208), s(1108, 1209), s(1114, 1240), s(1134, 1239), s(1155, 1231), s(1135, 1236), s(1132, 1220), 
  s(1112, 1165), s(1097, 1210), s(1106, 1211), s(1107, 1243), s(1115, 1230), s(1114, 1227), s(1137, 1206), s(1122, 1210), 
  s(1099, 1165), s(1124, 1147), s(1113, 1194), s(1117, 1187), s(1115, 1206), s(1126, 1189), s(1134, 1179), s(1125, 1175), 
  s(1091, 1138), s(1113, 1153), s(1137, 1129), s(1130, 1143), s(1131, 1156), s(1143, 1137), s(1128, 1114), s(1138, 1090), 
  s(1117, 1131), s(1092, 1147), s(1109, 1141), s(1135, 1103), s(1109, 1150), s(1082, 1138), s(1089, 1132), s(1084, 1100), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(168, 251), s(177, 247), s(142, 245), s(174, 222), s(149, 235), s(157, 216), s(111, 248), s(73, 266), 
  s(84, 153), s(121, 151), s(134, 136), s(136, 133), s(195, 106), s(207, 111), s(193, 145), s(128, 136), 
  s(71, 136), s(115, 129), s(110, 115), s(123, 95), s(137, 106), s(122, 111), s(135, 122), s(82, 120), 
  s(57, 127), s(97, 127), s(94, 112), s(121, 102), s(120, 105), s(106, 109), s(118, 115), s(71, 108), 
  s(58, 117), s(92, 122), s(94, 106), s(90, 118), s(106, 121), s(102, 115), s(142, 108), s(86, 99), 
  s(50, 128), s(96, 122), s(77, 124), s(69, 124), s(83, 137), s(126, 119), s(149, 111), s(76, 100), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-41, -108), s(59, -64), s(78, -46), s(3, -21), s(-68, -3), s(-66, 24), s(79, 0), s(38, -33), 
  s(69, -39), s(17, 20), s(-29, 21), s(77, 9), s(13, 27), s(-21, 55), s(17, 33), s(3, 10), 
  s(-22, 5), s(30, 20), s(76, 17), s(0, 27), s(8, 37), s(95, 50), s(123, 43), s(17, 9), 
  s(5, -12), s(-29, 34), s(-21, 40), s(-81, 54), s(-99, 59), s(-63, 59), s(-31, 46), s(-82, 17), 
  s(-135, 3), s(-19, 4), s(-76, 43), s(-152, 65), s(-151, 69), s(-96, 52), s(-81, 31), s(-109, 8), 
  s(22, -26), s(-15, 3), s(-63, 31), s(-109, 47), s(-81, 47), s(-76, 39), s(-19, 16), s(-34, -2), 
  s(69, -46), s(38, -16), s(-12, 11), s(-69, 25), s(-62, 30), s(-24, 16), s(36, -8), s(47, -32), 
  s(51, -90), s(87, -60), s(55, -38), s(-82, -3), s(15, -41), s(-36, -10), s(65, -46), s(66, -82), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(68, 151), s(77, 147), s(42, 145), s(74, 122), s(49, 135), s(57, 116), s(11, 148), s(-26, 166), 
  s(60, 164), s(11, 168), s(17, 142), s(17, 110), s(-25, 125), s(-11, 136), s(-60, 145), s(-40, 166), 
  s(20, 84), s(-3, 74), s(11, 63), s(5, 59), s(-1, 47), s(38, 44), s(-45, 84), s(-19, 80), 
  s(-2, 40), s(-34, 38), s(-34, 29), s(-28, 28), s(-42, 29), s(-18, 25), s(-16, 40), s(10, 35), 
  s(-10, 4), s(-23, 10), s(-38, 12), s(-49, 14), s(-21, -3), s(17, -8), s(-6, 11), s(26, 1), 
  s(-18, 0), s(1, 0), s(0, -4), s(-36, 14), s(-17, -3), s(4, -6), s(26, -2), s(-13, 4), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(66, -203),
  s(32, -133),
  s(1, -55),
  s(5, -36),
  s(-1, -6),
  s(-3, -15),
  s(0, 0),
  s(0, 0),
]);
