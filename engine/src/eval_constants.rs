#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(207, 271), s(331, 286), s(301, 343), s(352, 306), s(457, 294), s(266, 317), s(332, 273), s(268, 228), 
  s(333, 318), s(359, 339), s(488, 304), s(424, 336), s(424, 320), s(479, 299), s(410, 315), s(388, 289), 
  s(353, 320), s(462, 322), s(447, 360), s(468, 345), s(467, 335), s(517, 330), s(448, 314), s(402, 300), 
  s(411, 329), s(420, 352), s(427, 377), s(473, 369), s(434, 370), s(479, 356), s(420, 346), s(438, 311), 
  s(397, 337), s(412, 336), s(423, 373), s(426, 374), s(434, 368), s(426, 366), s(447, 338), s(407, 331), 
  s(383, 318), s(396, 344), s(415, 344), s(418, 360), s(435, 359), s(424, 332), s(425, 313), s(392, 326), 
  s(381, 295), s(381, 319), s(400, 329), s(422, 335), s(420, 338), s(421, 322), s(408, 302), s(402, 303), 
  s(298, 303), s(399, 299), s(381, 317), s(394, 332), s(406, 325), s(393, 324), s(400, 313), s(392, 271), 
]),
// Bishop PST
Pst::new([
  s(389, 365), s(369, 358), s(289, 375), s(235, 381), s(307, 367), s(287, 372), s(384, 361), s(363, 355), 
  s(384, 369), s(426, 367), s(377, 367), s(370, 361), s(424, 354), s(423, 361), s(406, 365), s(346, 362), 
  s(388, 373), s(448, 361), s(457, 365), s(444, 358), s(444, 356), s(466, 364), s(425, 368), s(418, 363), 
  s(407, 364), s(429, 372), s(427, 384), s(474, 378), s(444, 381), s(452, 372), s(428, 361), s(399, 372), 
  s(418, 359), s(421, 371), s(425, 378), s(448, 386), s(448, 374), s(421, 373), s(411, 365), s(416, 356), 
  s(424, 354), s(442, 363), s(435, 377), s(438, 373), s(437, 381), s(445, 369), s(431, 366), s(425, 358), 
  s(443, 339), s(443, 345), s(445, 349), s(428, 363), s(438, 362), s(448, 357), s(462, 347), s(433, 339), 
  s(411, 344), s(443, 357), s(425, 362), s(413, 364), s(434, 359), s(416, 372), s(425, 357), s(413, 346), 
]),
// Rook PST
Pst::new([
  s(610, 716), s(635, 708), s(570, 734), s(619, 719), s(606, 723), s(560, 731), s(648, 704), s(632, 708), 
  s(589, 720), s(586, 726), s(621, 719), s(640, 713), s(656, 697), s(631, 710), s(585, 722), s(603, 714), 
  s(563, 719), s(602, 716), s(594, 719), s(617, 713), s(602, 708), s(615, 703), s(645, 699), s(584, 704), 
  s(541, 722), s(589, 707), s(581, 723), s(590, 713), s(581, 712), s(570, 719), s(574, 708), s(554, 714), 
  s(534, 718), s(551, 717), s(562, 719), s(572, 714), s(591, 699), s(551, 710), s(580, 701), s(544, 705), 
  s(541, 704), s(563, 705), s(571, 699), s(576, 697), s(574, 703), s(578, 693), s(586, 693), s(547, 690), 
  s(540, 702), s(569, 694), s(578, 695), s(585, 701), s(590, 691), s(578, 692), s(581, 687), s(509, 703), 
  s(574, 694), s(583, 696), s(597, 696), s(603, 694), s(600, 691), s(582, 693), s(554, 702), s(566, 677), 
]),
// Queen PST
Pst::new([
  s(1149, 1184), s(1149, 1212), s(1125, 1241), s(1151, 1230), s(1264, 1172), s(1190, 1214), s(1265, 1156), s(1242, 1197), 
  s(1176, 1155), s(1136, 1199), s(1170, 1218), s(1155, 1247), s(1099, 1303), s(1202, 1207), s(1192, 1202), s(1261, 1167), 
  s(1193, 1152), s(1182, 1171), s(1196, 1173), s(1172, 1240), s(1217, 1218), s(1246, 1197), s(1234, 1166), s(1221, 1202), 
  s(1160, 1200), s(1180, 1192), s(1162, 1198), s(1160, 1236), s(1174, 1231), s(1194, 1215), s(1187, 1236), s(1193, 1209), 
  s(1199, 1150), s(1160, 1207), s(1187, 1187), s(1173, 1233), s(1182, 1209), s(1182, 1194), s(1200, 1195), s(1189, 1207), 
  s(1182, 1164), s(1209, 1134), s(1202, 1171), s(1204, 1163), s(1199, 1192), s(1205, 1165), s(1211, 1166), s(1200, 1184), 
  s(1189, 1136), s(1205, 1138), s(1222, 1124), s(1227, 1119), s(1228, 1133), s(1230, 1117), s(1210, 1101), s(1224, 1100), 
  s(1214, 1125), s(1206, 1122), s(1218, 1122), s(1229, 1118), s(1221, 1129), s(1184, 1129), s(1202, 1113), s(1188, 1095), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(160, 285), s(171, 278), s(139, 277), s(172, 251), s(140, 267), s(163, 245), s(105, 281), s(67, 301), 
  s(89, 164), s(101, 154), s(123, 152), s(129, 137), s(181, 124), s(196, 133), s(166, 158), s(131, 155), 
  s(75, 145), s(91, 133), s(99, 133), s(122, 108), s(121, 127), s(115, 128), s(101, 132), s(84, 134), 
  s(66, 126), s(72, 124), s(91, 122), s(117, 115), s(106, 120), s(106, 118), s(83, 115), s(76, 114), 
  s(78, 119), s(85, 119), s(99, 122), s(106, 129), s(111, 137), s(110, 130), s(121, 108), s(98, 108), 
  s(68, 128), s(84, 119), s(81, 136), s(97, 131), s(92, 150), s(125, 130), s(123, 109), s(88, 104), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-117, -104), s(48, -65), s(88, -42), s(-42, -13), s(-128, 13), s(-147, 42), s(54, 2), s(36, -42), 
  s(57, -31), s(-1, 35), s(-63, 40), s(73, 17), s(-9, 40), s(-52, 70), s(13, 41), s(-57, 26), 
  s(-54, 19), s(33, 32), s(95, 25), s(13, 34), s(52, 40), s(122, 57), s(160, 46), s(-14, 18), 
  s(28, -11), s(1, 37), s(48, 36), s(-15, 50), s(-32, 53), s(-8, 50), s(-6, 44), s(-82, 14), 
  s(-132, 4), s(11, 3), s(-2, 32), s(-64, 51), s(-73, 54), s(-24, 32), s(-47, 19), s(-95, 0), 
  s(29, -31), s(5, -1), s(0, 16), s(-18, 28), s(1, 26), s(9, 11), s(14, 0), s(-14, -17), 
  s(50, -50), s(43, -19), s(2, 6), s(-39, 20), s(-27, 21), s(-4, 9), s(33, -11), s(24, -34), 
  s(7, -89), s(52, -55), s(29, -29), s(-87, 2), s(-9, -24), s(-47, 0), s(26, -36), s(11, -72), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(60, 185), s(71, 178), s(39, 177), s(72, 151), s(40, 167), s(63, 145), s(5, 181), s(-32, 201), 
  s(55, 209), s(24, 217), s(21, 178), s(14, 154), s(-29, 156), s(2, 163), s(-58, 182), s(-57, 206), 
  s(31, 119), s(13, 109), s(18, 86), s(0, 85), s(1, 65), s(43, 67), s(-21, 114), s(-10, 108), 
  s(12, 69), s(-5, 64), s(-26, 48), s(-19, 43), s(-35, 45), s(-31, 50), s(0, 70), s(16, 60), 
  s(11, 26), s(0, 34), s(-27, 25), s(-44, 34), s(-31, 15), s(13, 10), s(-20, 42), s(23, 24), 
  s(-4, 19), s(13, 25), s(-1, 12), s(-42, 28), s(-20, 15), s(-14, 14), s(-8, 31), s(-9, 26), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(44, -226),
  s(19, -143),
  s(-2, -57),
  s(6, -33),
  s(-7, 0),
  s(-9, -9),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_RST: Rst = Rst::new([
  s(0, 0),
  s(28, -19),
  s(7, -23),
  s(-5, -25),
  s(-18, -14),
  s(-34, -18),
  s(-16, -18),
  s(0, 0),
]);

pub const PHALANX_PAWNS_RST: Rst = Rst::new([
  s(0, 0),
  s(-50, 311),
  s(106, 67),
  s(26, 27),
  s(10, 9),
  s(-3, -3),
  s(5, -4),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(30, 74);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(18, 56), s(29, 75), s(34, 84), s(45, 86), s(50, 94), s(57, 91), s(58, 90), s(69, 73), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(15, 25), s(28, 44), s(37, 60), s(44, 72), s(48, 81), s(51, 88), s(52, 89), s(47, 96), s(55, 90), s(66, 85), s(88, 82), s(22, 123), s(83, 75), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(12, 40), s(18, 54), s(27, 59), s(26, 71), s(36, 82), s(40, 89), s(47, 91), s(60, 94), s(63, 101), s(67, 106), s(77, 110), s(80, 117), s(85, 114), s(75, 115), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(5, 240), s(8, 234), s(8, 253), s(15, 259), s(18, 276), s(18, 288), s(18, 314), s(19, 326), s(23, 330), s(23, 344), s(25, 357), s(23, 362), s(27, 363), s(27, 373), s(24, 387), s(25, 397), s(35, 383), s(44, 388), s(56, 381), s(30, 405), s(99, 364), s(36, 399), s(133, 353), s(150, 322), s(263, 267), s(221, 325), s(185, 300), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-9, -8), s(-4, 3), s(3, 19), s(5, 12), s(9, 13), s(14, 8), s(9, 24), s(16, 11), s(21, 9), s(23, 9), s(32, 3), s(35, 3), s(30, 2), s(38, -2), s(48, -4), s(45, -5), s(42, -4), s(53, -9), s(46, -11), s(44, -12), s(76, -19), s(59, -14), s(43, -17), s(22, -15), s(15, -12), s(-57, -9), s(28, -11), s(-98, 0), 
],
// Bishop attack values
[
  s(5, 16), s(-1, 12), s(2, 17), s(7, 11), s(10, 17), s(17, 5), s(17, 2), s(19, 8), s(31, -2), s(25, 0), s(38, -7), s(32, -4), s(40, -5), s(39, -7), s(43, -5), s(35, -8), s(37, -7), s(40, -9), s(43, -8), s(44, -9), s(26, -6), s(29, -7), s(0, -2), s(-14, 0), s(-34, 1), s(-28, -5), s(25, -21), s(-37, -3), 
],
// Rook attack values
[
  s(17, 8), s(4, 0), s(16, -10), s(23, -22), s(22, -16), s(26, -18), s(25, -9), s(19, -8), s(32, -14), s(33, -15), s(40, -16), s(36, -15), s(34, -13), s(32, -11), s(43, -14), s(38, -11), s(40, -11), s(54, -15), s(46, -12), s(45, -11), s(31, -7), s(35, -7), s(43, -10), s(39, -7), s(31, -2), s(63, -12), s(9, 2), s(43, -6), 
],
// Queen attack values
[
  s(0, -11), s(0, -5), s(5, -16), s(11, -21), s(15, -15), s(13, -6), s(14, -7), s(17, 1), s(24, -10), s(29, -3), s(24, 0), s(33, -1), s(42, -6), s(37, -2), s(48, -9), s(66, -19), s(67, -19), s(82, -31), s(90, -32), s(96, -36), s(121, -49), s(129, -54), s(126, -44), s(151, -63), s(169, -65), s(211, -93), s(139, -45), s(83, -39), 
],
// Pawn attack values
[
  s(7, 21), s(8, -2), s(8, -10), s(9, -7), s(9, -8), s(7, -9), s(10, -9), s(10, -8), s(8, -8), s(10, -8), s(13, -11), s(12, -11), s(20, -13), s(20, -12), s(18, -13), s(23, -14), s(30, -16), s(30, -16), s(24, -16), s(28, -17), s(41, -19), s(65, -24), s(47, -19), s(31, -19), s(32, -16), s(51, -14), s(57, -11), s(28, -6), 
],
];
