#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{evaluation::ScoreTuple, board_representation::NUM_PIECES, pst::{Pst, Rst}};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(216, 327), s(339, 358), s(346, 413), s(413, 374), s(542, 360), s(307, 388), s(372, 344), s(295, 276), 
  s(360, 385), s(396, 408), s(526, 379), s(495, 410), s(479, 401), s(541, 376), s(452, 385), s(437, 354), 
  s(380, 391), s(507, 393), s(501, 426), s(535, 421), s(562, 404), s(599, 398), s(527, 388), s(476, 367), 
  s(429, 398), s(450, 427), s(467, 447), s(512, 445), s(480, 451), s(534, 432), s(459, 430), s(472, 388), 
  s(410, 405), s(434, 412), s(454, 445), s(453, 449), s(468, 445), s(454, 445), s(474, 417), s(422, 395), 
  s(397, 382), s(418, 416), s(445, 413), s(443, 434), s(461, 434), s(450, 411), s(458, 392), s(403, 388), 
  s(385, 355), s(384, 388), s(414, 398), s(425, 407), s(426, 411), s(449, 390), s(428, 368), s(414, 362), 
  s(285, 357), s(398, 330), s(370, 383), s(388, 392), s(397, 387), s(405, 383), s(402, 351), s(396, 320), 
]),
// Bishop PST
Pst::new([
  s(443, 427), s(447, 424), s(360, 444), s(338, 450), s(398, 435), s(381, 437), s(453, 424), s(422, 421), 
  s(451, 428), s(493, 438), s(448, 442), s(444, 434), s(527, 429), s(513, 430), s(512, 433), s(420, 425), 
  s(446, 441), s(513, 432), s(521, 440), s(528, 435), s(536, 432), s(563, 438), s(524, 441), s(499, 434), 
  s(460, 435), s(475, 452), s(501, 459), s(537, 456), s(519, 463), s(529, 448), s(482, 446), s(459, 446), 
  s(458, 435), s(479, 449), s(482, 458), s(505, 464), s(508, 453), s(484, 453), s(478, 441), s(458, 431), 
  s(474, 422), s(488, 437), s(484, 452), s(488, 450), s(488, 456), s(492, 446), s(483, 436), s(477, 423), 
  s(483, 404), s(485, 412), s(492, 422), s(468, 436), s(475, 440), s(495, 426), s(507, 414), s(474, 401), 
  s(435, 401), s(468, 422), s(451, 403), s(440, 431), s(455, 425), s(450, 417), s(457, 420), s(445, 404), 
]),
// Rook PST
Pst::new([
  s(648, 787), s(672, 780), s(627, 803), s(677, 788), s(679, 787), s(630, 791), s(662, 776), s(690, 772), 
  s(622, 790), s(625, 795), s(665, 788), s(692, 781), s(706, 764), s(705, 768), s(632, 786), s(651, 777), 
  s(575, 792), s(617, 789), s(621, 790), s(637, 786), s(633, 778), s(679, 759), s(681, 763), s(634, 764), 
  s(548, 792), s(596, 778), s(592, 796), s(612, 784), s(610, 778), s(619, 777), s(603, 769), s(590, 773), 
  s(530, 788), s(545, 790), s(564, 793), s(575, 789), s(598, 770), s(572, 773), s(600, 764), s(565, 766), 
  s(526, 777), s(552, 780), s(558, 775), s(561, 775), s(566, 779), s(576, 762), s(599, 756), s(552, 756), 
  s(523, 776), s(558, 769), s(563, 772), s(564, 780), s(571, 768), s(585, 764), s(594, 755), s(501, 775), 
  s(558, 767), s(563, 779), s(577, 783), s(587, 783), s(588, 776), s(574, 769), s(553, 780), s(559, 745), 
]),
// Queen PST
Pst::new([
  s(1224, 1424), s(1251, 1443), s(1253, 1474), s(1286, 1458), s(1403, 1391), s(1361, 1412), s(1363, 1387), s(1328, 1437), 
  s(1272, 1374), s(1232, 1438), s(1282, 1453), s(1265, 1481), s(1236, 1534), s(1356, 1427), s(1313, 1436), s(1349, 1396), 
  s(1278, 1375), s(1272, 1404), s(1289, 1421), s(1284, 1481), s(1341, 1462), s(1389, 1435), s(1376, 1395), s(1348, 1425), 
  s(1250, 1412), s(1257, 1435), s(1260, 1438), s(1262, 1482), s(1279, 1489), s(1301, 1481), s(1280, 1492), s(1285, 1458), 
  s(1268, 1383), s(1249, 1442), s(1261, 1435), s(1258, 1483), s(1266, 1464), s(1266, 1462), s(1290, 1442), s(1276, 1442), 
  s(1255, 1389), s(1280, 1365), s(1268, 1418), s(1273, 1409), s(1270, 1432), s(1281, 1413), s(1290, 1403), s(1280, 1404), 
  s(1247, 1357), s(1270, 1372), s(1293, 1347), s(1286, 1363), s(1287, 1376), s(1300, 1359), s(1285, 1334), s(1294, 1322), 
  s(1276, 1350), s(1248, 1368), s(1265, 1363), s(1291, 1323), s(1265, 1371), s(1237, 1366), s(1249, 1356), s(1250, 1319), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(169, 272), s(182, 268), s(144, 265), s(180, 240), s(149, 255), s(161, 234), s(106, 270), s(66, 290), 
  s(91, 165), s(132, 160), s(142, 145), s(149, 136), s(210, 111), s(220, 120), s(205, 156), s(137, 146), 
  s(76, 148), s(122, 142), s(116, 126), s(130, 104), s(145, 116), s(130, 121), s(144, 133), s(87, 131), 
  s(62, 139), s(104, 139), s(101, 122), s(128, 113), s(129, 115), s(114, 119), s(127, 126), s(77, 118), 
  s(63, 128), s(99, 134), s(101, 117), s(96, 128), s(114, 132), s(109, 125), s(152, 118), s(92, 108), 
  s(55, 139), s(103, 133), s(84, 135), s(76, 134), s(90, 147), s(135, 129), s(159, 122), s(82, 108), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-33, -124), s(114, -84), s(145, -62), s(19, -28), s(-114, 1), s(-113, 33), s(127, -14), s(63, -45), 
  s(121, -52), s(28, 19), s(-28, 20), s(90, 6), s(17, 27), s(-28, 58), s(8, 34), s(0, 9), 
  s(-20, 2), s(38, 20), s(89, 15), s(0, 29), s(11, 38), s(104, 52), s(137, 42), s(6, 10), 
  s(6, -15), s(-42, 37), s(-22, 42), s(-85, 56), s(-109, 63), s(-71, 62), s(-43, 50), s(-99, 18), 
  s(-158, 4), s(-24, 4), s(-85, 46), s(-164, 69), s(-168, 75), s(-111, 56), s(-95, 34), s(-126, 9), 
  s(19, -29), s(-22, 4), s(-72, 33), s(-122, 51), s(-92, 50), s(-87, 42), s(-27, 17), s(-45, -2), 
  s(67, -50), s(35, -17), s(-19, 13), s(-78, 27), s(-71, 32), s(-33, 18), s(31, -8), s(43, -34), 
  s(49, -98), s(85, -64), s(51, -40), s(-92, -3), s(10, -43), s(-43, -10), s(61, -48), s(64, -88), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(69, 172), s(82, 168), s(44, 165), s(80, 140), s(49, 155), s(61, 134), s(6, 170), s(-33, 190), 
  s(59, 180), s(2, 189), s(18, 160), s(13, 130), s(-31, 143), s(-11, 150), s(-70, 162), s(-49, 185), 
  s(21, 91), s(-3, 79), s(13, 68), s(7, 64), s(0, 51), s(43, 47), s(-47, 91), s(-21, 87), 
  s(-3, 42), s(-36, 40), s(-36, 32), s(-29, 30), s(-44, 32), s(-17, 27), s(-20, 44), s(11, 38), 
  s(-10, 3), s(-24, 9), s(-40, 13), s(-51, 15), s(-20, -3), s(19, -9), s(-4, 11), s(27, 1), 
  s(-20, 0), s(2, 0), s(0, -4), s(-39, 16), s(-17, -2), s(9, -7), s(32, -5), s(-14, 5), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_RST: Rst = Rst::new([
  s(87, -228),
  s(36, -144),
  s(0, -58),
  s(5, -37),
  s(-2, -6),
  s(-2, -15),
  s(0, 0),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(0, 0);
