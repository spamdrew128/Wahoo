#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(169, 289), s(206, 337), s(268, 365), s(321, 341), s(329, 359), s(227, 335), s(198, 339), s(226, 249), 
  s(288, 321), s(321, 336), s(347, 324), s(333, 338), s(355, 321), s(352, 321), s(307, 330), s(311, 293), 
  s(308, 320), s(352, 327), s(374, 349), s(370, 349), s(354, 350), s(395, 331), s(344, 319), s(331, 297), 
  s(339, 325), s(352, 344), s(367, 365), s(400, 365), s(374, 365), s(390, 359), s(351, 344), s(363, 311), 
  s(334, 331), s(348, 338), s(361, 366), s(375, 365), s(372, 368), s(370, 357), s(367, 339), s(341, 334), 
  s(323, 311), s(335, 333), s(351, 340), s(352, 355), s(367, 355), s(357, 331), s(352, 326), s(329, 325), 
  s(305, 292), s(314, 311), s(324, 323), s(344, 322), s(345, 323), s(339, 322), s(326, 303), s(325, 309), 
  s(269, 280), s(303, 311), s(304, 300), s(314, 309), s(320, 307), s(322, 295), s(301, 322), s(308, 283), 
]),
// Bishop PST
Pst::new([
  s(338, 384), s(314, 378), s(266, 384), s(240, 390), s(261, 387), s(257, 384), s(316, 385), s(326, 364), 
  s(345, 352), s(356, 364), s(357, 356), s(313, 362), s(330, 357), s(350, 366), s(321, 371), s(312, 356), 
  s(361, 366), s(386, 354), s(376, 362), s(377, 351), s(361, 356), s(383, 369), s(358, 368), s(369, 357), 
  s(353, 356), s(374, 361), s(379, 363), s(410, 373), s(386, 373), s(391, 368), s(363, 362), s(358, 356), 
  s(361, 346), s(371, 359), s(377, 370), s(396, 371), s(392, 369), s(369, 368), s(355, 361), s(367, 337), 
  s(365, 345), s(387, 356), s(390, 361), s(381, 365), s(380, 371), s(382, 363), s(379, 353), s(374, 339), 
  s(384, 343), s(384, 332), s(390, 338), s(372, 349), s(375, 351), s(387, 347), s(393, 344), s(379, 328), 
  s(356, 333), s(386, 353), s(359, 349), s(354, 344), s(361, 344), s(353, 357), s(370, 337), s(375, 324), 
]),
// Rook PST
Pst::new([
  s(564, 642), s(585, 635), s(554, 653), s(574, 640), s(592, 632), s(551, 643), s(554, 645), s(593, 627), 
  s(541, 639), s(544, 643), s(555, 648), s(569, 636), s(558, 632), s(562, 636), s(557, 630), s(560, 629), 
  s(525, 631), s(545, 632), s(541, 630), s(544, 630), s(562, 623), s(546, 622), s(597, 615), s(546, 615), 
  s(502, 635), s(530, 623), s(523, 639), s(528, 630), s(537, 619), s(521, 624), s(525, 621), s(503, 623), 
  s(493, 619), s(501, 622), s(510, 624), s(524, 617), s(527, 616), s(489, 626), s(519, 616), s(490, 616), 
  s(494, 608), s(502, 612), s(513, 601), s(515, 605), s(519, 604), s(514, 602), s(531, 590), s(501, 591), 
  s(483, 602), s(503, 602), s(514, 603), s(518, 600), s(522, 592), s(509, 599), s(532, 584), s(466, 601), 
  s(498, 605), s(502, 601), s(506, 603), s(514, 598), s(513, 593), s(504, 597), s(491, 602), s(489, 593), 
]),
// Queen PST
Pst::new([
  s(916, 1238), s(951, 1226), s(955, 1256), s(978, 1242), s(976, 1249), s(976, 1233), s(1052, 1155), s(983, 1214), 
  s(955, 1077), s(933, 1106), s(954, 1117), s(932, 1151), s(911, 1179), s(956, 1123), s(981, 1081), s(1011, 1079), 
  s(957, 1062), s(941, 1078), s(959, 1089), s(948, 1119), s(958, 1110), s(975, 1085), s(989, 1040), s(985, 1056), 
  s(947, 1070), s(944, 1077), s(950, 1077), s(947, 1098), s(964, 1089), s(967, 1072), s(970, 1078), s(970, 1058), 
  s(952, 1038), s(946, 1076), s(948, 1086), s(948, 1110), s(957, 1095), s(950, 1074), s(968, 1053), s(966, 1048), 
  s(952, 1035), s(961, 1049), s(956, 1072), s(953, 1079), s(951, 1090), s(969, 1052), s(978, 1041), s(969, 1033), 
  s(957, 1020), s(957, 1028), s(967, 1019), s(970, 1029), s(968, 1039), s(977, 999), s(973, 1002), s(978, 975), 
  s(946, 1020), s(947, 1013), s(951, 1009), s(961, 995), s(957, 1002), s(941, 1000), s(957, 973), s(946, 1003), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(153, 240), s(152, 232), s(152, 234), s(173, 215), s(138, 225), s(161, 215), s(95, 244), s(83, 257), 
  s(87, 165), s(80, 156), s(114, 149), s(114, 142), s(126, 122), s(174, 133), s(157, 155), s(124, 153), 
  s(67, 149), s(75, 132), s(85, 127), s(96, 107), s(110, 114), s(108, 115), s(89, 122), s(84, 125), 
  s(64, 123), s(65, 120), s(83, 115), s(100, 107), s(98, 108), s(102, 107), s(78, 104), s(81, 106), 
  s(67, 120), s(76, 114), s(84, 116), s(91, 121), s(92, 123), s(98, 116), s(94, 101), s(85, 104), 
  s(65, 129), s(71, 121), s(70, 130), s(81, 132), s(77, 140), s(111, 122), s(95, 106), s(78, 107), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-63, 23), s(-78, 83), s(1, 79), s(-91, 118), s(-40, 97), s(-86, 114), s(-44, 112), s(88, 7), 
  s(-96, 124), s(-35, 154), s(-101, 168), s(62, 152), s(-26, 157), s(-39, 177), s(7, 156), s(-78, 140), 
  s(-120, 86), s(-8, 96), s(-25, 108), s(-53, 117), s(-3, 117), s(84, 104), s(53, 103), s(-32, 73), 
  s(-37, 20), s(2, 45), s(-20, 53), s(-61, 64), s(-71, 64), s(-27, 52), s(-44, 52), s(-119, 28), 
  s(-56, -16), s(1, 6), s(-16, 22), s(-45, 35), s(-37, 32), s(0, 12), s(-43, 8), s(-119, -1), 
  s(-37, -41), s(2, -26), s(-22, -10), s(-19, -3), s(-19, -4), s(-15, -14), s(-18, -25), s(-75, -34), 
  s(11, -60), s(0, -37), s(-16, -29), s(-44, -20), s(-40, -18), s(-27, -28), s(8, -42), s(3, -63), 
  s(29, -98), s(61, -79), s(35, -56), s(-43, -38), s(3, -50), s(-18, -43), s(36, -67), s(31, -101), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(53, 140), s(52, 132), s(52, 134), s(73, 115), s(38, 125), s(61, 115), s(-4, 144), s(-16, 157), 
  s(46, 134), s(56, 143), s(39, 116), s(38, 96), s(27, 121), s(9, 116), s(-41, 129), s(-48, 151), 
  s(36, 57), s(31, 64), s(30, 57), s(14, 65), s(1, 58), s(26, 57), s(-15, 82), s(-10, 80), 
  s(21, 25), s(10, 38), s(-12, 40), s(-5, 36), s(-20, 36), s(-2, 35), s(4, 54), s(-1, 46), 
  s(12, 0), s(-7, 25), s(-26, 24), s(-18, 16), s(-21, 14), s(-2, 14), s(-15, 41), s(14, 19), 
  s(0, 12), s(-2, 21), s(-9, 11), s(-9, 5), s(-5, 3), s(-8, 10), s(0, 20), s(-3, 21), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-31, -183),
  s(4, -115),
  s(-2, -50),
  s(-10, -20),
  s(-10, 1),
  s(-11, 0),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(50, -24),
  s(10, -30),
  s(0, -27),
  s(-15, -16),
  s(-26, -19),
  s(-13, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(26, 367),
  s(162, 166),
  s(52, 51),
  s(18, 16),
  s(-5, -3),
  s(4, -9),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(26, 69);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(21, 59), s(24, 73), s(23, 75), s(24, 74), s(24, 77), s(24, 72), s(21, 69), s(19, 61), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(6, 37), s(13, 56), s(16, 67), s(20, 77), s(21, 84), s(22, 87), s(21, 89), s(16, 93), s(19, 89), s(21, 83), s(27, 83), s(-14, 112), s(19, 73), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(1, 111), s(1, 129), s(1, 153), s(0, 161), s(2, 173), s(4, 178), s(5, 185), s(10, 188), s(11, 193), s(12, 195), s(16, 200), s(21, 203), s(30, 198), s(29, 194), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(50, 210), s(50, 226), s(54, 257), s(59, 270), s(61, 281), s(65, 283), s(67, 303), s(69, 308), s(73, 307), s(76, 311), s(76, 322), s(79, 316), s(83, 320), s(82, 323), s(86, 325), s(84, 329), s(94, 323), s(97, 324), s(118, 305), s(124, 308), s(170, 276), s(158, 271), s(186, 252), s(239, 228), s(294, 193), s(220, 225), s(206, 217), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(12, 27), s(21, 38), s(31, 44), s(39, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(3, 14), s(9, 19), s(13, 22), s(16, 27), s(16, 29), s(20, 28), s(22, 35), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 4), s(11, 9), s(18, 12), s(24, 20), s(28, 24), s(35, 25), s(40, 31), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 132), s(-12, 145), s(-13, 150), s(-13, 164), s(-14, 177), s(-15, 178), s(-16, 186), s(-15, 193), s(-16, 204), s(-15, 202), s(-20, 210), s(0, 195), s(-25, 235), s(18, 201), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 36);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(77, 60);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(123, 5);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(103, -31);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 36);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 17);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(65, -44);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 32);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(70, 33);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(92, 24);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(85, 11);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-32, 84);

pub const TEMPO_BONUS: ScoreTuple = s(34, 24);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-7, 13), s(4, -6), s(9, -3), s(12, -7), s(11, -6), s(11, -8), s(11, -7), s(12, -9), s(12, -10), s(12, -6), s(10, -5), s(11, -11), s(9, -7), s(11, -8), s(9, -9), s(8, -11), s(7, -6), s(6, -6), s(4, -7), s(5, -11), s(6, -12), s(2, -10), s(1, -13), s(0, -13), s(0, -17), s(-12, -14), s(-12, -8), s(-33, -13), 
],
// Bishop attacks
[
  s(1, 10), s(7, -3), s(11, -5), s(10, -4), s(10, -3), s(12, -6), s(11, -7), s(10, -6), s(12, -9), s(11, -8), s(10, -8), s(9, -6), s(8, -8), s(8, -7), s(8, -9), s(5, -5), s(6, -5), s(5, -6), s(5, -7), s(2, -5), s(4, -5), s(2, -11), s(3, -6), s(1, -11), s(-6, -6), s(1, -17), s(14, -27), s(-6, -16), 
],
// Rook attacks
[
  s(8, 3), s(2, -1), s(7, -6), s(8, -9), s(7, -10), s(6, -9), s(7, -10), s(6, -8), s(7, -11), s(6, -10), s(6, -11), s(5, -13), s(4, -9), s(4, -7), s(3, -6), s(3, -3), s(2, -2), s(2, -1), s(2, 0), s(2, 0), s(1, 0), s(2, 0), s(0, 0), s(0, 0), s(1, 1), s(0, 0), s(-14, 6), s(2, -1), 
],
// Queen attacks
[
  s(-1, 7), s(1, -5), s(4, -8), s(6, -12), s(6, -9), s(6, -7), s(7, -10), s(7, -8), s(6, -10), s(8, -10), s(7, -7), s(9, -11), s(9, -11), s(10, -10), s(9, -10), s(10, -11), s(10, -12), s(11, -10), s(11, -8), s(18, -15), s(16, -11), s(12, -9), s(20, -12), s(17, -15), s(11, 0), s(14, -7), s(24, -7), s(15, -15), 
],
// Pawn attacks
[
  s(0, 10), s(5, 0), s(4, -3), s(1, -2), s(1, -2), s(1, -2), s(0, 0), s(1, -2), s(0, -2), s(0, -2), s(0, -1), s(0, -2), s(0, -4), s(1, -4), s(1, -3), s(1, -7), s(1, -6), s(2, -11), s(3, -10), s(0, -6), s(2, -10), s(3, -8), s(3, -7), s(7, -11), s(9, -8), s(-2, -1), s(32, -10), s(11, -8), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-6, 3), s(0, 2), s(-4, 1), s(-3, 0), s(-4, 2), s(-3, 2), s(-4, 3), s(-4, 1), s(-4, 1), s(-5, 3), s(-5, 3), s(-4, 2), s(-6, 5), s(-6, 5), s(-5, 6), s(-5, 9), s(-5, 8), s(-3, 9), s(-2, 11), s(-4, 10), s(-5, 12), s(-4, 13), s(-5, 14), s(-5, 17), s(-6, 16), s(-4, 24), s(-7, 17), s(-4, 28), 
],
// Bishop defenses
[
  s(4, -1), s(-2, 0), s(-4, 1), s(-5, 2), s(-3, 2), s(-4, 2), s(-5, 3), s(-4, 2), s(-4, 3), s(-4, 3), s(-3, 2), s(-4, 1), s(-4, 5), s(-4, 3), s(-3, 3), s(-2, 2), s(-1, 1), s(-1, 4), s(-3, 5), s(-1, 3), s(-1, 4), s(-2, 6), s(-5, 6), s(-4, 8), s(0, 8), s(-4, 10), s(-1, 4), s(1, 15), 
],
// Rook defenses
[
  s(-28, 12), s(-2, 4), s(-5, 6), s(-5, 6), s(-4, 4), s(-4, 6), s(-3, 4), s(-4, 4), s(-4, 5), s(-3, 5), s(-2, 3), s(-2, 4), s(-1, 3), s(-2, 5), s(-1, 4), s(0, 3), s(0, 3), s(0, 4), s(0, 4), s(0, 5), s(-3, 7), s(-1, 6), s(-1, 6), s(-4, 7), s(-5, 7), s(-4, 6), s(6, 2), s(-2, 5), 
],
// Queen defenses
[
  s(0, -3), s(-2, 3), s(-1, 2), s(-1, 2), s(-2, 2), s(-2, 4), s(-3, 5), s(-2, 6), s(-3, 6), s(-3, 7), s(-2, 4), s(-2, 5), s(-2, 5), s(-2, 6), s(-1, 4), s(0, 6), s(0, 6), s(0, 5), s(0, 6), s(0, 7), s(1, 5), s(2, 5), s(-1, 11), s(-6, 14), s(9, 0), s(-4, 11), s(-13, 17), s(-7, 12), 
],
// Pawn defenses
[
  s(-15, -2), s(-22, 5), s(-17, 3), s(-14, 4), s(-12, 2), s(-12, 1), s(-11, 1), s(-10, 2), s(-8, 0), s(-6, -1), s(-4, -3), s(-4, -3), s(-2, -7), s(-1, -8), s(0, -12), s(0, -19), s(0, -18), s(1, -25), s(1, -28), s(2, -24), s(4, -27), s(7, -30), s(9, -28), s(12, -30), s(7, -21), s(32, -38), s(5, -25), s(8, -22), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(105, 40),
  s(82, 53),
  s(74, 62),
  s(81, 74),
  s(77, 82),
  s(73, 107),
  s(81, 126),
  s(83, 115),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-192, 3), s(48, -18), s(67, -13), s(73, -18), s(79, -18), s(76, -18), s(77, -19), s(80, -19), s(80, -38), s(76, -21), s(77, -21), s(72, -23), s(72, -19), s(72, -25), s(71, -22), s(70, -18), s(68, -17), s(68, -23), s(66, -15), s(64, -16), s(65, -15), s(59, -6), s(58, -9), s(57, -7), s(59, -9), s(54, -1), s(56, -6), s(53, -4), s(50, 3), s(48, 0), s(49, 1), s(46, 2), s(43, 4), s(47, 2), s(44, 2), s(38, 11), s(39, 12), s(38, 10), s(38, 9), s(33, 17), s(34, 13), s(34, 17), s(30, 18), s(29, 20), s(28, 19), s(27, 22), s(23, 26), s(23, 23), s(23, 26), s(21, 27), s(20, 28), s(20, 27), s(18, 29), s(16, 32), s(13, 34), s(13, 38), s(11, 36), s(5, 43), s(7, 41), s(5, 44), s(2, 44), s(5, 43), s(4, 45), s(0, 50), s(1, 49), s(0, 50), s(-3, 54), s(-5, 54), s(-8, 58), s(-4, 54), s(-9, 57), s(-12, 64), s(-11, 56), s(-9, 57), s(-18, 68), s(-18, 66), s(-17, 67), s(-18, 67), s(-18, 68), s(-21, 70), s(-23, 74), s(-22, 74), s(-28, 79), s(-30, 80), s(-25, 78), s(-30, 77), s(-28, 84), s(-33, 81), s(-32, 76), s(-34, 85), s(-37, 92), s(-39, 93), s(-40, 93), s(-40, 83), s(-36, 81), s(-40, 102), s(-43, 94), s(-43, 99), s(-47, 104), s(-42, 101), s(-48, 110), s(-49, 106), s(-40, 96), s(-46, 108), s(-48, 111), s(-56, 95), s(-47, 109), s(-43, 106), s(-52, 119), s(-53, 109), s(-53, 103), s(-46, 111), s(-47, 103), s(-47, 102), s(-45, 56), s(-45, 132), s(-61, 107), s(-67, 134), s(-55, 64), s(-50, 195), s(-38, 161), s(-56, 211), s(-54, 172), s(-62, 17), s(-49, 179), s(-35, 163), s(-36, -71), s(-95, 183), s(-31, 63), s(-135, 166), s(-66, 129), s(-126, 211), s(-18, 37), s(-130, 45), s(-93, -28), s(-114, -66), s(-91, 10), s(181, 106), s(-18, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(45, 25), s(30, 3), s(50, 3), s(48, 8), s(50, 18), s(48, 9), s(43, 29), s(45, 15), s(45, 20), s(38, 30), s(39, 29), s(44, 15), s(35, 32), s(41, 25), s(41, 24), s(27, 37), s(34, 29), s(42, 20), s(22, 38), s(30, 39), s(32, 26), s(25, 40), s(21, 41), s(35, 31), s(18, 44), s(24, 38), s(31, 39), s(21, 41), s(13, 50), s(30, 35), s(29, 42), s(13, 44), s(21, 48), s(22, 36), s(12, 51), s(19, 53), s(31, 35), s(-2, 42), s(7, 50), s(21, 36), s(14, 43), s(12, 45), s(2, 35), s(-1, 36), s(-5, 43), s(51, 68), s(-180, 66), s(11, 24), s(2, 114), s(74, -84), s(-2, -116), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const FILE_STRUCTURE: [ScoreTuple; 27] = [
  s(45, 25), s(30, 3), s(30, 3), s(50, 3), s(30, 3), s(50, 3), s(48, 8), s(45, 25), s(30, 3), s(50, 3), s(48, 8), s(50, 18), s(48, 9), s(43, 29), s(45, 15), s(45, 20), s(38, 30), s(39, 29), s(44, 15), s(35, 32), s(41, 25), s(41, 24), s(27, 37), s(34, 29), s(42, 20), s(22, 38), s(30, 39),
];