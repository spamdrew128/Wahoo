#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(192, 302), s(229, 352), s(300, 375), s(352, 353), s(359, 369), s(248, 350), s(220, 355), s(252, 263), 
  s(320, 338), s(354, 352), s(379, 340), s(365, 353), s(386, 336), s(379, 336), s(335, 348), s(341, 312), 
  s(343, 335), s(384, 343), s(405, 365), s(401, 365), s(382, 366), s(425, 346), s(371, 336), s(357, 316), 
  s(372, 343), s(385, 361), s(402, 380), s(434, 380), s(406, 380), s(423, 374), s(384, 359), s(394, 329), 
  s(367, 349), s(382, 354), s(395, 381), s(409, 379), s(406, 383), s(404, 372), s(401, 354), s(373, 349), 
  s(356, 328), s(368, 349), s(386, 355), s(386, 369), s(401, 370), s(390, 345), s(386, 340), s(360, 339), 
  s(338, 308), s(348, 328), s(358, 340), s(376, 339), s(377, 340), s(371, 337), s(358, 320), s(356, 326), 
  s(298, 297), s(333, 320), s(335, 319), s(345, 328), s(350, 327), s(352, 314), s(331, 329), s(339, 296), 
]),
// Bishop PST
Pst::new([
  s(366, 398), s(342, 393), s(293, 399), s(267, 405), s(286, 401), s(276, 402), s(338, 401), s(357, 379), 
  s(375, 369), s(385, 380), s(384, 372), s(339, 379), s(353, 374), s(376, 382), s(344, 389), s(337, 374), 
  s(389, 383), s(413, 372), s(402, 380), s(403, 368), s(388, 372), s(408, 386), s(386, 384), s(395, 374), 
  s(381, 375), s(403, 378), s(407, 381), s(440, 390), s(411, 390), s(419, 384), s(391, 377), s(385, 373), 
  s(389, 363), s(398, 377), s(406, 386), s(425, 387), s(419, 385), s(397, 384), s(382, 378), s(395, 353), 
  s(393, 363), s(415, 373), s(418, 378), s(409, 381), s(407, 388), s(409, 379), s(406, 369), s(400, 356), 
  s(413, 357), s(412, 351), s(418, 355), s(399, 367), s(402, 368), s(412, 365), s(419, 361), s(405, 343), 
  s(383, 350), s(411, 372), s(384, 367), s(379, 363), s(385, 363), s(377, 375), s(395, 354), s(400, 340), 
]),
// Rook PST
Pst::new([
  s(587, 692), s(603, 687), s(574, 704), s(595, 690), s(610, 683), s(563, 696), s(569, 700), s(610, 680), 
  s(564, 691), s(568, 696), s(577, 701), s(591, 688), s(575, 686), s(575, 690), s(574, 685), s(582, 683), 
  s(549, 682), s(569, 683), s(564, 681), s(564, 681), s(577, 676), s(563, 675), s(614, 668), s(563, 669), 
  s(526, 686), s(553, 675), s(546, 690), s(551, 680), s(555, 670), s(540, 675), s(549, 672), s(525, 674), 
  s(518, 669), s(525, 673), s(533, 675), s(549, 666), s(550, 666), s(512, 676), s(542, 667), s(513, 666), 
  s(518, 658), s(526, 662), s(537, 651), s(538, 655), s(543, 653), s(537, 651), s(556, 640), s(525, 640), 
  s(508, 652), s(527, 652), s(538, 654), s(541, 651), s(546, 642), s(532, 648), s(558, 633), s(491, 649), 
  s(523, 654), s(526, 652), s(531, 654), s(537, 650), s(536, 645), s(525, 649), s(516, 651), s(514, 639), 
]),
// Queen PST
Pst::new([
  s(992, 1231), s(1019, 1226), s(1022, 1257), s(1047, 1242), s(1037, 1253), s(1040, 1238), s(1121, 1156), s(1061, 1211), 
  s(1038, 1104), s(1015, 1134), s(1032, 1149), s(1008, 1186), s(984, 1214), s(1035, 1152), s(1068, 1107), s(1098, 1105), 
  s(1040, 1089), s(1024, 1106), s(1039, 1119), s(1028, 1149), s(1038, 1139), s(1053, 1115), s(1071, 1065), s(1068, 1079), 
  s(1030, 1099), s(1027, 1102), s(1032, 1105), s(1030, 1126), s(1044, 1117), s(1050, 1098), s(1056, 1102), s(1055, 1081), 
  s(1038, 1062), s(1030, 1099), s(1033, 1109), s(1032, 1135), s(1040, 1120), s(1036, 1099), s(1054, 1078), s(1054, 1071), 
  s(1040, 1054), s(1047, 1071), s(1042, 1094), s(1038, 1097), s(1036, 1111), s(1055, 1075), s(1065, 1068), s(1057, 1054), 
  s(1046, 1036), s(1044, 1044), s(1054, 1039), s(1056, 1048), s(1054, 1059), s(1063, 1022), s(1061, 1027), s(1068, 996), 
  s(1034, 1037), s(1034, 1033), s(1037, 1031), s(1047, 1018), s(1043, 1024), s(1026, 1024), s(1042, 995), s(1033, 1018), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(147, 278), s(143, 270), s(146, 267), s(172, 243), s(137, 248), s(155, 241), s(89, 272), s(74, 291), 
  s(89, 168), s(82, 159), s(115, 151), s(116, 145), s(129, 125), s(178, 133), s(154, 160), s(127, 156), 
  s(67, 153), s(76, 134), s(86, 130), s(98, 111), s(111, 118), s(111, 118), s(87, 127), s(85, 127), 
  s(64, 126), s(64, 122), s(83, 118), s(99, 111), s(97, 113), s(97, 111), s(73, 109), s(76, 110), 
  s(67, 123), s(76, 117), s(84, 119), s(90, 126), s(90, 129), s(93, 121), s(88, 107), s(80, 108), 
  s(65, 132), s(71, 124), s(71, 133), s(78, 134), s(74, 145), s(105, 126), s(87, 112), s(73, 110), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-55, 45), s(-52, 104), s(0, 108), s(-80, 147), s(-33, 133), s(-53, 144), s(-19, 142), s(53, 43), 
  s(-87, 134), s(-33, 173), s(-98, 183), s(78, 161), s(-8, 173), s(-31, 201), s(-17, 187), s(-70, 163), 
  s(-139, 67), s(-13, 81), s(-23, 93), s(-44, 99), s(5, 102), s(93, 92), s(40, 96), s(-56, 60), 
  s(-57, -2), s(-23, 33), s(-34, 42), s(-73, 57), s(-89, 59), s(-35, 42), s(-64, 38), s(-140, 10), 
  s(-85, -35), s(-25, -7), s(-46, 16), s(-77, 34), s(-71, 32), s(-33, 7), s(-74, -3), s(-145, -17), 
  s(-52, -56), s(-9, -36), s(-39, -13), s(-42, -2), s(-38, -4), s(-27, -16), s(-20, -37), s(-77, -49), 
  s(31, -72), s(15, -41), s(-3, -28), s(-39, -17), s(-32, -15), s(-7, -30), s(34, -50), s(28, -74), 
  s(50, -108), s(82, -82), s(56, -56), s(-37, -33), s(18, -49), s(0, -41), s(63, -70), s(56, -108), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(47, 178), s(43, 170), s(46, 167), s(72, 143), s(37, 148), s(55, 141), s(-10, 172), s(-25, 191), 
  s(23, 204), s(39, 202), s(24, 164), s(28, 128), s(18, 145), s(-1, 147), s(-50, 168), s(-65, 201), 
  s(22, 111), s(21, 105), s(22, 82), s(10, 76), s(0, 67), s(20, 73), s(-20, 104), s(-17, 108), 
  s(9, 66), s(7, 59), s(-13, 46), s(-6, 39), s(-22, 40), s(-9, 44), s(0, 65), s(-4, 64), 
  s(6, 20), s(-7, 30), s(-29, 26), s(-18, 17), s(-24, 17), s(-7, 18), s(-17, 46), s(12, 26), 
  s(-1, 16), s(-3, 21), s(-13, 11), s(-12, 9), s(-5, 3), s(-14, 14), s(0, 20), s(-3, 22), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-27, -197),
  s(10, -135),
  s(0, -62),
  s(-9, -25),
  s(-12, 0),
  s(-19, 1),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(43, -21),
  s(12, -30),
  s(0, -28),
  s(-14, -16),
  s(-27, -19),
  s(-14, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(93, 276),
  s(167, 165),
  s(52, 51),
  s(18, 16),
  s(-6, -5),
  s(3, -11),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(23, 71);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(9, 51), s(11, 65), s(8, 68), s(10, 67), s(9, 71), s(9, 67), s(6, 65), s(4, 56), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(2, 24), s(9, 44), s(11, 56), s(14, 66), s(14, 73), s(14, 77), s(12, 80), s(7, 84), s(10, 80), s(12, 74), s(18, 74), s(-26, 104), s(9, 65), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(1, 75), s(2, 91), s(2, 113), s(1, 122), s(3, 133), s(5, 137), s(6, 144), s(11, 147), s(13, 151), s(14, 154), s(18, 158), s(22, 161), s(29, 156), s(26, 153), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(59, 144), s(58, 203), s(63, 245), s(68, 264), s(71, 275), s(75, 278), s(77, 299), s(79, 305), s(83, 305), s(87, 308), s(87, 319), s(90, 314), s(94, 318), s(93, 321), s(99, 322), s(97, 326), s(108, 318), s(112, 318), s(134, 298), s(140, 301), s(190, 268), s(177, 264), s(207, 245), s(238, 233), s(240, 227), s(172, 238), s(148, 234), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(14, 23), s(24, 33), s(34, 38), s(43, 42), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 12), s(11, 16), s(16, 19), s(20, 23), s(21, 25), s(26, 23), s(29, 30), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 1), s(11, 7), s(19, 12), s(25, 19), s(29, 24), s(37, 24), s(42, 31), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-12, 96), s(-11, 107), s(-12, 111), s(-12, 125), s(-13, 137), s(-14, 139), s(-16, 147), s(-15, 154), s(-17, 165), s(-16, 165), s(-22, 173), s(-4, 160), s(-34, 206), s(5, 174), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 38);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(77, 62);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(124, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(102, -28);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 37);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 19);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(64, -40);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 32);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(71, 33);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(92, 25);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(86, 12);

pub const TEMPO_BONUS: ScoreTuple = s(34, 29);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-6, 13), s(3, -7), s(9, -5), s(12, -11), s(10, -9), s(11, -11), s(11, -9), s(13, -13), s(12, -12), s(12, -9), s(10, -7), s(11, -15), s(10, -11), s(11, -11), s(8, -9), s(9, -13), s(7, -8), s(6, -7), s(4, -7), s(5, -11), s(6, -13), s(3, -11), s(1, -14), s(-2, -12), s(0, -18), s(-14, -12), s(-10, -8), s(-49, -9), 
],
// Bishop attacks
[
  s(0, 9), s(5, -3), s(10, -7), s(9, -6), s(10, -4), s(12, -8), s(10, -8), s(10, -7), s(12, -12), s(11, -10), s(9, -8), s(8, -6), s(8, -7), s(7, -8), s(8, -7), s(5, -5), s(6, -5), s(5, -6), s(5, -7), s(2, -5), s(4, -5), s(2, -11), s(3, -5), s(2, -12), s(-5, -7), s(0, -14), s(7, -15), s(-7, -14), 
],
// Rook attacks
[
  s(8, -3), s(3, -3), s(8, -9), s(9, -13), s(8, -12), s(7, -11), s(8, -13), s(7, -11), s(8, -13), s(6, -11), s(6, -13), s(5, -13), s(4, -7), s(3, -5), s(3, -4), s(3, -2), s(3, -2), s(2, -1), s(3, -1), s(2, 0), s(2, 0), s(3, 0), s(0, 0), s(0, 0), s(1, 1), s(1, 0), s(-16, 7), s(4, -2), 
],
// Queen attacks
[
  s(0, 4), s(1, -4), s(4, -8), s(6, -13), s(5, -10), s(6, -8), s(6, -11), s(7, -9), s(6, -11), s(8, -11), s(7, -12), s(8, -16), s(8, -10), s(9, -9), s(8, -8), s(9, -10), s(10, -11), s(12, -9), s(11, -8), s(16, -12), s(19, -14), s(13, -11), s(22, -14), s(19, -16), s(15, -6), s(24, -13), s(30, -9), s(21, -22), 
],
// Pawn attacks
[
  s(0, 6), s(7, -4), s(6, -7), s(3, -6), s(3, -5), s(3, -6), s(2, -3), s(2, -6), s(1, -5), s(2, -6), s(1, -6), s(2, -8), s(2, -15), s(3, -17), s(2, -19), s(1, -25), s(1, -22), s(1, -26), s(2, -28), s(1, -21), s(3, -25), s(3, -24), s(4, -19), s(8, -23), s(10, -16), s(-2, -8), s(31, -13), s(4, -11), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-8, 5), s(0, 1), s(-2, 1), s(-2, 0), s(-3, 1), s(-2, 1), s(-3, 2), s(-3, 1), s(-3, 1), s(-4, 3), s(-4, 4), s(-3, 3), s(-5, 6), s(-5, 8), s(-3, 8), s(-4, 10), s(-4, 9), s(-3, 9), s(0, 10), s(0, 9), s(-4, 12), s(-1, 13), s(-4, 14), s(-3, 17), s(-2, 16), s(-7, 24), s(-8, 14), s(-3, 27), 
],
// Bishop defenses
[
  s(7, -6), s(-1, 0), s(-3, 1), s(-4, 2), s(-3, 2), s(-3, 2), s(-5, 3), s(-4, 2), s(-4, 3), s(-4, 3), s(-3, 2), s(-3, 2), s(-3, 5), s(-4, 4), s(-2, 3), s(-1, 3), s(-1, 1), s(0, 4), s(-2, 5), s(0, 4), s(0, 4), s(-3, 7), s(-4, 6), s(-3, 8), s(0, 7), s(-5, 10), s(-5, 5), s(2, 14), 
],
// Rook defenses
[
  s(-16, 14), s(0, 2), s(-3, 6), s(-5, 6), s(-3, 5), s(-4, 6), s(-2, 4), s(-3, 4), s(-3, 5), s(-3, 5), s(-2, 3), s(-1, 3), s(0, 3), s(-1, 5), s(0, 3), s(0, 3), s(0, 3), s(0, 4), s(0, 4), s(0, 5), s(-2, 7), s(0, 6), s(0, 6), s(-3, 7), s(-3, 6), s(-4, 7), s(8, 2), s(-4, 7), 
],
// Queen defenses
[
  s(1, -5), s(-2, 6), s(-2, 4), s(-2, 4), s(-2, 3), s(-2, 5), s(-3, 6), s(-2, 6), s(-2, 6), s(-2, 6), s(-1, 1), s(-1, 3), s(-1, 3), s(-1, 6), s(0, 3), s(0, 4), s(0, 5), s(0, 5), s(0, 6), s(0, 6), s(0, 7), s(0, 7), s(-2, 11), s(-7, 14), s(0, 8), s(-10, 14), s(-18, 18), s(-8, 13), 
],
// Pawn defenses
[
  s(-13, 0), s(-22, 10), s(-18, 7), s(-14, 6), s(-12, 4), s(-12, 4), s(-11, 3), s(-10, 4), s(-8, 1), s(-6, 0), s(-3, -2), s(-3, -2), s(-1, -8), s(0, -9), s(0, -15), s(2, -22), s(2, -22), s(2, -25), s(2, -26), s(3, -24), s(4, -26), s(7, -28), s(10, -27), s(13, -30), s(5, -20), s(33, -35), s(6, -23), s(10, -23), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(87, 50),
  s(68, 57),
  s(58, 55),
  s(61, 67),
  s(59, 77),
  s(61, 102),
  s(76, 133),
  s(81, 131),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 64] = [
  s(-92, 38), s(93, 13), s(120, 17), s(128, 12), s(127, 12), s(129, 8), s(127, 4), s(122, 6), s(122, 3), s(119, 10), s(116, 12), s(114, 14), s(110, 20), s(107, 22), s(103, 27), s(99, 31), s(96, 34), s(89, 42), s(86, 44), s(83, 46), s(80, 49), s(78, 51), s(70, 61), s(66, 64), s(63, 66), s(60, 68), s(54, 76), s(51, 79), s(45, 86), s(42, 86), s(38, 90), s(33, 93), s(32, 94), s(26, 103), s(20, 110), s(17, 111), s(12, 115), s(7, 116), s(5, 116), s(0, 126), s(0, 132), s(-5, 135), s(-7, 142), s(-11, 136), s(-13, 113), s(-14, 92), s(-11, 134), s(-6, 145), s(-11, 165), s(-11, 30), s(-5, 19), s(-30, -2), s(-58, 1), s(-33, 3), s(-1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];
