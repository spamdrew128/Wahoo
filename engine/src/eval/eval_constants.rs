#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(178, 290), s(225, 346), s(272, 383), s(316, 364), s(343, 369), s(314, 341), s(254, 336), s(250, 251), 
  s(297, 331), s(336, 350), s(345, 345), s(350, 350), s(355, 334), s(381, 336), s(343, 338), s(338, 300), 
  s(321, 329), s(355, 342), s(371, 369), s(381, 365), s(380, 358), s(396, 348), s(356, 332), s(364, 301), 
  s(345, 342), s(358, 357), s(380, 378), s(409, 379), s(393, 375), s(385, 381), s(370, 354), s(371, 325), 
  s(339, 347), s(359, 350), s(368, 378), s(384, 379), s(388, 380), s(379, 369), s(382, 351), s(346, 348), 
  s(323, 331), s(340, 348), s(357, 353), s(361, 372), s(379, 368), s(363, 347), s(357, 343), s(337, 338), 
  s(311, 314), s(318, 326), s(331, 340), s(351, 340), s(350, 338), s(347, 338), s(325, 321), s(331, 327), 
  s(271, 302), s(298, 350), s(303, 317), s(321, 325), s(328, 327), s(325, 311), s(301, 356), s(312, 294), 
]),
// Bishop PST
Pst::new([
  s(356, 409), s(324, 415), s(289, 419), s(254, 431), s(271, 432), s(315, 415), s(345, 411), s(316, 400), 
  s(365, 377), s(370, 391), s(370, 387), s(343, 393), s(349, 387), s(368, 394), s(340, 398), s(337, 381), 
  s(377, 391), s(398, 382), s(387, 389), s(401, 375), s(372, 388), s(399, 398), s(374, 390), s(387, 380), 
  s(364, 384), s(387, 393), s(396, 393), s(421, 406), s(405, 400), s(400, 401), s(385, 390), s(373, 385), 
  s(375, 376), s(376, 390), s(392, 399), s(414, 401), s(412, 398), s(389, 402), s(379, 388), s(376, 373), 
  s(376, 372), s(400, 388), s(401, 391), s(399, 394), s(398, 399), s(411, 389), s(398, 382), s(384, 368), 
  s(393, 371), s(394, 360), s(403, 361), s(382, 375), s(389, 376), s(398, 367), s(404, 367), s(390, 350), 
  s(369, 354), s(392, 374), s(366, 373), s(360, 370), s(375, 368), s(345, 386), s(379, 360), s(382, 340), 
]),
// Rook PST
Pst::new([
  s(603, 679), s(604, 682), s(602, 691), s(604, 687), s(618, 679), s(623, 681), s(591, 687), s(624, 671), 
  s(569, 679), s(572, 691), s(592, 695), s(607, 684), s(595, 682), s(589, 684), s(588, 673), s(610, 660), 
  s(543, 678), s(577, 675), s(569, 681), s(576, 674), s(601, 664), s(570, 669), s(627, 652), s(580, 651), 
  s(530, 680), s(551, 675), s(558, 684), s(563, 679), s(575, 666), s(574, 666), s(560, 664), s(555, 660), 
  s(519, 665), s(522, 670), s(535, 670), s(549, 669), s(553, 666), s(537, 671), s(556, 655), s(528, 655), 
  s(514, 654), s(526, 654), s(538, 652), s(540, 656), s(550, 652), s(554, 647), s(564, 636), s(528, 639), 
  s(508, 647), s(523, 648), s(540, 649), s(544, 649), s(549, 644), s(535, 650), s(561, 631), s(502, 647), 
  s(519, 653), s(524, 646), s(532, 651), s(540, 645), s(544, 641), s(523, 652), s(522, 648), s(521, 643), 
]),
// Queen PST
Pst::new([
  s(929, 1277), s(941, 1287), s(972, 1297), s(995, 1290), s(1010, 1282), s(979, 1265), s(1032, 1219), s(979, 1244), 
  s(976, 1111), s(952, 1153), s(964, 1175), s(954, 1194), s(952, 1206), s(986, 1147), s(1009, 1120), s(1048, 1102), 
  s(972, 1101), s(967, 1120), s(971, 1150), s(980, 1157), s(981, 1159), s(994, 1130), s(1017, 1103), s(1009, 1100), 
  s(959, 1112), s(970, 1120), s(975, 1128), s(976, 1148), s(982, 1145), s(1000, 1114), s(1004, 1110), s(1001, 1098), 
  s(969, 1082), s(962, 1118), s(970, 1121), s(972, 1154), s(985, 1143), s(977, 1120), s(991, 1110), s(986, 1098), 
  s(972, 1059), s(978, 1090), s(975, 1114), s(972, 1125), s(977, 1124), s(988, 1108), s(996, 1090), s(989, 1068), 
  s(974, 1045), s(977, 1063), s(983, 1070), s(988, 1073), s(986, 1078), s(989, 1067), s(996, 1057), s(1001, 999), 
  s(959, 1046), s(963, 1044), s(968, 1047), s(976, 1043), s(972, 1058), s(965, 1070), s(975, 1032), s(984, 1016), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(157, 255), s(161, 244), s(153, 245), s(168, 229), s(143, 241), s(169, 240), s(136, 254), s(149, 261), 
  s(86, 176), s(86, 165), s(114, 154), s(118, 161), s(114, 147), s(144, 167), s(121, 174), s(85, 182), 
  s(73, 158), s(81, 141), s(94, 137), s(96, 124), s(119, 125), s(97, 134), s(90, 132), s(75, 142), 
  s(73, 131), s(69, 130), s(89, 124), s(105, 122), s(108, 119), s(99, 122), s(84, 119), s(76, 120), 
  s(74, 131), s(84, 126), s(94, 127), s(97, 134), s(110, 136), s(98, 130), s(103, 115), s(83, 121), 
  s(68, 136), s(74, 128), s(76, 137), s(81, 147), s(84, 158), s(89, 136), s(95, 121), s(69, 129), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(29, -77), s(31, -25), s(39, 17), s(-46, 49), s(-65, 37), s(-118, 36), s(5, -16), s(140, -107), 
  s(-31, -50), s(16, -13), s(-34, 27), s(61, 18), s(-2, 33), s(-29, 35), s(14, -8), s(-5, -43), 
  s(-48, -48), s(48, -19), s(-3, 12), s(-41, 30), s(2, 31), s(74, 9), s(41, -8), s(32, -57), 
  s(78, -63), s(71, -21), s(40, 6), s(-9, 21), s(-1, 20), s(6, 12), s(10, -6), s(-25, -42), 
  s(37, -55), s(32, -21), s(-5, 7), s(-27, 19), s(-30, 18), s(-5, 7), s(-11, -8), s(-37, -34), 
  s(32, -45), s(23, -12), s(-34, 9), s(-36, 18), s(-30, 17), s(-26, 11), s(11, -4), s(20, -31), 
  s(53, -32), s(3, 1), s(-22, 14), s(-39, 20), s(-47, 25), s(-27, 19), s(12, 3), s(22, -23), 
  s(34, -41), s(38, -8), s(4, 17), s(-62, 23), s(-14, 9), s(-46, 27), s(17, 0), s(22, -35), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(57, 155), s(61, 144), s(53, 145), s(68, 129), s(43, 141), s(69, 140), s(36, 154), s(49, 161), 
  s(54, 151), s(66, 157), s(53, 128), s(35, 102), s(33, 123), s(24, 116), s(-12, 134), s(-30, 153), 
  s(42, 68), s(40, 72), s(37, 58), s(24, 63), s(-1, 63), s(23, 56), s(3, 87), s(-4, 85), 
  s(24, 34), s(15, 40), s(-9, 38), s(0, 32), s(-15, 35), s(1, 30), s(12, 50), s(-2, 48), 
  s(15, 3), s(-9, 27), s(-20, 21), s(-15, 12), s(-16, 11), s(-5, 13), s(-5, 38), s(11, 22), 
  s(0, 17), s(1, 21), s(-8, 12), s(-7, 4), s(10, -11), s(3, 5), s(14, 14), s(0, 20), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-25, -147),
  s(-1, -94),
  s(-12, -36),
  s(-13, -20),
  s(-8, -2),
  s(-2, -13),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(40, -32),
  s(6, -33),
  s(-6, -28),
  s(-19, -17),
  s(-27, -21),
  s(-13, -22),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(-42, 419),
  s(163, 180),
  s(47, 52),
  s(18, 16),
  s(-5, -3),
  s(7, -2),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(26, 72);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(23, 80), s(27, 94), s(26, 95), s(27, 96), s(28, 98), s(29, 93), s(28, 89), s(25, 79), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(6, 47), s(13, 64), s(17, 75), s(21, 83), s(22, 93), s(22, 95), s(21, 97), s(17, 101), s(17, 97), s(21, 92), s(21, 93), s(-1, 113), s(-7, 90), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 132), s(0, 149), s(-1, 171), s(-1, 179), s(0, 189), s(0, 193), s(3, 199), s(6, 204), s(8, 209), s(10, 212), s(12, 217), s(18, 219), s(19, 215), s(15, 210), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(80, 267), s(81, 342), s(88, 350), s(91, 369), s(95, 364), s(99, 375), s(102, 384), s(105, 387), s(109, 386), s(110, 392), s(113, 396), s(115, 393), s(116, 398), s(118, 396), s(123, 395), s(120, 403), s(124, 397), s(130, 391), s(149, 374), s(152, 371), s(206, 338), s(193, 337), s(206, 317), s(284, 288), s(346, 236), s(278, 260), s(270, 247), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(13, 24), s(25, 37), s(35, 44), s(44, 47), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 14), s(12, 20), s(17, 24), s(21, 28), s(23, 28), s(26, 28), s(32, 34), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 6), s(12, 10), s(17, 15), s(22, 23), s(25, 28), s(30, 29), s(36, 30), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-15, 137), s(-15, 150), s(-15, 157), s(-15, 167), s(-16, 176), s(-17, 183), s(-16, 189), s(-17, 197), s(-19, 205), s(-19, 214), s(-21, 212), s(-18, 213), s(-32, 235), s(11, 203), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(84, 35);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(84, 57);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(123, 1);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(101, -29);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(39, 40);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(88, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(69, -44);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 31);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(68, 31);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(87, 65);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(94, 17);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-28, 75);

pub const TEMPO_BONUS: ScoreTuple = s(38, 27);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-95, -137), s(515, -57), s(188, -166), s(305, 614), s(699, 520), s(-45, 82), s(703, -614), s(-310, -111), ],
  [s(-53, -654), s(-12, -64), s(209, -324), s(13, 480), s(650, 531), s(-60, -48), s(610, -20), s(-33, -515), ],
  [s(-12, 85), s(1010, -78), s(363, -78), s(-143, 398), s(615, -42), s(-45, 864), s(627, -232), s(-54, -52), ],
  [s(134, -262), s(19, -58), s(320, -633), s(886, -8207), s(635, 288), s(-42, 434), s(892, -3039), s(-661, -71), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(35, 269), s(-176, -69), s(-147, 505), s(-226, 480), s(-378, -372), s(-52, 117), s(-565, 580), s(253, 42), ],
  [s(95, 106), s(155, -39), s(1, 294), s(-60, 321), s(-452, -42), s(-25, -17), s(-679, -16), s(81, 62), ],
  [s(-124, 100), s(-301, -35), s(-112, 263), s(218, 131), s(-149, -42), s(-62, -19), s(-537, 32), s(-198, -73), ],
  [s(69, 254), s(-276, -32), s(-46, 313), s(276, -1129), s(-54, -227), s(-58, -539), s(-656, -2932), s(-132, -47), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(-530, -2890), s(453, -50), s(1960, 2), s(2389, 990), s(1531, 496), s(-79, -356), s(1804, 1102), s(-656, 1788), ],
  [s(-20, -1806), s(1646, -66), s(946, -900), s(-2039, -294), s(1425, 313), s(-44, -638), s(717, 1294), s(2316, 1658), ],
  [s(409, -703), s(-2967, 0), s(-108, -211), s(-12281, 761), s(1558, 181), s(-41, -1031), s(-1207, 717), s(542, 737), ],
  [s(6581, 776), s(-9619, -23), s(-1480, 539), s(-15498, 1892), s(1099, -350), s(-30, 633), s(-4520, 688), s(3012, 36), ],
  [s(7593, 1735), s(-9605, -4), s(-2098, 1136), s(-11949, 72), s(2297, -1583), s(-22, 114), s(-2482, -439), s(5148, -535), ],
  [s(4014, 1784), s(-9725, -19), s(-820, 1298), s(-9176, -346), s(1107, -3062), s(10, 1331), s(-1098, -421), s(4298, -1892), ],
  [s(2493, 559), s(-2594, -16), s(-1228, 993), s(-10431, -2016), s(817, -8050), s(0, 1337), s(-3248, -4296), s(2399, -1831), ],
  [s(609, -302), s(-4408, -5), s(-1431, 1262), s(-6656, -2188), s(1911, -8647), s(-10, 1560), s(-37, -1216), s(948, -2037), ],
]);

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(1449, -4120), s(-9153, -6), s(-88, -1607), s(5477, 71), s(-1804, -597), s(-22, 805), s(1998, -8197), s(-693, -6577), ],
  [s(-1385, -4670), s(3204, -28), s(2078, -2143), s(191, -10174), s(-1913, -1521), s(-9, 1322), s(513, -4496), s(2952, -8531), ],
  [s(241, -4694), s(-4235, -14), s(-1577, -1653), s(13000, 87), s(655, -1199), s(1, 1477), s(104, -1473), s(-4981, -6718), ],
  [s(555, -2292), s(-1736, -43), s(66, -642), s(-4417, 840), s(955, -108), s(-32, 970), s(2357, -1358), s(5308, -5117), ],
  [s(-7114, -1229), s(1123, -37), s(-1990, 366), s(-2915, 701), s(-883, -131), s(-31, 1229), s(1770, -3819), s(-2044, -8572), ],
  [s(1359, -1837), s(-1150, -37), s(110, 802), s(-1741, 2561), s(-11551, -207), s(-13, 1406), s(3275, -2679), s(955, -5006), ],
  [s(-533, 28), s(-3480, -73), s(1288, -587), s(-74, -705), s(359, 255), s(-38, 644), s(516, -1697), s(504, -1100), ],
  [s(-8881, 184), s(145, -76), s(-933, -409), s(1059, 539), s(399, 891), s(-52, 1718), s(149, -1017), s(-1351, -8566), ],
  [s(-442, 100), s(-3023, -13), s(1919, -585), s(967, -614), s(-508, 299), s(-16, 823), s(210, -1706), s(-1596, -1487), ],
  [s(-659, -517), s(-938, -78), s(487, -1343), s(327, -439), s(-115, 1029), s(-66, 18), s(-297, -163), s(56, -34), ],
  [s(-4714, -984), s(-1077, -12), s(-964, -1271), s(548, -55), s(-640, 1522), s(-33, -323), s(-767, -2030), s(-337, 641), ],
  [s(-620, -655), s(338, -63), s(700, -1195), s(1017, -194), s(-348, 1020), s(-67, 12), s(-526, -328), s(-1532, -116), ],
  [s(-385, -661), s(-165, -27), s(571, -913), s(267, -102), s(-622, 982), s(7, -70), s(-457, -144), s(271, 95), ],
  [s(-1674, -1066), s(-825, -81), s(-377, -1283), s(488, 524), s(-1164, 1625), s(-56, -128), s(-904, -680), s(-232, 340), ],
  [s(117, -783), s(1014, -90), s(667, -1253), s(614, -392), s(-959, 974), s(-42, 11), s(-450, -335), s(-1303, 286), ],
  [s(-210, -696), s(-955, -76), s(711, -293), s(546, 144), s(-869, 662), s(-75, -231), s(-317, -321), s(368, 228), ],
  [s(-1260, -1154), s(-1092, -83), s(-76, -435), s(755, 124), s(-1026, 673), s(-71, -177), s(-494, -429), s(-287, 230), ],
  [s(255, -1240), s(1216, -83), s(706, -941), s(300, -467), s(-1004, 475), s(-59, -182), s(-499, 252), s(-957, 405), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(879, 869), s(825, -63), s(-3869, -660), s(-336, -1681), s(-374, 673), s(-36, -72), s(-611, 372), s(1105, -1430), ],
  [s(-676, 1775), s(939, -91), s(-292, 916), s(1322, -1656), s(-2028, 732), s(4, -108), s(-1662, -434), s(478, -4551), ],
  [s(184, 1064), s(1224, -57), s(-1449, 487), s(507, 143), s(-1336, 931), s(-54, 582), s(-1330, -662), s(-65, -1257), ],
  [s(498, 771), s(46, -69), s(-2222, -515), s(-660, -534), s(-513, 712), s(-66, 601), s(-391, -757), s(998, 98), ],
  [s(-3346, 993), s(2094, -81), s(615, 355), s(105, -866), s(-826, 694), s(-55, 726), s(-774, -1223), s(800, -2253), ],
  [s(-113, 800), s(1210, -85), s(-1109, -361), s(946, -107), s(-440, 713), s(-62, 906), s(-718, -397), s(-407, -212), ],
  [s(-409, 946), s(-564, -80), s(-851, -578), s(60, 426), s(-734, 1353), s(-24, 196), s(110, -813), s(593, -719), ],
  [s(-3637, 1174), s(-1411, -69), s(-739, 378), s(-449, 211), s(-831, 742), s(-63, 127), s(-308, -2288), s(1418, -404), ],
  [s(447, 1095), s(808, -80), s(300, -483), s(541, 283), s(-966, 1147), s(-36, 627), s(-565, -731), s(120, -597), ],
  [s(171, 1076), s(-2476, -25), s(356, -1650), s(-181, 1866), s(-771, 2647), s(-11, 313), s(12, -318), s(1784, -847), ],
  [s(-3181, 1477), s(-1811, -31), s(-2177, -1427), s(-1045, 1291), s(-345, 2399), s(-7, 1195), s(-356, -1775), s(1207, -51), ],
  [s(23, 940), s(94, -23), s(1133, -1711), s(-990, 909), s(-606, 2254), s(-26, 346), s(-561, -189), s(1855, -719), ],
  [s(197, 1058), s(-2621, -30), s(28, -3036), s(-601, 981), s(-184, 3607), s(15, -2187), s(101, 33), s(1905, -856), ],
  [s(-5765, 1057), s(697, -11), s(-3589, -3353), s(-1626, -1067), s(731, 3508), s(-2, -1397), s(970, -1501), s(1684, -753), ],
  [s(753, 1169), s(1141, -10), s(1128, -3798), s(-118, -1628), s(-196, 3114), s(16, -2592), s(-151, -102), s(1421, -638), ],
  [s(-3244, 1163), s(3762, -15), s(2738, -4155), s(1513, -953), s(879, 3940), s(17, -3353), s(207, 2447), s(2437, -6432), ],
  [s(-9, 1257), s(-1864, 23), s(-526, -4580), s(372, -1927), s(-171, 4456), s(16, -5434), s(-969, -193), s(1528, -8449), ],
  [s(1526, 853), s(-977, 28), s(1937, -3917), s(-1183, -1079), s(-3846, 3587), s(8, -8539), s(819, 1169), s(776, -1736), ],
];

pub const ATTACKING_PIECE_LOCATIONS: [[[ScoreTuple; 8]; 24]; 4] = [
[
  [s(-561, -3665), s(3465, -10), s(1789, -3311), s(526, 526), s(2266, 1635), s(14, 2742), s(1066, -547), s(4341, -1452), ],
  [s(3866, -546), s(-3735, -12), s(1605, -813), s(11827, 2154), s(49, -475), s(0, 5076), s(231, -1524), s(-996, -1146), ],
  [s(141, -2414), s(6576, 4), s(-1297, -4982), s(6663, 1379), s(4633, 2924), s(6, 2798), s(3483, -1443), s(-540, 496), ],
  [s(-339, -682), s(-607, 5), s(682, -651), s(119, 261), s(490, -455), s(-13, 1827), s(1582, -1034), s(1257, -1022), ],
  [s(2225, 423), s(-3912, -9), s(1270, -1881), s(1858, 226), s(722, -346), s(-2, 3835), s(321, -1213), s(3161, 1421), ],
  [s(86, -1207), s(-784, -10), s(-222, -687), s(-1281, 1446), s(-197, 737), s(16, 700), s(1630, -921), s(3749, 190), ],
  [s(-116, -1326), s(-2236, -18), s(-2123, -1368), s(-1695, 39), s(383, 313), s(-37, 2017), s(1386, -862), s(530, -874), ],
  [s(956, 23), s(-425, -43), s(-966, -619), s(-1340, -739), s(-483, -16), s(-27, 937), s(1206, -249), s(305, -2135), ],
  [s(710, -1233), s(-97, -16), s(-872, -2823), s(-1236, -941), s(567, 684), s(-11, 2369), s(942, 629), s(2807, -393), ],
  [s(-306, -700), s(-848, 31), s(-1723, -275), s(-415, 590), s(1470, 110), s(-28, -238), s(2154, -416), s(689, -132), ],
  [s(-266, -1230), s(133, 32), s(1605, 88), s(582, 2674), s(566, 547), s(-30, 517), s(1154, -185), s(1099, -271), ],
  [s(124, -588), s(-1170, -63), s(-1774, -599), s(-807, 311), s(913, 778), s(-45, -591), s(1195, -360), s(1118, -1131), ],
  [s(30, -492), s(-214, -48), s(374, -987), s(1056, 37), s(876, 634), s(-50, 618), s(783, -791), s(-106, 291), ],
  [s(-179, -596), s(747, -16), s(-277, 87), s(85, 861), s(916, 397), s(-23, -1219), s(1692, -697), s(195, -366), ],
  [s(70, -336), s(300, -32), s(-717, -1268), s(769, 223), s(1422, 822), s(-27, 821), s(547, -318), s(-270, -802), ],
  [s(172, -618), s(305, -45), s(408, -661), s(581, -405), s(486, 516), s(-50, -326), s(-223, -830), s(-473, -6), ],
  [s(-161, -561), s(-678, -57), s(-534, -833), s(577, 195), s(534, 534), s(-43, -394), s(-209, -98), s(-49, 618), ],
  [s(68, -632), s(-7, -70), s(27, -329), s(153, -67), s(-9, 715), s(-61, -1432), s(-180, -1041), s(467, -304), ],
  [s(245, -426), s(84, -37), s(-619, -743), s(254, -122), s(541, 527), s(-20, -109), s(-40, -728), s(-313, 375), ],
  [s(-278, -519), s(-95, -71), s(-72, -186), s(264, 603), s(88, 684), s(-52, -941), s(-636, -147), s(151, -278), ],
  [s(-264, -273), s(234, -51), s(-693, -645), s(-167, 286), s(307, 688), s(-59, -879), s(-181, -267), s(204, 683), ],
  [s(18, -81), s(24, -36), s(-71, 168), s(221, 225), s(99, 245), s(-40, -1225), s(-134, 97), s(75, -449), ],
  [s(-101, -361), s(-70, -67), s(-95, -390), s(502, 521), s(173, 531), s(-12, -1447), s(40, 236), s(-249, 152), ],
  [s(-18, -208), s(-226, -27), s(-86, -166), s(208, 635), s(-165, 652), s(-44, -1084), s(-241, 258), s(384, -302), ],
],
[
  [s(2225, 423), s(-3912, -9), s(1270, -1881), s(1858, 226), s(722, -346), s(-2, 3835), s(321, -1213), s(3161, 1421), ],
  [s(86, -1207), s(-784, -10), s(-222, -687), s(-1281, 1446), s(-197, 737), s(16, 700), s(1630, -921), s(3749, 190), ],
  [s(-116, -1326), s(-2236, -18), s(-2123, -1368), s(-1695, 39), s(383, 313), s(-37, 2017), s(1386, -862), s(530, -874), ],
  [s(956, 23), s(-425, -43), s(-966, -619), s(-1340, -739), s(-483, -16), s(-27, 937), s(1206, -249), s(305, -2135), ],
  [s(710, -1233), s(-97, -16), s(-872, -2823), s(-1236, -941), s(567, 684), s(-11, 2369), s(942, 629), s(2807, -393), ],
  [s(-306, -700), s(-848, 31), s(-1723, -275), s(-415, 590), s(1470, 110), s(-28, -238), s(2154, -416), s(689, -132), ],
  [s(-266, -1230), s(133, 32), s(1605, 88), s(582, 2674), s(566, 547), s(-30, 517), s(1154, -185), s(1099, -271), ],
  [s(124, -588), s(-1170, -63), s(-1774, -599), s(-807, 311), s(913, 778), s(-45, -591), s(1195, -360), s(1118, -1131), ],
  [s(30, -492), s(-214, -48), s(374, -987), s(1056, 37), s(876, 634), s(-50, 618), s(783, -791), s(-106, 291), ],
  [s(-179, -596), s(747, -16), s(-277, 87), s(85, 861), s(916, 397), s(-23, -1219), s(1692, -697), s(195, -366), ],
  [s(70, -336), s(300, -32), s(-717, -1268), s(769, 223), s(1422, 822), s(-27, 821), s(547, -318), s(-270, -802), ],
  [s(172, -618), s(305, -45), s(408, -661), s(581, -405), s(486, 516), s(-50, -326), s(-223, -830), s(-473, -6), ],
  [s(-161, -561), s(-678, -57), s(-534, -833), s(577, 195), s(534, 534), s(-43, -394), s(-209, -98), s(-49, 618), ],
  [s(68, -632), s(-7, -70), s(27, -329), s(153, -67), s(-9, 715), s(-61, -1432), s(-180, -1041), s(467, -304), ],
  [s(245, -426), s(84, -37), s(-619, -743), s(254, -122), s(541, 527), s(-20, -109), s(-40, -728), s(-313, 375), ],
  [s(-278, -519), s(-95, -71), s(-72, -186), s(264, 603), s(88, 684), s(-52, -941), s(-636, -147), s(151, -278), ],
  [s(-264, -273), s(234, -51), s(-693, -645), s(-167, 286), s(307, 688), s(-59, -879), s(-181, -267), s(204, 683), ],
  [s(18, -81), s(24, -36), s(-71, 168), s(221, 225), s(99, 245), s(-40, -1225), s(-134, 97), s(75, -449), ],
  [s(-101, -361), s(-70, -67), s(-95, -390), s(502, 521), s(173, 531), s(-12, -1447), s(40, 236), s(-249, 152), ],
  [s(-18, -208), s(-226, -27), s(-86, -166), s(208, 635), s(-165, 652), s(-44, -1084), s(-241, 258), s(384, -302), ],
  [s(216, -65), s(-114, -50), s(-437, -388), s(475, -234), s(479, 104), s(-38, -1054), s(-84, 348), s(-377, 103), ],
  [s(-348, -578), s(115, -18), s(-129, 60), s(-133, 423), s(126, 57), s(-55, -1960), s(-248, 1088), s(-468, -522), ],
  [s(-43, -171), s(-608, 17), s(-315, 18), s(93, 116), s(28, 125), s(-50, -1950), s(-569, 758), s(42, -262), ],
  [s(-99, -301), s(-59, -57), s(-724, -297), s(-373, -238), s(-174, 246), s(-43, -1574), s(-239, 837), s(-48, -59), ],
],
[
  [s(710, -1233), s(-97, -16), s(-872, -2823), s(-1236, -941), s(567, 684), s(-11, 2369), s(942, 629), s(2807, -393), ],
  [s(-306, -700), s(-848, 31), s(-1723, -275), s(-415, 590), s(1470, 110), s(-28, -238), s(2154, -416), s(689, -132), ],
  [s(-266, -1230), s(133, 32), s(1605, 88), s(582, 2674), s(566, 547), s(-30, 517), s(1154, -185), s(1099, -271), ],
  [s(124, -588), s(-1170, -63), s(-1774, -599), s(-807, 311), s(913, 778), s(-45, -591), s(1195, -360), s(1118, -1131), ],
  [s(30, -492), s(-214, -48), s(374, -987), s(1056, 37), s(876, 634), s(-50, 618), s(783, -791), s(-106, 291), ],
  [s(-179, -596), s(747, -16), s(-277, 87), s(85, 861), s(916, 397), s(-23, -1219), s(1692, -697), s(195, -366), ],
  [s(70, -336), s(300, -32), s(-717, -1268), s(769, 223), s(1422, 822), s(-27, 821), s(547, -318), s(-270, -802), ],
  [s(172, -618), s(305, -45), s(408, -661), s(581, -405), s(486, 516), s(-50, -326), s(-223, -830), s(-473, -6), ],
  [s(-161, -561), s(-678, -57), s(-534, -833), s(577, 195), s(534, 534), s(-43, -394), s(-209, -98), s(-49, 618), ],
  [s(68, -632), s(-7, -70), s(27, -329), s(153, -67), s(-9, 715), s(-61, -1432), s(-180, -1041), s(467, -304), ],
  [s(245, -426), s(84, -37), s(-619, -743), s(254, -122), s(541, 527), s(-20, -109), s(-40, -728), s(-313, 375), ],
  [s(-278, -519), s(-95, -71), s(-72, -186), s(264, 603), s(88, 684), s(-52, -941), s(-636, -147), s(151, -278), ],
  [s(-264, -273), s(234, -51), s(-693, -645), s(-167, 286), s(307, 688), s(-59, -879), s(-181, -267), s(204, 683), ],
  [s(18, -81), s(24, -36), s(-71, 168), s(221, 225), s(99, 245), s(-40, -1225), s(-134, 97), s(75, -449), ],
  [s(-101, -361), s(-70, -67), s(-95, -390), s(502, 521), s(173, 531), s(-12, -1447), s(40, 236), s(-249, 152), ],
  [s(-18, -208), s(-226, -27), s(-86, -166), s(208, 635), s(-165, 652), s(-44, -1084), s(-241, 258), s(384, -302), ],
  [s(216, -65), s(-114, -50), s(-437, -388), s(475, -234), s(479, 104), s(-38, -1054), s(-84, 348), s(-377, 103), ],
  [s(-348, -578), s(115, -18), s(-129, 60), s(-133, 423), s(126, 57), s(-55, -1960), s(-248, 1088), s(-468, -522), ],
  [s(-43, -171), s(-608, 17), s(-315, 18), s(93, 116), s(28, 125), s(-50, -1950), s(-569, 758), s(42, -262), ],
  [s(-99, -301), s(-59, -57), s(-724, -297), s(-373, -238), s(-174, 246), s(-43, -1574), s(-239, 837), s(-48, -59), ],
  [s(409, 180), s(463, -19), s(-345, -557), s(215, -555), s(702, 28), s(-28, -1625), s(94, 735), s(-275, -68), ],
  [s(205, -72), s(-299, -81), s(-277, 271), s(-18, 192), s(157, -45), s(-55, -1553), s(-507, -153), s(161, -210), ],
  [s(841, -248), s(-92, -30), s(-263, 148), s(720, 411), s(699, -684), s(-27, -1523), s(234, 1421), s(-432, 346), ],
  [s(69, -147), s(36, -45), s(-514, -15), s(425, 350), s(389, -206), s(-32, -1498), s(-356, 1052), s(-310, -46), ],
],
[
  [s(30, -492), s(-214, -48), s(374, -987), s(1056, 37), s(876, 634), s(-50, 618), s(783, -791), s(-106, 291), ],
  [s(-179, -596), s(747, -16), s(-277, 87), s(85, 861), s(916, 397), s(-23, -1219), s(1692, -697), s(195, -366), ],
  [s(70, -336), s(300, -32), s(-717, -1268), s(769, 223), s(1422, 822), s(-27, 821), s(547, -318), s(-270, -802), ],
  [s(172, -618), s(305, -45), s(408, -661), s(581, -405), s(486, 516), s(-50, -326), s(-223, -830), s(-473, -6), ],
  [s(-161, -561), s(-678, -57), s(-534, -833), s(577, 195), s(534, 534), s(-43, -394), s(-209, -98), s(-49, 618), ],
  [s(68, -632), s(-7, -70), s(27, -329), s(153, -67), s(-9, 715), s(-61, -1432), s(-180, -1041), s(467, -304), ],
  [s(245, -426), s(84, -37), s(-619, -743), s(254, -122), s(541, 527), s(-20, -109), s(-40, -728), s(-313, 375), ],
  [s(-278, -519), s(-95, -71), s(-72, -186), s(264, 603), s(88, 684), s(-52, -941), s(-636, -147), s(151, -278), ],
  [s(-264, -273), s(234, -51), s(-693, -645), s(-167, 286), s(307, 688), s(-59, -879), s(-181, -267), s(204, 683), ],
  [s(18, -81), s(24, -36), s(-71, 168), s(221, 225), s(99, 245), s(-40, -1225), s(-134, 97), s(75, -449), ],
  [s(-101, -361), s(-70, -67), s(-95, -390), s(502, 521), s(173, 531), s(-12, -1447), s(40, 236), s(-249, 152), ],
  [s(-18, -208), s(-226, -27), s(-86, -166), s(208, 635), s(-165, 652), s(-44, -1084), s(-241, 258), s(384, -302), ],
  [s(216, -65), s(-114, -50), s(-437, -388), s(475, -234), s(479, 104), s(-38, -1054), s(-84, 348), s(-377, 103), ],
  [s(-348, -578), s(115, -18), s(-129, 60), s(-133, 423), s(126, 57), s(-55, -1960), s(-248, 1088), s(-468, -522), ],
  [s(-43, -171), s(-608, 17), s(-315, 18), s(93, 116), s(28, 125), s(-50, -1950), s(-569, 758), s(42, -262), ],
  [s(-99, -301), s(-59, -57), s(-724, -297), s(-373, -238), s(-174, 246), s(-43, -1574), s(-239, 837), s(-48, -59), ],
  [s(409, 180), s(463, -19), s(-345, -557), s(215, -555), s(702, 28), s(-28, -1625), s(94, 735), s(-275, -68), ],
  [s(205, -72), s(-299, -81), s(-277, 271), s(-18, 192), s(157, -45), s(-55, -1553), s(-507, -153), s(161, -210), ],
  [s(841, -248), s(-92, -30), s(-263, 148), s(720, 411), s(699, -684), s(-27, -1523), s(234, 1421), s(-432, 346), ],
  [s(69, -147), s(36, -45), s(-514, -15), s(425, 350), s(389, -206), s(-32, -1498), s(-356, 1052), s(-310, -46), ],
  [s(198, -429), s(-899, -12), s(-582, 233), s(409, -8531), s(470, -690), s(-18, -874), s(-1062, -1218), s(-44, 456), ],
  [s(126, 258), s(-697, -7), s(-747, 355), s(765, -5657), s(-263, -999), s(-14, 1275), s(-1491, -1680), s(-362, -273), ],
  [s(89, 473), s(-1250, 5), s(-963, -284), s(691, -39), s(180, -1385), s(-35, 1468), s(-692, 1024), s(-1064, 3218), ],
  [s(-381, -1849), s(108, -2), s(915, -777), s(627, -4159), s(-51, -633), s(-3, 834), s(-1224, -988), s(17, 124), ],
],
];

pub const DEFENDING_PIECE_LOCATIONS: [[[ScoreTuple; 8]; 24]; 4] = [
[
  [s(74, 242), s(953, 17), s(-396, -131), s(791, -588), s(449, -271), s(-5, 885), s(-1906, 231), s(-852, -159), ],
  [s(248, 5), s(-1100, -38), s(-554, 380), s(1674, -194), s(-640, -26), s(-35, 1631), s(-3780, -675), s(-758, -1046), ],
  [s(751, -36), s(-1463, -24), s(-575, 500), s(922, 1188), s(-662, -265), s(-40, 453), s(-1240, 777), s(-513, 702), ],
  [s(516, -479), s(-89, -43), s(-15, -484), s(97, 234), s(-132, 630), s(-37, 435), s(-1171, -18), s(645, -311), ],
  [s(-203, 290), s(425, -57), s(228, -203), s(1516, -817), s(-438, -7), s(-52, 697), s(-1419, -802), s(-382, 146), ],
  [s(-111, -343), s(-262, -44), s(-448, -567), s(792, -109), s(-95, 83), s(-14, 1054), s(-1427, 307), s(-551, -205), ],
  [s(127, 463), s(-381, -43), s(-938, 77), s(817, -36), s(-233, 198), s(-18, -81), s(-1355, -633), s(-425, 253), ],
  [s(-676, -284), s(-704, -56), s(-383, -145), s(627, -38), s(-291, 34), s(-23, -77), s(-790, 229), s(257, -210), ],
  [s(126, 396), s(-51, -89), s(-382, -303), s(1307, -897), s(-185, 30), s(-19, -4), s(-604, -378), s(-882, 85), ],
  [s(-303, 326), s(-724, -42), s(-279, -123), s(1011, -329), s(-263, -89), s(-42, 618), s(-1367, -33), s(-319, -156), ],
  [s(37, 280), s(-1340, -51), s(-132, -54), s(-116, -231), s(-789, 169), s(-54, 82), s(-267, -531), s(232, 140), ],
  [s(-43, 682), s(-21, -28), s(-711, 238), s(-193, -596), s(-536, -195), s(-28, 418), s(-731, 220), s(133, -424), ],
  [s(-723, 171), s(-681, 6), s(-811, 372), s(413, 42), s(-203, 22), s(-28, 99), s(-784, -613), s(-140, 54), ],
  [s(-106, 1098), s(-418, -34), s(-994, 887), s(45, 111), s(-386, -386), s(-6, 363), s(-572, -16), s(-23, -234), ],
  [s(-16, 815), s(-342, -67), s(-185, 370), s(49, -463), s(-299, -229), s(-29, 409), s(-882, -130), s(-66, -373), ],
  [s(-504, 336), s(-306, 22), s(-264, 355), s(-268, -434), s(-297, -168), s(-6, -125), s(-781, -331), s(553, -3), ],
  [s(-163, 634), s(-1161, 4), s(-516, 529), s(52, 327), s(-442, -1), s(-49, 278), s(-105, -318), s(300, -97), ],
  [s(-248, 729), s(-634, -38), s(-384, 389), s(-78, -342), s(-227, -285), s(-13, -94), s(-51, -210), s(292, 96), ],
  [s(-156, 143), s(-400, -78), s(-840, 52), s(-964, -614), s(-404, -96), s(-21, -211), s(-579, -252), s(574, -29), ],
  [s(128, 309), s(-193, -47), s(-588, -52), s(-625, -34), s(-280, -177), s(-45, 648), s(235, 268), s(761, 0), ],
  [s(-275, 118), s(-954, -59), s(-754, 418), s(-821, 317), s(-537, -214), s(-38, 88), s(618, -194), s(693, 60), ],
  [s(-406, -90), s(-1081, 16), s(-754, 46), s(-1083, -422), s(-264, -296), s(25, 256), s(537, -584), s(1263, 16), ],
  [s(-153, 285), s(-1048, -2), s(-370, 451), s(-756, -498), s(-499, -531), s(-10, 248), s(2, -461), s(703, -38), ],
  [s(-369, 529), s(-1242, -28), s(-811, 421), s(-594, 221), s(-322, -380), s(-12, 693), s(643, 179), s(830, 94), ],
],
[
  [s(-203, 290), s(425, -57), s(228, -203), s(1516, -817), s(-438, -7), s(-52, 697), s(-1419, -802), s(-382, 146), ],
  [s(-111, -343), s(-262, -44), s(-448, -567), s(792, -109), s(-95, 83), s(-14, 1054), s(-1427, 307), s(-551, -205), ],
  [s(127, 463), s(-381, -43), s(-938, 77), s(817, -36), s(-233, 198), s(-18, -81), s(-1355, -633), s(-425, 253), ],
  [s(-676, -284), s(-704, -56), s(-383, -145), s(627, -38), s(-291, 34), s(-23, -77), s(-790, 229), s(257, -210), ],
  [s(126, 396), s(-51, -89), s(-382, -303), s(1307, -897), s(-185, 30), s(-19, -4), s(-604, -378), s(-882, 85), ],
  [s(-303, 326), s(-724, -42), s(-279, -123), s(1011, -329), s(-263, -89), s(-42, 618), s(-1367, -33), s(-319, -156), ],
  [s(37, 280), s(-1340, -51), s(-132, -54), s(-116, -231), s(-789, 169), s(-54, 82), s(-267, -531), s(232, 140), ],
  [s(-43, 682), s(-21, -28), s(-711, 238), s(-193, -596), s(-536, -195), s(-28, 418), s(-731, 220), s(133, -424), ],
  [s(-723, 171), s(-681, 6), s(-811, 372), s(413, 42), s(-203, 22), s(-28, 99), s(-784, -613), s(-140, 54), ],
  [s(-106, 1098), s(-418, -34), s(-994, 887), s(45, 111), s(-386, -386), s(-6, 363), s(-572, -16), s(-23, -234), ],
  [s(-16, 815), s(-342, -67), s(-185, 370), s(49, -463), s(-299, -229), s(-29, 409), s(-882, -130), s(-66, -373), ],
  [s(-504, 336), s(-306, 22), s(-264, 355), s(-268, -434), s(-297, -168), s(-6, -125), s(-781, -331), s(553, -3), ],
  [s(-163, 634), s(-1161, 4), s(-516, 529), s(52, 327), s(-442, -1), s(-49, 278), s(-105, -318), s(300, -97), ],
  [s(-248, 729), s(-634, -38), s(-384, 389), s(-78, -342), s(-227, -285), s(-13, -94), s(-51, -210), s(292, 96), ],
  [s(-156, 143), s(-400, -78), s(-840, 52), s(-964, -614), s(-404, -96), s(-21, -211), s(-579, -252), s(574, -29), ],
  [s(128, 309), s(-193, -47), s(-588, -52), s(-625, -34), s(-280, -177), s(-45, 648), s(235, 268), s(761, 0), ],
  [s(-275, 118), s(-954, -59), s(-754, 418), s(-821, 317), s(-537, -214), s(-38, 88), s(618, -194), s(693, 60), ],
  [s(-406, -90), s(-1081, 16), s(-754, 46), s(-1083, -422), s(-264, -296), s(25, 256), s(537, -584), s(1263, 16), ],
  [s(-153, 285), s(-1048, -2), s(-370, 451), s(-756, -498), s(-499, -531), s(-10, 248), s(2, -461), s(703, -38), ],
  [s(-369, 529), s(-1242, -28), s(-811, 421), s(-594, 221), s(-322, -380), s(-12, 693), s(643, 179), s(830, 94), ],
  [s(-130, 269), s(-420, -55), s(573, 20), s(-950, 326), s(-519, -357), s(-39, 1481), s(-199, 404), s(935, 25), ],
  [s(225, 463), s(-1536, -41), s(-412, -119), s(-997, -831), s(-273, -375), s(-24, 805), s(-333, -91), s(1061, 247), ],
  [s(100, 144), s(-552, 8), s(-459, 455), s(-1155, -624), s(-215, -431), s(-16, 29), s(232, -582), s(1455, -160), ],
  [s(-632, -10), s(-291, 31), s(-736, 508), s(-1293, 72), s(-509, -582), s(36, 123), s(211, 437), s(1090, 377), ],
],
[
  [s(126, 396), s(-51, -89), s(-382, -303), s(1307, -897), s(-185, 30), s(-19, -4), s(-604, -378), s(-882, 85), ],
  [s(-303, 326), s(-724, -42), s(-279, -123), s(1011, -329), s(-263, -89), s(-42, 618), s(-1367, -33), s(-319, -156), ],
  [s(37, 280), s(-1340, -51), s(-132, -54), s(-116, -231), s(-789, 169), s(-54, 82), s(-267, -531), s(232, 140), ],
  [s(-43, 682), s(-21, -28), s(-711, 238), s(-193, -596), s(-536, -195), s(-28, 418), s(-731, 220), s(133, -424), ],
  [s(-723, 171), s(-681, 6), s(-811, 372), s(413, 42), s(-203, 22), s(-28, 99), s(-784, -613), s(-140, 54), ],
  [s(-106, 1098), s(-418, -34), s(-994, 887), s(45, 111), s(-386, -386), s(-6, 363), s(-572, -16), s(-23, -234), ],
  [s(-16, 815), s(-342, -67), s(-185, 370), s(49, -463), s(-299, -229), s(-29, 409), s(-882, -130), s(-66, -373), ],
  [s(-504, 336), s(-306, 22), s(-264, 355), s(-268, -434), s(-297, -168), s(-6, -125), s(-781, -331), s(553, -3), ],
  [s(-163, 634), s(-1161, 4), s(-516, 529), s(52, 327), s(-442, -1), s(-49, 278), s(-105, -318), s(300, -97), ],
  [s(-248, 729), s(-634, -38), s(-384, 389), s(-78, -342), s(-227, -285), s(-13, -94), s(-51, -210), s(292, 96), ],
  [s(-156, 143), s(-400, -78), s(-840, 52), s(-964, -614), s(-404, -96), s(-21, -211), s(-579, -252), s(574, -29), ],
  [s(128, 309), s(-193, -47), s(-588, -52), s(-625, -34), s(-280, -177), s(-45, 648), s(235, 268), s(761, 0), ],
  [s(-275, 118), s(-954, -59), s(-754, 418), s(-821, 317), s(-537, -214), s(-38, 88), s(618, -194), s(693, 60), ],
  [s(-406, -90), s(-1081, 16), s(-754, 46), s(-1083, -422), s(-264, -296), s(25, 256), s(537, -584), s(1263, 16), ],
  [s(-153, 285), s(-1048, -2), s(-370, 451), s(-756, -498), s(-499, -531), s(-10, 248), s(2, -461), s(703, -38), ],
  [s(-369, 529), s(-1242, -28), s(-811, 421), s(-594, 221), s(-322, -380), s(-12, 693), s(643, 179), s(830, 94), ],
  [s(-130, 269), s(-420, -55), s(573, 20), s(-950, 326), s(-519, -357), s(-39, 1481), s(-199, 404), s(935, 25), ],
  [s(225, 463), s(-1536, -41), s(-412, -119), s(-997, -831), s(-273, -375), s(-24, 805), s(-333, -91), s(1061, 247), ],
  [s(100, 144), s(-552, 8), s(-459, 455), s(-1155, -624), s(-215, -431), s(-16, 29), s(232, -582), s(1455, -160), ],
  [s(-632, -10), s(-291, 31), s(-736, 508), s(-1293, 72), s(-509, -582), s(36, 123), s(211, 437), s(1090, 377), ],
  [s(206, 19), s(1342, 1), s(207, -112), s(-921, 510), s(16, -106), s(-5, 535), s(-18, 225), s(272, 324), ],
  [s(-579, 1), s(-1275, -23), s(230, -243), s(-506, 1462), s(149, -68), s(-18, 2381), s(-870, -157), s(285, 179), ],
  [s(157, 42), s(-616, 24), s(237, -1670), s(-832, -365), s(573, -516), s(2, 4605), s(-408, -701), s(2182, 888), ],
  [s(-796, 113), s(-207, 32), s(605, -1278), s(364, -190), s(1810, -115), s(-8, 2736), s(-490, -367), s(1682, 694), ],
],
[
  [s(-723, 171), s(-681, 6), s(-811, 372), s(413, 42), s(-203, 22), s(-28, 99), s(-784, -613), s(-140, 54), ],
  [s(-106, 1098), s(-418, -34), s(-994, 887), s(45, 111), s(-386, -386), s(-6, 363), s(-572, -16), s(-23, -234), ],
  [s(-16, 815), s(-342, -67), s(-185, 370), s(49, -463), s(-299, -229), s(-29, 409), s(-882, -130), s(-66, -373), ],
  [s(-504, 336), s(-306, 22), s(-264, 355), s(-268, -434), s(-297, -168), s(-6, -125), s(-781, -331), s(553, -3), ],
  [s(-163, 634), s(-1161, 4), s(-516, 529), s(52, 327), s(-442, -1), s(-49, 278), s(-105, -318), s(300, -97), ],
  [s(-248, 729), s(-634, -38), s(-384, 389), s(-78, -342), s(-227, -285), s(-13, -94), s(-51, -210), s(292, 96), ],
  [s(-156, 143), s(-400, -78), s(-840, 52), s(-964, -614), s(-404, -96), s(-21, -211), s(-579, -252), s(574, -29), ],
  [s(128, 309), s(-193, -47), s(-588, -52), s(-625, -34), s(-280, -177), s(-45, 648), s(235, 268), s(761, 0), ],
  [s(-275, 118), s(-954, -59), s(-754, 418), s(-821, 317), s(-537, -214), s(-38, 88), s(618, -194), s(693, 60), ],
  [s(-406, -90), s(-1081, 16), s(-754, 46), s(-1083, -422), s(-264, -296), s(25, 256), s(537, -584), s(1263, 16), ],
  [s(-153, 285), s(-1048, -2), s(-370, 451), s(-756, -498), s(-499, -531), s(-10, 248), s(2, -461), s(703, -38), ],
  [s(-369, 529), s(-1242, -28), s(-811, 421), s(-594, 221), s(-322, -380), s(-12, 693), s(643, 179), s(830, 94), ],
  [s(-130, 269), s(-420, -55), s(573, 20), s(-950, 326), s(-519, -357), s(-39, 1481), s(-199, 404), s(935, 25), ],
  [s(225, 463), s(-1536, -41), s(-412, -119), s(-997, -831), s(-273, -375), s(-24, 805), s(-333, -91), s(1061, 247), ],
  [s(100, 144), s(-552, 8), s(-459, 455), s(-1155, -624), s(-215, -431), s(-16, 29), s(232, -582), s(1455, -160), ],
  [s(-632, -10), s(-291, 31), s(-736, 508), s(-1293, 72), s(-509, -582), s(36, 123), s(211, 437), s(1090, 377), ],
  [s(206, 19), s(1342, 1), s(207, -112), s(-921, 510), s(16, -106), s(-5, 535), s(-18, 225), s(272, 324), ],
  [s(-579, 1), s(-1275, -23), s(230, -243), s(-506, 1462), s(149, -68), s(-18, 2381), s(-870, -157), s(285, 179), ],
  [s(157, 42), s(-616, 24), s(237, -1670), s(-832, -365), s(573, -516), s(2, 4605), s(-408, -701), s(2182, 888), ],
  [s(-796, 113), s(-207, 32), s(605, -1278), s(364, -190), s(1810, -115), s(-8, 2736), s(-490, -367), s(1682, 694), ],
  [s(133, 649), s(-383, 15), s(-1768, -1125), s(1386, 1832), s(2058, 510), s(6, -1556), s(-69, -1813), s(1430, 2481), ],
  [s(-1554, -1245), s(2055, -27), s(1316, 551), s(-2195, 1612), s(-1290, -1107), s(-1, -1820), s(912, 2852), s(-182, 1001), ],
  [s(-1695, -1475), s(5386, 15), s(937, 327), s(-1936, -700), s(511, -795), s(-6, -304), s(-1295, -4608), s(-1340, 2429), ],
  [s(-416, -489), s(-673, -2), s(6285, -1562), s(4102, 2270), s(-1401, -353), s(5, 1472), s(198, 1933), s(908, 2194), ],
],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(1614, 164), s(-148, -101), s(1600, 11340), s(-1623, 2610), s(3005, -878), s(-92, 26), s(783, 2662), s(2382, 2623), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(472, -530), s(-232, -52), s(298, 639), s(-293, -351), s(485, 774), s(55, 290), s(604, 282), s(-274, 313), ];

pub const OUTPUT_BIAS: ScoreTuple = s(0, 0);

/*
fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
desc: startpos
output: S(-128.39606106166423, 599.1031425195135) - S(-128.39606106166423, 599.1031425195135)
= S(0, 0)

fen: r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1
desc: kiwipete
output: S(-89.18483635111104, 675.404188183782) - S(-151.63967138396737, 674.1748714236641)
= S(62.45483503285632, 1.2293167601179675)

fen: r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7
desc: fried liver attack
output: S(-33.670859463469476, 571.1966896060305) - S(-35.76531114742238, 607.2711897638978)
= S(2.0944516839529044, -36.074500157867305)

fen: 1r2r1k1/pbp1qpp1/1p1p4/4nPR1/4P3/P1N4P/1PPQB3/1K1R4 w - - 1 24
desc: wahoo vs akimbo
output: S(67.80737934253615, 507.6382800431383) - S(-132.65354173869417, 574.3522584815655)
= S(200.4609210812303, -66.7139784384272)

fen: 2kr3r/ppp1qppp/2b2n2/4p3/4P3/P1P2Q2/P1B2PPP/R1B2RK1 w - - 7 14
output: S(-115.01730803310858, 578.2068581807594) - S(-135.50996358639856, 582.4641132250928)
= S(20.49265555328998, -4.257255044333419)

fen: rnbq1b1r/ppPknQ1p/3pp3/1B6/5pp1/BP2P3/P1PK1PPP/RN4NR b - - 4 11
output: S(-105.2254428731946, 438.5978767830756) - S(-163.63812037232714, 522.2486693541675)
= S(58.41267749913254, -83.65079257109193)

fen: 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1
output: S(178.81145761176734, 337.83002496589995) - S(170.04857495022537, 336.1153233064709)
= S(8.762882661541965, 1.7147016594290676)

fen: 8/3kp1p1/8/1p6/4PP2/5K2/1P6/8 w - - 0 1
output: S(51.992237792799884, 503.5363407483445) - S(-15.515255312930236, 477.694670656378)
= S(67.50749310573012, 25.841670091966535)

fen: 2k1n3/3bp1p1/8/1p6/4PP2/5K2/1P2R3/8 w - - 0 1
output: S(21.4086142229851, 528.4381420823825) - S(20.91872621918064, 483.0314987287159)
= S(0.4898880038044595, 45.40664335366654)

fen: 8/8/3bk2p/1r2p1pP/p1p3P1/P1B1K3/1PP5/5R2 b - - 25 52
output: S(158.18798456716922, 376.83637897399535) - S(35.18619461933267, 467.9743671228189)
= S(123.00178994783656, -91.13798814882352)

*/
