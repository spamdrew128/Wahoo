#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(168, 290), s(206, 338), s(267, 367), s(322, 342), s(329, 360), s(227, 337), s(198, 341), s(226, 250), 
  s(288, 322), s(321, 337), s(347, 325), s(333, 339), s(355, 322), s(352, 322), s(307, 331), s(311, 293), 
  s(308, 321), s(352, 328), s(374, 350), s(370, 351), s(354, 351), s(394, 332), s(344, 320), s(331, 298), 
  s(339, 326), s(352, 346), s(367, 366), s(400, 367), s(374, 367), s(390, 360), s(351, 345), s(363, 312), 
  s(334, 332), s(348, 340), s(361, 367), s(375, 366), s(372, 370), s(370, 358), s(367, 340), s(341, 335), 
  s(322, 312), s(334, 334), s(351, 341), s(352, 356), s(367, 357), s(357, 332), s(352, 327), s(328, 326), 
  s(305, 293), s(314, 311), s(324, 324), s(344, 323), s(345, 324), s(339, 323), s(325, 304), s(325, 310), 
  s(269, 280), s(303, 312), s(304, 301), s(314, 310), s(320, 308), s(321, 296), s(300, 323), s(308, 284), 
]),
// Bishop PST
Pst::new([
  s(338, 384), s(313, 378), s(265, 384), s(240, 389), s(261, 387), s(256, 384), s(315, 385), s(326, 364), 
  s(345, 352), s(356, 365), s(356, 356), s(313, 363), s(330, 357), s(349, 366), s(320, 372), s(311, 356), 
  s(360, 366), s(386, 354), s(376, 362), s(377, 351), s(360, 356), s(382, 369), s(357, 368), s(368, 357), 
  s(352, 356), s(373, 361), s(379, 364), s(410, 374), s(385, 373), s(390, 368), s(362, 362), s(357, 357), 
  s(360, 346), s(370, 359), s(376, 370), s(396, 372), s(391, 369), s(368, 369), s(355, 361), s(367, 338), 
  s(364, 345), s(386, 356), s(389, 362), s(381, 365), s(379, 371), s(382, 364), s(378, 354), s(374, 340), 
  s(384, 343), s(383, 333), s(390, 338), s(372, 350), s(375, 352), s(387, 347), s(393, 344), s(378, 328), 
  s(355, 334), s(385, 354), s(358, 350), s(354, 344), s(361, 345), s(352, 357), s(370, 337), s(374, 324), 
]),
// Rook PST
Pst::new([
  s(563, 642), s(585, 635), s(553, 653), s(574, 641), s(591, 632), s(551, 643), s(553, 645), s(593, 627), 
  s(541, 639), s(544, 643), s(555, 648), s(569, 636), s(558, 633), s(561, 636), s(556, 630), s(560, 629), 
  s(525, 632), s(545, 632), s(541, 630), s(544, 630), s(561, 623), s(546, 623), s(596, 615), s(546, 615), 
  s(502, 635), s(530, 624), s(522, 639), s(528, 631), s(536, 620), s(521, 625), s(525, 622), s(503, 623), 
  s(493, 619), s(501, 622), s(510, 625), s(524, 618), s(527, 616), s(489, 627), s(519, 616), s(489, 617), 
  s(493, 608), s(501, 612), s(512, 601), s(515, 605), s(519, 604), s(514, 602), s(531, 591), s(501, 592), 
  s(483, 603), s(503, 602), s(514, 603), s(518, 600), s(522, 592), s(509, 599), s(532, 584), s(466, 602), 
  s(498, 605), s(501, 602), s(506, 603), s(514, 598), s(513, 594), s(504, 598), s(491, 602), s(488, 593), 
]),
// Queen PST
Pst::new([
  s(917, 1238), s(950, 1228), s(952, 1260), s(979, 1242), s(974, 1250), s(980, 1231), s(1052, 1156), s(983, 1215), 
  s(955, 1078), s(934, 1106), s(954, 1117), s(932, 1152), s(912, 1179), s(955, 1124), s(981, 1082), s(1012, 1079), 
  s(958, 1062), s(942, 1078), s(959, 1089), s(948, 1119), s(959, 1111), s(976, 1086), s(989, 1040), s(986, 1056), 
  s(947, 1070), s(944, 1077), s(951, 1077), s(948, 1098), s(964, 1088), s(967, 1072), s(970, 1078), s(970, 1058), 
  s(953, 1038), s(946, 1076), s(949, 1086), s(948, 1110), s(957, 1095), s(951, 1074), s(968, 1053), s(967, 1048), 
  s(953, 1035), s(962, 1049), s(957, 1072), s(953, 1079), s(952, 1090), s(970, 1052), s(978, 1041), s(969, 1033), 
  s(957, 1020), s(957, 1027), s(968, 1019), s(971, 1029), s(968, 1039), s(977, 999), s(974, 1001), s(979, 975), 
  s(946, 1019), s(947, 1013), s(951, 1009), s(962, 995), s(958, 1002), s(942, 1000), s(957, 973), s(946, 1003), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(153, 240), s(152, 233), s(152, 234), s(173, 215), s(137, 225), s(161, 215), s(94, 244), s(82, 257), 
  s(87, 165), s(80, 156), s(114, 149), s(115, 141), s(126, 122), s(174, 133), s(157, 155), s(124, 153), 
  s(67, 150), s(75, 132), s(85, 127), s(96, 108), s(110, 114), s(108, 115), s(89, 122), s(83, 125), 
  s(64, 124), s(64, 120), s(83, 115), s(100, 107), s(98, 108), s(102, 107), s(78, 104), s(81, 106), 
  s(67, 120), s(76, 114), s(84, 116), s(91, 121), s(92, 123), s(98, 116), s(94, 101), s(85, 104), 
  s(65, 129), s(71, 121), s(70, 130), s(81, 132), s(77, 140), s(111, 122), s(95, 106), s(78, 107), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-61, 20), s(-77, 81), s(4, 76), s(-89, 115), s(-38, 93), s(-79, 109), s(-41, 108), s(87, 4), 
  s(-96, 125), s(-36, 155), s(-103, 169), s(60, 154), s(-30, 160), s(-39, 179), s(3, 159), s(-85, 143), 
  s(-126, 88), s(-12, 98), s(-28, 109), s(-55, 118), s(-7, 118), s(82, 105), s(51, 104), s(-36, 74), 
  s(-38, 20), s(1, 46), s(-22, 53), s(-62, 65), s(-73, 64), s(-28, 52), s(-46, 53), s(-119, 28), 
  s(-60, -16), s(-1, 6), s(-19, 23), s(-47, 35), s(-40, 33), s(-4, 12), s(-46, 8), s(-123, -1), 
  s(-36, -40), s(3, -26), s(-21, -10), s(-18, -3), s(-18, -4), s(-14, -14), s(-17, -25), s(-73, -34), 
  s(13, -60), s(2, -37), s(-13, -28), s(-41, -20), s(-38, -17), s(-25, -28), s(11, -42), s(5, -62), 
  s(31, -99), s(63, -79), s(37, -56), s(-41, -38), s(5, -50), s(-16, -43), s(38, -67), s(33, -101), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(53, 140), s(52, 133), s(52, 134), s(73, 115), s(37, 125), s(61, 115), s(-5, 144), s(-17, 157), 
  s(46, 134), s(56, 143), s(39, 116), s(38, 97), s(27, 121), s(8, 116), s(-41, 129), s(-48, 151), 
  s(36, 57), s(31, 64), s(30, 57), s(14, 65), s(1, 58), s(26, 57), s(-15, 82), s(-10, 80), 
  s(21, 24), s(10, 37), s(-12, 39), s(-5, 36), s(-20, 36), s(-2, 35), s(4, 54), s(-1, 46), 
  s(12, 0), s(-7, 25), s(-26, 24), s(-18, 16), s(-21, 14), s(-2, 14), s(-15, 41), s(14, 19), 
  s(0, 12), s(-2, 21), s(-9, 11), s(-9, 5), s(-5, 3), s(-8, 10), s(0, 20), s(-3, 21), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-30, -183),
  s(4, -115),
  s(-2, -50),
  s(-10, -20),
  s(-10, 1),
  s(-11, 0),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(51, -24),
  s(10, -30),
  s(0, -27),
  s(-15, -16),
  s(-26, -19),
  s(-14, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(19, 375),
  s(162, 165),
  s(52, 51),
  s(18, 16),
  s(-5, -3),
  s(5, -9),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(26, 69);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(21, 58), s(24, 71), s(23, 74), s(24, 72), s(24, 75), s(24, 71), s(21, 68), s(19, 59), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(6, 37), s(14, 56), s(16, 67), s(20, 77), s(21, 84), s(22, 87), s(21, 89), s(16, 93), s(19, 89), s(21, 83), s(27, 84), s(-14, 112), s(19, 74), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 111), s(1, 129), s(1, 153), s(0, 161), s(2, 173), s(4, 178), s(5, 185), s(10, 189), s(11, 193), s(12, 196), s(16, 200), s(21, 203), s(30, 198), s(29, 194), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(48, 213), s(48, 226), s(52, 258), s(57, 272), s(60, 282), s(64, 284), s(65, 304), s(68, 310), s(71, 309), s(74, 312), s(75, 323), s(77, 317), s(81, 321), s(80, 325), s(84, 327), s(82, 331), s(92, 324), s(96, 325), s(117, 306), s(123, 309), s(168, 277), s(155, 273), s(183, 254), s(237, 231), s(291, 196), s(221, 224), s(208, 217), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(12, 27), s(21, 39), s(31, 45), s(39, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(3, 14), s(9, 19), s(12, 22), s(16, 27), s(16, 29), s(20, 28), s(22, 35), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 4), s(11, 9), s(18, 12), s(24, 20), s(28, 24), s(36, 25), s(40, 31), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 132), s(-13, 145), s(-13, 151), s(-13, 164), s(-14, 177), s(-15, 179), s(-16, 186), s(-15, 194), s(-16, 204), s(-15, 203), s(-20, 211), s(0, 196), s(-26, 236), s(12, 206), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 36);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(77, 60);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(123, 5);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(103, -30);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 36);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 17);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(65, -44);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 32);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(70, 33);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(91, 24);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(85, 11);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-32, 84);

pub const TEMPO_BONUS: ScoreTuple = s(34, 24);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-7, 13), s(4, -6), s(9, -3), s(12, -7), s(11, -6), s(11, -8), s(11, -7), s(12, -9), s(12, -9), s(12, -6), s(10, -5), s(11, -11), s(9, -7), s(11, -8), s(9, -9), s(8, -11), s(7, -5), s(6, -6), s(4, -7), s(5, -11), s(6, -12), s(2, -10), s(1, -13), s(-1, -13), s(0, -17), s(-12, -14), s(-13, -8), s(-33, -13), 
],
// Bishop attacks
[
  s(1, 10), s(7, -3), s(11, -5), s(10, -4), s(10, -3), s(12, -6), s(11, -7), s(10, -6), s(12, -9), s(11, -8), s(10, -8), s(9, -6), s(8, -8), s(8, -7), s(9, -9), s(5, -5), s(6, -5), s(5, -6), s(5, -7), s(2, -5), s(3, -5), s(2, -11), s(3, -6), s(1, -11), s(-6, -6), s(1, -17), s(14, -27), s(-6, -16), 
],
// Rook attacks
[
  s(8, 2), s(3, -1), s(7, -6), s(8, -9), s(7, -10), s(6, -8), s(7, -10), s(6, -8), s(7, -11), s(6, -10), s(6, -11), s(5, -12), s(4, -9), s(4, -7), s(3, -6), s(3, -3), s(2, -2), s(2, -1), s(2, 0), s(2, 0), s(1, 0), s(2, 0), s(0, 0), s(0, 0), s(0, 1), s(0, 0), s(-14, 6), s(2, -1), 
],
// Queen attacks
[
  s(-1, 6), s(1, -5), s(4, -8), s(6, -12), s(6, -8), s(6, -7), s(7, -10), s(7, -8), s(6, -10), s(9, -10), s(7, -7), s(9, -11), s(9, -11), s(10, -10), s(9, -10), s(10, -11), s(10, -12), s(11, -10), s(11, -8), s(17, -15), s(16, -12), s(12, -9), s(20, -12), s(17, -15), s(11, 0), s(14, -8), s(24, -7), s(15, -16), 
],
// Pawn attacks
[
  s(0, 10), s(5, 0), s(4, -3), s(1, -2), s(1, -2), s(1, -2), s(0, 0), s(1, -2), s(0, -2), s(0, -2), s(0, -1), s(0, -2), s(0, -4), s(1, -4), s(1, -3), s(1, -7), s(1, -6), s(2, -11), s(3, -10), s(0, -6), s(2, -10), s(3, -8), s(3, -7), s(7, -11), s(9, -8), s(-2, -1), s(32, -10), s(12, -9), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-6, 3), s(0, 2), s(-4, 1), s(-3, 0), s(-4, 2), s(-3, 2), s(-4, 3), s(-4, 1), s(-4, 1), s(-5, 3), s(-5, 3), s(-4, 2), s(-6, 5), s(-6, 5), s(-5, 6), s(-5, 9), s(-6, 8), s(-4, 9), s(-2, 11), s(-4, 10), s(-5, 12), s(-4, 13), s(-6, 14), s(-5, 17), s(-6, 16), s(-4, 24), s(-7, 17), s(-4, 28), 
],
// Bishop defenses
[
  s(3, 0), s(-2, 0), s(-4, 1), s(-5, 2), s(-3, 2), s(-4, 2), s(-5, 3), s(-4, 2), s(-4, 3), s(-4, 3), s(-3, 2), s(-3, 1), s(-4, 5), s(-4, 3), s(-3, 3), s(-2, 2), s(-1, 1), s(-1, 4), s(-3, 5), s(-1, 3), s(-1, 3), s(-2, 6), s(-5, 6), s(-4, 8), s(0, 7), s(-4, 10), s(0, 4), s(1, 15), 
],
// Rook defenses
[
  s(-26, 12), s(-2, 4), s(-5, 6), s(-5, 6), s(-3, 4), s(-5, 6), s(-3, 4), s(-4, 4), s(-4, 5), s(-3, 5), s(-3, 3), s(-2, 4), s(-1, 3), s(-2, 5), s(-1, 4), s(0, 3), s(0, 3), s(0, 4), s(0, 4), s(0, 5), s(-2, 7), s(-1, 6), s(-1, 6), s(-4, 7), s(-5, 7), s(-3, 6), s(6, 2), s(-2, 5), 
],
// Queen defenses
[
  s(1, -4), s(-2, 3), s(-1, 2), s(-1, 2), s(-2, 3), s(-2, 3), s(-3, 5), s(-2, 6), s(-3, 7), s(-3, 6), s(-2, 4), s(-2, 5), s(-2, 5), s(-2, 6), s(-1, 4), s(0, 6), s(0, 6), s(0, 5), s(0, 6), s(0, 6), s(0, 6), s(2, 5), s(-2, 11), s(-6, 14), s(11, 0), s(-4, 10), s(-13, 17), s(-7, 12), 
],
// Pawn defenses
[
  s(-15, -2), s(-22, 5), s(-17, 3), s(-14, 3), s(-12, 2), s(-12, 1), s(-11, 1), s(-10, 2), s(-8, 0), s(-6, -1), s(-4, -3), s(-4, -3), s(-2, -7), s(-1, -8), s(0, -12), s(0, -18), s(1, -18), s(1, -25), s(1, -28), s(2, -23), s(4, -27), s(7, -29), s(9, -28), s(13, -30), s(8, -20), s(32, -37), s(5, -25), s(8, -22), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(107, 40),
  s(83, 54),
  s(75, 63),
  s(80, 75),
  s(77, 83),
  s(73, 108),
  s(81, 127),
  s(84, 114),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-191, 3), s(48, -19), s(67, -13), s(74, -19), s(79, -18), s(76, -18), s(78, -19), s(80, -19), s(80, -38), s(76, -21), s(77, -21), s(72, -23), s(72, -19), s(72, -25), s(71, -22), s(70, -18), s(68, -17), s(68, -23), s(66, -15), s(64, -16), s(65, -15), s(58, -6), s(58, -9), s(57, -7), s(59, -9), s(54, -1), s(56, -6), s(53, -4), s(49, 3), s(48, 0), s(49, 1), s(46, 2), s(43, 4), s(47, 2), s(44, 3), s(38, 11), s(39, 13), s(38, 10), s(38, 9), s(33, 17), s(33, 13), s(33, 18), s(30, 19), s(29, 21), s(28, 19), s(27, 22), s(22, 26), s(23, 23), s(23, 26), s(21, 27), s(20, 28), s(19, 27), s(18, 29), s(16, 32), s(13, 34), s(13, 38), s(11, 36), s(5, 44), s(7, 41), s(4, 44), s(1, 45), s(4, 44), s(4, 46), s(-1, 50), s(0, 49), s(-1, 50), s(-4, 55), s(-5, 54), s(-8, 58), s(-4, 54), s(-9, 58), s(-13, 64), s(-11, 57), s(-9, 57), s(-19, 69), s(-19, 66), s(-17, 67), s(-19, 68), s(-18, 69), s(-21, 70), s(-23, 75), s(-22, 75), s(-28, 79), s(-30, 81), s(-25, 79), s(-31, 77), s(-28, 84), s(-34, 82), s(-32, 76), s(-34, 85), s(-37, 92), s(-39, 93), s(-40, 93), s(-41, 84), s(-37, 82), s(-41, 103), s(-43, 94), s(-44, 100), s(-48, 104), s(-43, 101), s(-48, 110), s(-49, 106), s(-40, 97), s(-46, 109), s(-49, 112), s(-57, 95), s(-48, 110), s(-44, 107), s(-53, 120), s(-53, 109), s(-54, 103), s(-46, 111), s(-48, 103), s(-48, 103), s(-46, 59), s(-45, 133), s(-62, 112), s(-67, 135), s(-56, 66), s(-51, 195), s(-38, 162), s(-57, 211), s(-55, 172), s(-63, 25), s(-50, 179), s(-36, 163), s(-36, -77), s(-95, 183), s(-33, 66), s(-121, 165), s(-68, 137), s(-121, 208), s(-18, 42), s(-130, 41), s(-93, -25), s(-115, -68), s(-91, 10), s(180, 108), s(-19, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(44, 25), s(29, 2), s(49, 3), s(47, 8), s(49, 18), s(47, 9), s(42, 29), s(44, 15), s(44, 20), s(37, 30), s(38, 29), s(43, 15), s(34, 32), s(40, 26), s(40, 24), s(26, 37), s(33, 30), s(41, 20), s(21, 38), s(29, 39), s(31, 26), s(24, 40), s(20, 41), s(34, 31), s(17, 44), s(23, 38), s(30, 39), s(20, 41), s(12, 50), s(29, 35), s(28, 42), s(12, 44), s(20, 48), s(21, 36), s(11, 52), s(18, 53), s(30, 35), s(-3, 43), s(6, 50), s(20, 36), s(13, 42), s(11, 45), s(2, 35), s(-2, 36), s(-6, 43), s(49, 70), s(-181, 66), s(10, 24), s(2, 116), s(73, -85), s(-2, -119), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];
