#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(209, 284), s(274, 320), s(272, 376), s(337, 343), s(429, 335), s(263, 342), s(310, 298), s(278, 236), 
  s(272, 319), s(309, 345), s(400, 309), s(358, 340), s(374, 319), s(393, 309), s(366, 318), s(331, 290), 
  s(290, 315), s(372, 320), s(379, 353), s(399, 346), s(400, 340), s(475, 321), s(404, 308), s(379, 287), 
  s(355, 321), s(376, 339), s(373, 369), s(425, 363), s(399, 367), s(430, 354), s(385, 343), s(397, 306), 
  s(346, 329), s(368, 331), s(381, 363), s(397, 366), s(397, 364), s(392, 361), s(414, 335), s(364, 329), 
  s(341, 313), s(348, 339), s(373, 337), s(375, 354), s(393, 358), s(380, 333), s(385, 321), s(345, 324), 
  s(326, 284), s(327, 305), s(343, 317), s(371, 319), s(369, 323), s(371, 312), s(362, 292), s(352, 294), 
  s(227, 283), s(323, 293), s(312, 294), s(329, 308), s(342, 301), s(333, 298), s(325, 302), s(336, 252), 
]),
// Bishop PST
Pst::new([
  s(378, 365), s(352, 361), s(262, 381), s(232, 386), s(290, 374), s(287, 373), s(348, 364), s(359, 352), 
  s(364, 356), s(376, 365), s(355, 356), s(337, 349), s(377, 346), s(407, 346), s(362, 357), s(340, 342), 
  s(385, 351), s(415, 347), s(414, 353), s(409, 343), s(426, 335), s(453, 343), s(427, 343), s(429, 335), 
  s(376, 350), s(401, 354), s(405, 366), s(448, 365), s(416, 370), s(434, 351), s(399, 346), s(396, 351), 
  s(384, 341), s(399, 352), s(408, 363), s(424, 370), s(431, 357), s(394, 361), s(400, 342), s(385, 336), 
  s(392, 336), s(411, 346), s(411, 360), s(410, 359), s(412, 365), s(422, 351), s(400, 349), s(396, 335), 
  s(408, 317), s(410, 323), s(413, 329), s(400, 341), s(409, 341), s(421, 335), s(429, 326), s(396, 316), 
  s(373, 318), s(401, 334), s(383, 334), s(378, 338), s(393, 335), s(373, 346), s(391, 329), s(383, 318), 
]),
// Rook PST
Pst::new([
  s(586, 653), s(606, 646), s(557, 667), s(610, 650), s(602, 652), s(570, 655), s(590, 644), s(609, 643), 
  s(559, 655), s(570, 656), s(595, 652), s(617, 644), s(625, 630), s(640, 633), s(584, 649), s(583, 645), 
  s(532, 646), s(567, 644), s(568, 644), s(582, 638), s(592, 630), s(621, 620), s(650, 617), s(594, 619), 
  s(509, 646), s(556, 632), s(548, 648), s(571, 632), s(575, 628), s(582, 632), s(577, 623), s(554, 628), 
  s(500, 638), s(513, 639), s(534, 637), s(546, 632), s(575, 616), s(546, 623), s(573, 612), s(523, 622), 
  s(504, 619), s(520, 626), s(533, 616), s(542, 613), s(542, 619), s(555, 606), s(558, 607), s(522, 602), 
  s(489, 621), s(524, 611), s(530, 614), s(541, 616), s(550, 606), s(552, 606), s(558, 598), s(468, 619), 
  s(516, 614), s(527, 615), s(540, 611), s(550, 606), s(553, 601), s(538, 609), s(512, 615), s(519, 591), 
]),
// Queen PST
Pst::new([
  s(1007, 1185), s(1038, 1194), s(1052, 1199), s(1079, 1190), s(1129, 1168), s(1119, 1172), s(1128, 1157), s(1091, 1194), 
  s(1002, 1042), s(970, 1089), s(1003, 1102), s(992, 1125), s(953, 1156), s(1051, 1073), s(1049, 1072), s(1090, 1046), 
  s(1018, 1026), s(1004, 1050), s(1026, 1048), s(1006, 1105), s(1058, 1078), s(1086, 1055), s(1085, 1017), s(1068, 1053), 
  s(988, 1061), s(1009, 1057), s(990, 1067), s(1001, 1096), s(1019, 1087), s(1040, 1067), s(1030, 1090), s(1032, 1067), 
  s(1013, 1027), s(990, 1074), s(1010, 1068), s(1002, 1108), s(1019, 1081), s(1009, 1072), s(1035, 1062), s(1017, 1075), 
  s(1005, 1022), s(1023, 1013), s(1020, 1050), s(1020, 1051), s(1022, 1073), s(1029, 1045), s(1033, 1051), s(1025, 1048), 
  s(1009, 994), s(1020, 1004), s(1033, 999), s(1041, 997), s(1044, 1011), s(1051, 1002), s(1035, 988), s(1049, 964), 
  s(1020, 990), s(1013, 990), s(1026, 987), s(1035, 983), s(1028, 998), s(1000, 997), s(1015, 982), s(1000, 966), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(196, 262), s(169, 267), s(161, 258), s(192, 234), s(161, 250), s(184, 231), s(120, 268), s(112, 279), 
  s(78, 171), s(75, 173), s(112, 163), s(113, 159), s(170, 142), s(188, 132), s(171, 157), s(131, 157), 
  s(74, 144), s(87, 131), s(98, 128), s(116, 107), s(125, 118), s(120, 119), s(107, 124), s(89, 129), 
  s(73, 123), s(68, 122), s(95, 114), s(120, 105), s(120, 107), s(114, 108), s(93, 106), s(86, 108), 
  s(80, 117), s(86, 115), s(101, 114), s(106, 122), s(119, 124), s(118, 119), s(127, 99), s(103, 104), 
  s(72, 127), s(84, 115), s(81, 130), s(102, 124), s(102, 137), s(134, 120), s(128, 101), s(92, 102), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-61, -121), s(39, -71), s(74, -52), s(-13, -30), s(-58, -8), s(-64, 12), s(39, -5), s(19, -49), 
  s(58, -37), s(7, 23), s(-38, 25), s(73, 10), s(1, 30), s(-44, 62), s(7, 36), s(-32, 9), 
  s(-23, 6), s(27, 27), s(76, 24), s(12, 29), s(46, 36), s(95, 59), s(120, 49), s(14, 8), 
  s(18, -12), s(-14, 39), s(-11, 45), s(-47, 58), s(-85, 65), s(-63, 64), s(-34, 52), s(-99, 16), 
  s(-123, 1), s(-16, 9), s(-54, 44), s(-118, 66), s(-136, 72), s(-100, 53), s(-93, 32), s(-120, 4), 
  s(12, -27), s(-9, 2), s(-60, 32), s(-99, 47), s(-78, 47), s(-72, 36), s(-24, 13), s(-39, -11), 
  s(67, -51), s(36, -17), s(-22, 12), s(-66, 27), s(-57, 28), s(-27, 15), s(31, -12), s(41, -41), 
  s(45, -98), s(77, -64), s(42, -38), s(-85, -1), s(2, -33), s(-33, -9), s(57, -50), s(58, -91), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(96, 162), s(69, 167), s(61, 158), s(92, 134), s(61, 150), s(84, 131), s(20, 168), s(12, 179), 
  s(70, 183), s(56, 178), s(25, 152), s(29, 115), s(-15, 121), s(5, 146), s(-32, 161), s(-41, 182), 
  s(25, 112), s(7, 103), s(13, 82), s(0, 76), s(-3, 63), s(36, 64), s(-22, 108), s(-17, 104), 
  s(4, 64), s(-8, 60), s(-28, 45), s(-22, 42), s(-35, 43), s(-25, 44), s(2, 64), s(11, 56), 
  s(6, 22), s(-8, 31), s(-28, 23), s(-39, 26), s(-24, 11), s(13, 6), s(-17, 37), s(26, 19), 
  s(1, 12), s(10, 19), s(2, 7), s(-29, 17), s(-19, 8), s(-12, 10), s(-2, 22), s(-9, 20), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-10, -221),
  s(18, -144),
  s(1, -62),
  s(10, -38),
  s(-4, -3),
  s(-6, -12),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(-32, 23),
  s(4, -19),
  s(-3, -24),
  s(-16, -13),
  s(-32, -17),
  s(-17, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(91, 224),
  s(143, 141),
  s(45, 50),
  s(19, 14),
  s(-5, -7),
  s(8, -9),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(38, 60);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(33, 41), s(35, 48), s(33, 51), s(40, 46), s(41, 50), s(43, 45), s(41, 41), s(57, 20), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(11, 30), s(19, 44), s(23, 54), s(27, 61), s(28, 66), s(31, 68), s(31, 66), s(26, 70), s(33, 59), s(42, 50), s(67, 41), s(11, 74), s(67, 21), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(7, 93), s(10, 110), s(17, 115), s(16, 127), s(21, 140), s(23, 147), s(26, 148), s(36, 149), s(36, 153), s(37, 156), s(44, 158), s(53, 159), s(59, 153), s(45, 153), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(45, 170), s(53, 176), s(56, 198), s(66, 201), s(70, 208), s(73, 213), s(75, 233), s(78, 240), s(84, 240), s(88, 245), s(91, 256), s(93, 254), s(98, 257), s(102, 256), s(103, 264), s(107, 270), s(122, 251), s(133, 248), s(162, 231), s(148, 242), s(195, 217), s(169, 209), s(206, 192), s(177, 174), s(179, 182), s(128, 179), s(123, 174), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(18, 29), s(29, 42), s(38, 47), s(51, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 14), s(13, 20), s(18, 25), s(22, 27), s(22, 28), s(25, 24), s(30, 31), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 3), s(8, 12), s(17, 14), s(27, 17), s(25, 26), s(35, 27), s(34, 37), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-11, 145), s(-12, 160), s(-10, 161), s(-11, 173), s(-11, 183), s(-13, 184), s(-12, 188), s(-15, 194), s(-20, 211), s(-4, 197), s(-29, 226), s(-8, 205), s(0, 228), s(81, 147), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(92, 27);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(88, 52);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(134, -3);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(104, -8);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(40, 39);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(84, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(64, -35);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 35);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(74, 28);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(83, 40);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(118, -16);

pub const TEMPO_BONUS: ScoreTuple = s(39, 26);

// KING SAFETY FEATURES
pub const ENEMY_VIRT_MOBILITY: [ScoreTuple; 28] = [
  s(-242, -126), s(-247, -344), s(-148, -367), s(-81, -176), s(-10, 117), s(51, -142), s(24, 133), s(60, 208), s(132, 101), s(123, 179), s(259, 84), s(99, 118), s(169, 77), s(156, 101), s(129, 104), s(159, 114), s(114, 102), s(169, 108), s(109, 108), s(147, 122), s(147, 112), s(224, 111), s(234, 113), s(217, 114), s(258, 228), s(229, 113), s(216, 245), s(223, 252), 
];

pub const ATTACKS: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(148, -62), s(126, 118), s(21, -1), s(74, 137), s(17, -127), 
];

pub const DEFENSES: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(-42, 61), s(-20, 0), s(-7, 17), s(-1, 58), s(-105, -106), 
];

pub const BIAS: ScoreTuple = s(0, 0);
