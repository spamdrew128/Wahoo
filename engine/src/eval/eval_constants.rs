#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
]),
// Bishop PST
Pst::new([
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
  s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), s(300, 300), 
]),
// Rook PST
Pst::new([
  s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), 
  s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), 
  s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), 
  s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), 
  s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), 
  s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), 
  s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), 
  s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), s(500, 500), 
]),
// Queen PST
Pst::new([
  s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), 
  s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), 
  s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), 
  s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), 
  s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), 
  s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), 
  s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), 
  s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), s(900, 900), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(0, 0);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(0, 0);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(0, 0);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(0, 0);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(0, 0);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(0, 0);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(0, 0);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(0, 0);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(0, 0);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(0, 0);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(0, 0);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(0, 0);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(0, 0);

pub const TEMPO_BONUS: ScoreTuple = s(-7, -36);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-54, -38), s(31, 902), s(-22, -44), s(80, 617), s(63, -121), s(173, -271), s(-37, 202), s(-189, -3), ],
  [s(-29, -50), s(-32, 780), s(-24, -32), s(97, 472), s(204, -79), s(164, -211), s(-21, 277), s(24, 5), ],
  [s(-70, -51), s(124, 490), s(375, -68), s(3821, 2216), s(-176, 706), s(2712, 2440), s(43, 321), s(102, -160), ],
  [s(-45, -41), s(-139, -13121), s(93, -44), s(97, 256), s(172, 63), s(1764, -136), s(1902, -49), s(-130, -2), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-69, -63), s(-5494, 175), s(-347, -71), s(-109, -119), s(-324, -92), s(260, 82), s(402, 120), s(-52, 124), ],
  [s(-42, -56), s(-10288, 168), s(-271, -53), s(-54, -154), s(-119, -137), s(175, 23), s(357, 41), s(-127, 5), ],
  [s(-37, -72), s(421, 95), s(-115, -60), s(-75, -782), s(-185, -38), s(455, 144), s(461, 774), s(-2509, -36), ],
  [s(-45, -65), s(86, -243), s(-8350, -53), s(-105, -134), s(21, -90), s(1523, 84), s(1681, -13930), s(313, -20), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(-59, -64), s(-146, 612), s(1259, -72), s(185, 184), s(919, 103), s(714, -182), s(487, 481), s(704, -1061), ],
  [s(-89, -86), s(145, 439), s(2206, -83), s(558, 432), s(1370, -524), s(-694, -577), s(-1304, 521), s(95, -712), ],
  [s(-87, -103), s(1769, 1357), s(2259, -100), s(411, 529), s(44, -245), s(-994, -507), s(-1660, 1080), s(-85, -369), ],
  [s(-75, -94), s(2554, 986), s(-725, -95), s(162, 606), s(-3173, 335), s(-2195, -404), s(-3199, 566), s(750, 249), ],
  [s(-70, -89), s(3542, 624), s(-1767, -82), s(-228, 1456), s(-2298, 819), s(-2876, -154), s(-3682, 746), s(976, 2741), ],
  [s(-81, -96), s(2711, 20), s(2206, -80), s(443, 526), s(6957, 1653), s(-2097, 120), s(-1285, 1039), s(-945, 2693), ],
  [s(-45, -69), s(2171, -99), s(3821, -77), s(-117, 599), s(6057, 2163), s(-981, 267), s(120, 683), s(-586, 2542), ],
  [s(-41, -1), s(2645, -273), s(1523, -63), s(-626, 1487), s(-167, 1183), s(761, 398), s(883, -473), s(-3432, 1736), ],
]);

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-37, -30), s(1276, 558), s(-495, -28), s(-316, -389), s(-191, 1235), s(-35, -231), s(397, 424), s(1748, -1422), ],
  [s(-54, 7), s(-1166, -354), s(-129, 3), s(46, -1027), s(-1059, 1287), s(2608, 238), s(2515, 106), s(-2639, -2395), ],
  [s(6, -21), s(301, 201), s(279, -30), s(-63, -711), s(34, 1150), s(688, -186), s(1583, 529), s(1776, -1668), ],
  [s(-64, -15), s(-967, 300), s(-16, -83), s(-498, -82), s(-662, 1334), s(686, 135), s(391, 13), s(-736, -695), ],
  [s(-16, -21), s(248, 219), s(-54, -19), s(1585, -315), s(-1087, 625), s(2574, 401), s(1102, 434), s(1022, -911), ],
  [s(-52, -56), s(-67, 21), s(39, -62), s(690, -235), s(-42, 992), s(369, 2), s(-38, 191), s(1661, -658), ],
  [s(-48, -81), s(-276, -294), s(278, -75), s(-19, -66), s(-283, 412), s(613, -16), s(291, 138), s(-432, -220), ],
  [s(-75, -81), s(-136, 402), s(-76, -76), s(53, 356), s(-167, 88), s(343, -49), s(272, 24), s(-389, -239), ],
  [s(-79, -40), s(-359, -64), s(114, -85), s(302, 271), s(78, 174), s(267, -126), s(1, -132), s(-478, -245), ],
  [s(-81, -72), s(-476, 78), s(54, -63), s(13, 365), s(-191, 23), s(430, -184), s(320, -161), s(-622, -462), ],
  [s(-92, -64), s(-366, 129), s(4, -72), s(-96, 413), s(-684, -207), s(652, -44), s(654, -232), s(-767, -476), ],
  [s(-58, -79), s(-116, 36), s(55, -70), s(252, 359), s(-201, -25), s(326, -182), s(218, -320), s(-559, -650), ],
  [s(-70, -67), s(-367, 125), s(25, -61), s(163, 566), s(-448, -120), s(385, -229), s(253, -370), s(-328, -730), ],
  [s(-88, -71), s(-185, -237), s(192, -62), s(155, 381), s(-1022, -277), s(448, -105), s(219, -380), s(-385, -650), ],
  [s(-85, -69), s(-54, -11), s(273, -73), s(227, 268), s(-400, -175), s(292, -252), s(123, -211), s(-404, -1014), ],
  [s(-76, -81), s(-270, 561), s(-100, -76), s(266, 912), s(-438, -303), s(339, -300), s(284, -340), s(-255, -905), ],
  [s(-81, -64), s(-146, -154), s(115, -62), s(238, 312), s(-1002, -275), s(680, -1), s(446, -185), s(-34, -830), ],
  [s(-92, -71), s(-42, 270), s(219, -69), s(115, 237), s(-468, -198), s(496, -115), s(450, 128), s(-271, -1120), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-43, -64), s(-269, -816), s(-484, -70), s(-172, -606), s(-34, -705), s(784, 285), s(1214, -91), s(533, 226), ],
  [s(-50, -59), s(11, -908), s(-587, -54), s(-196, -88), s(-1242, -1152), s(936, 258), s(1226, -481), s(954, 493), ],
  [s(-65, -53), s(-207, -288), s(-492, -49), s(-248, -110), s(-750, -784), s(620, 48), s(848, -350), s(816, 345), ],
  [s(-58, -69), s(-322, -257), s(-296, -68), s(-141, -25), s(-200, -429), s(529, 266), s(644, -89), s(208, 686), ],
  [s(-58, -65), s(-435, -948), s(-340, -58), s(-288, 80), s(-1355, -326), s(727, 338), s(794, -701), s(443, 567), ],
  [s(-59, -65), s(-517, -399), s(-468, -59), s(-58, 111), s(-460, -420), s(353, 82), s(404, -484), s(607, 461), ],
  [s(-68, -76), s(-555, 0), s(-388, -65), s(-187, 208), s(-453, -733), s(400, 115), s(575, -201), s(172, 736), ],
  [s(-90, -61), s(-245, 0), s(-319, -65), s(-463, 332), s(-696, -388), s(518, 285), s(697, -210), s(394, 1063), ],
  [s(-89, -71), s(-293, -225), s(-300, -71), s(-393, 293), s(-605, -815), s(399, 74), s(482, -238), s(454, 960), ],
  [s(-67, -55), s(-616, 117), s(-152, -67), s(-215, 529), s(-779, -988), s(170, -62), s(222, -404), s(-135, 1188), ],
  [s(-63, -73), s(-151, 257), s(-177, -78), s(-339, 518), s(-718, -739), s(511, 105), s(574, -101), s(133, 1269), ],
  [s(-43, -70), s(-128, 13), s(-64, -54), s(-238, 313), s(-458, -1054), s(229, -48), s(198, -40), s(141, 1194), ],
  [s(-20, -65), s(-232, 706), s(-96, -52), s(-140, 189), s(-449, -2273), s(-216, -398), s(49, 243), s(316, 1199), ],
  [s(-45, -51), s(-606, 182), s(-205, -65), s(-99, 288), s(-362, -1851), s(337, -65), s(647, 199), s(285, 1709), ],
  [s(-46, -57), s(17, -95), s(-424, -66), s(-376, -26), s(-418, -1917), s(280, -186), s(480, -217), s(-151, 1069), ],
  [s(-33, -43), s(-168, -113), s(-850, -54), s(2509, -450), s(137, -2923), s(528, -264), s(-210, 350), s(-242, 889), ],
  [s(4, -52), s(-7156, -53), s(-456, -47), s(-987, -128), s(-767, -2401), s(469, 17), s(964, -15), s(833, 1172), ],
  [s(-40, -73), s(-599, -418), s(30, -72), s(-571, -799), s(-440, -2805), s(344, -256), s(660, 32), s(-1324, 356), ],
];

pub const ATTACKING_PIECE_LOCATIONS: [[[ScoreTuple; 8]; 24]; 4] = [
[
  [s(-8, -8), s(-628, 422), s(564, 3), s(-204, -748), s(-1146, 167), s(1829, 445), s(519, 1483), s(1139, -862), ],
  [s(-15, -43), s(743, 1552), s(544, -20), s(-311, -619), s(-236, 1378), s(308, -472), s(-78, 1080), s(1551, -816), ],
  [s(-15, -20), s(-309, 2534), s(99, 11), s(97, -669), s(-810, 1213), s(1170, 197), s(171, 2028), s(2807, -1200), ],
  [s(-27, -49), s(972, -756), s(-127, 10), s(-51, -948), s(305, 613), s(1264, 951), s(941, 329), s(825, -1076), ],
  [s(-27, -17), s(326, 880), s(566, 27), s(-199, -323), s(-547, -11), s(641, -98), s(-55, 1232), s(2173, -260), ],
  [s(-39, 0), s(-100, 1250), s(273, 35), s(141, 47), s(637, 826), s(-88, -20), s(-214, 637), s(824, -672), ],
  [s(-50, -9), s(457, -1290), s(541, -17), s(-456, -1300), s(-1084, 843), s(779, 683), s(340, 392), s(1797, -811), ],
  [s(-41, 5), s(-47, -337), s(-135, 3), s(89, -571), s(31, 172), s(-81, 87), s(-403, 414), s(846, -429), ],
  [s(-21, -49), s(-1110, -213), s(-108, -54), s(-53, -665), s(-43, 1146), s(227, 373), s(201, 127), s(1101, -737), ],
  [s(-39, 29), s(-169, -194), s(-50, 10), s(-58, -308), s(392, 477), s(-40, 139), s(-279, 101), s(350, -644), ],
  [s(-64, -48), s(-392, 163), s(-163, -59), s(264, -352), s(1237, 744), s(114, 318), s(268, 154), s(250, -591), ],
  [s(-38, -46), s(133, -216), s(-13, -18), s(144, -583), s(369, 714), s(20, 240), s(-177, 334), s(386, -506), ],
  [s(-31, -71), s(-68, -128), s(196, -61), s(71, -513), s(307, 301), s(721, 8), s(611, 489), s(62, -655), ],
  [s(0, -38), s(-79, 437), s(-129, -36), s(121, 25), s(906, 287), s(346, 185), s(223, 269), s(-125, -307), ],
  [s(-77, -83), s(279, 396), s(-336, -56), s(356, -270), s(851, 190), s(-130, 51), s(-230, 467), s(110, -481), ],
  [s(-60, -78), s(-529, -204), s(-420, -93), s(250, -18), s(675, 367), s(318, -113), s(275, -353), s(-344, -577), ],
  [s(-74, -49), s(-149, 130), s(76, -7), s(70, 115), s(625, -219), s(85, -61), s(99, 4), s(10, -255), ],
  [s(-54, -86), s(61, 917), s(-6, -82), s(-43, -10), s(589, -196), s(232, 163), s(314, 681), s(-482, -276), ],
  [s(-46, -94), s(214, 383), s(-70, -87), s(35, -219), s(673, -59), s(420, 65), s(459, 559), s(-339, -348), ],
  [s(-70, -32), s(-366, 217), s(-93, -57), s(113, 276), s(409, -918), s(543, 52), s(514, 1), s(-746, -303), ],
  [s(-79, -45), s(-172, -242), s(-85, -67), s(180, -231), s(705, -588), s(212, 226), s(141, 305), s(-217, -401), ],
  [s(-73, -85), s(-477, -224), s(-201, -30), s(87, -27), s(619, 42), s(436, 290), s(428, -52), s(-480, -413), ],
  [s(-54, -7), s(-233, 383), s(-207, -64), s(134, 171), s(495, -888), s(402, 205), s(364, 247), s(-353, -262), ],
  [s(-54, -64), s(-381, 31), s(-187, -81), s(202, -276), s(360, -570), s(386, 171), s(372, 323), s(-672, -710), ],
],
[
  [s(-27, -17), s(326, 880), s(566, 27), s(-199, -323), s(-547, -11), s(641, -98), s(-55, 1232), s(2173, -260), ],
  [s(-39, 0), s(-100, 1250), s(273, 35), s(141, 47), s(637, 826), s(-88, -20), s(-214, 637), s(824, -672), ],
  [s(-50, -9), s(457, -1290), s(541, -17), s(-456, -1300), s(-1084, 843), s(779, 683), s(340, 392), s(1797, -811), ],
  [s(-41, 5), s(-47, -337), s(-135, 3), s(89, -571), s(31, 172), s(-81, 87), s(-403, 414), s(846, -429), ],
  [s(-21, -49), s(-1110, -213), s(-108, -54), s(-53, -665), s(-43, 1146), s(227, 373), s(201, 127), s(1101, -737), ],
  [s(-39, 29), s(-169, -194), s(-50, 10), s(-58, -308), s(392, 477), s(-40, 139), s(-279, 101), s(350, -644), ],
  [s(-64, -48), s(-392, 163), s(-163, -59), s(264, -352), s(1237, 744), s(114, 318), s(268, 154), s(250, -591), ],
  [s(-38, -46), s(133, -216), s(-13, -18), s(144, -583), s(369, 714), s(20, 240), s(-177, 334), s(386, -506), ],
  [s(-31, -71), s(-68, -128), s(196, -61), s(71, -513), s(307, 301), s(721, 8), s(611, 489), s(62, -655), ],
  [s(0, -38), s(-79, 437), s(-129, -36), s(121, 25), s(906, 287), s(346, 185), s(223, 269), s(-125, -307), ],
  [s(-77, -83), s(279, 396), s(-336, -56), s(356, -270), s(851, 190), s(-130, 51), s(-230, 467), s(110, -481), ],
  [s(-60, -78), s(-529, -204), s(-420, -93), s(250, -18), s(675, 367), s(318, -113), s(275, -353), s(-344, -577), ],
  [s(-74, -49), s(-149, 130), s(76, -7), s(70, 115), s(625, -219), s(85, -61), s(99, 4), s(10, -255), ],
  [s(-54, -86), s(61, 917), s(-6, -82), s(-43, -10), s(589, -196), s(232, 163), s(314, 681), s(-482, -276), ],
  [s(-46, -94), s(214, 383), s(-70, -87), s(35, -219), s(673, -59), s(420, 65), s(459, 559), s(-339, -348), ],
  [s(-70, -32), s(-366, 217), s(-93, -57), s(113, 276), s(409, -918), s(543, 52), s(514, 1), s(-746, -303), ],
  [s(-79, -45), s(-172, -242), s(-85, -67), s(180, -231), s(705, -588), s(212, 226), s(141, 305), s(-217, -401), ],
  [s(-73, -85), s(-477, -224), s(-201, -30), s(87, -27), s(619, 42), s(436, 290), s(428, -52), s(-480, -413), ],
  [s(-54, -7), s(-233, 383), s(-207, -64), s(134, 171), s(495, -888), s(402, 205), s(364, 247), s(-353, -262), ],
  [s(-54, -64), s(-381, 31), s(-187, -81), s(202, -276), s(360, -570), s(386, 171), s(372, 323), s(-672, -710), ],
  [s(-78, -61), s(-405, -736), s(18, -30), s(198, -465), s(609, 147), s(621, 558), s(525, 215), s(-214, -387), ],
  [s(-77, -71), s(-277, -396), s(-202, -52), s(402, -241), s(642, -896), s(366, 390), s(205, 316), s(-239, -280), ],
  [s(-80, -71), s(-274, -524), s(-77, -63), s(205, -151), s(539, -540), s(182, 601), s(124, 421), s(-112, 81), ],
  [s(-85, -81), s(-121, -528), s(-256, -74), s(-20, -202), s(452, -137), s(352, 313), s(455, 204), s(-1341, 86), ],
],
[
  [s(-21, -49), s(-1110, -213), s(-108, -54), s(-53, -665), s(-43, 1146), s(227, 373), s(201, 127), s(1101, -737), ],
  [s(-39, 29), s(-169, -194), s(-50, 10), s(-58, -308), s(392, 477), s(-40, 139), s(-279, 101), s(350, -644), ],
  [s(-64, -48), s(-392, 163), s(-163, -59), s(264, -352), s(1237, 744), s(114, 318), s(268, 154), s(250, -591), ],
  [s(-38, -46), s(133, -216), s(-13, -18), s(144, -583), s(369, 714), s(20, 240), s(-177, 334), s(386, -506), ],
  [s(-31, -71), s(-68, -128), s(196, -61), s(71, -513), s(307, 301), s(721, 8), s(611, 489), s(62, -655), ],
  [s(0, -38), s(-79, 437), s(-129, -36), s(121, 25), s(906, 287), s(346, 185), s(223, 269), s(-125, -307), ],
  [s(-77, -83), s(279, 396), s(-336, -56), s(356, -270), s(851, 190), s(-130, 51), s(-230, 467), s(110, -481), ],
  [s(-60, -78), s(-529, -204), s(-420, -93), s(250, -18), s(675, 367), s(318, -113), s(275, -353), s(-344, -577), ],
  [s(-74, -49), s(-149, 130), s(76, -7), s(70, 115), s(625, -219), s(85, -61), s(99, 4), s(10, -255), ],
  [s(-54, -86), s(61, 917), s(-6, -82), s(-43, -10), s(589, -196), s(232, 163), s(314, 681), s(-482, -276), ],
  [s(-46, -94), s(214, 383), s(-70, -87), s(35, -219), s(673, -59), s(420, 65), s(459, 559), s(-339, -348), ],
  [s(-70, -32), s(-366, 217), s(-93, -57), s(113, 276), s(409, -918), s(543, 52), s(514, 1), s(-746, -303), ],
  [s(-79, -45), s(-172, -242), s(-85, -67), s(180, -231), s(705, -588), s(212, 226), s(141, 305), s(-217, -401), ],
  [s(-73, -85), s(-477, -224), s(-201, -30), s(87, -27), s(619, 42), s(436, 290), s(428, -52), s(-480, -413), ],
  [s(-54, -7), s(-233, 383), s(-207, -64), s(134, 171), s(495, -888), s(402, 205), s(364, 247), s(-353, -262), ],
  [s(-54, -64), s(-381, 31), s(-187, -81), s(202, -276), s(360, -570), s(386, 171), s(372, 323), s(-672, -710), ],
  [s(-78, -61), s(-405, -736), s(18, -30), s(198, -465), s(609, 147), s(621, 558), s(525, 215), s(-214, -387), ],
  [s(-77, -71), s(-277, -396), s(-202, -52), s(402, -241), s(642, -896), s(366, 390), s(205, 316), s(-239, -280), ],
  [s(-80, -71), s(-274, -524), s(-77, -63), s(205, -151), s(539, -540), s(182, 601), s(124, 421), s(-112, 81), ],
  [s(-85, -81), s(-121, -528), s(-256, -74), s(-20, -202), s(452, -137), s(352, 313), s(455, 204), s(-1341, 86), ],
  [s(-58, -40), s(-51, -1725), s(-98, -24), s(284, -139), s(950, -807), s(-114, 361), s(-71, -354), s(-385, 352), ],
  [s(-72, -80), s(-138, 270), s(-235, -68), s(366, 546), s(647, -630), s(832, 1022), s(815, 260), s(-656, 26), ],
  [s(-70, -69), s(-420, -393), s(-11, -71), s(252, 186), s(883, 236), s(839, 931), s(862, 242), s(-223, 300), ],
  [s(-38, -78), s(90, 789), s(-254, -66), s(141, 542), s(899, -1069), s(668, 709), s(817, 879), s(-545, 863), ],
],
[
  [s(-31, -71), s(-68, -128), s(196, -61), s(71, -513), s(307, 301), s(721, 8), s(611, 489), s(62, -655), ],
  [s(0, -38), s(-79, 437), s(-129, -36), s(121, 25), s(906, 287), s(346, 185), s(223, 269), s(-125, -307), ],
  [s(-77, -83), s(279, 396), s(-336, -56), s(356, -270), s(851, 190), s(-130, 51), s(-230, 467), s(110, -481), ],
  [s(-60, -78), s(-529, -204), s(-420, -93), s(250, -18), s(675, 367), s(318, -113), s(275, -353), s(-344, -577), ],
  [s(-74, -49), s(-149, 130), s(76, -7), s(70, 115), s(625, -219), s(85, -61), s(99, 4), s(10, -255), ],
  [s(-54, -86), s(61, 917), s(-6, -82), s(-43, -10), s(589, -196), s(232, 163), s(314, 681), s(-482, -276), ],
  [s(-46, -94), s(214, 383), s(-70, -87), s(35, -219), s(673, -59), s(420, 65), s(459, 559), s(-339, -348), ],
  [s(-70, -32), s(-366, 217), s(-93, -57), s(113, 276), s(409, -918), s(543, 52), s(514, 1), s(-746, -303), ],
  [s(-79, -45), s(-172, -242), s(-85, -67), s(180, -231), s(705, -588), s(212, 226), s(141, 305), s(-217, -401), ],
  [s(-73, -85), s(-477, -224), s(-201, -30), s(87, -27), s(619, 42), s(436, 290), s(428, -52), s(-480, -413), ],
  [s(-54, -7), s(-233, 383), s(-207, -64), s(134, 171), s(495, -888), s(402, 205), s(364, 247), s(-353, -262), ],
  [s(-54, -64), s(-381, 31), s(-187, -81), s(202, -276), s(360, -570), s(386, 171), s(372, 323), s(-672, -710), ],
  [s(-78, -61), s(-405, -736), s(18, -30), s(198, -465), s(609, 147), s(621, 558), s(525, 215), s(-214, -387), ],
  [s(-77, -71), s(-277, -396), s(-202, -52), s(402, -241), s(642, -896), s(366, 390), s(205, 316), s(-239, -280), ],
  [s(-80, -71), s(-274, -524), s(-77, -63), s(205, -151), s(539, -540), s(182, 601), s(124, 421), s(-112, 81), ],
  [s(-85, -81), s(-121, -528), s(-256, -74), s(-20, -202), s(452, -137), s(352, 313), s(455, 204), s(-1341, 86), ],
  [s(-58, -40), s(-51, -1725), s(-98, -24), s(284, -139), s(950, -807), s(-114, 361), s(-71, -354), s(-385, 352), ],
  [s(-72, -80), s(-138, 270), s(-235, -68), s(366, 546), s(647, -630), s(832, 1022), s(815, 260), s(-656, 26), ],
  [s(-70, -69), s(-420, -393), s(-11, -71), s(252, 186), s(883, 236), s(839, 931), s(862, 242), s(-223, 300), ],
  [s(-38, -78), s(90, 789), s(-254, -66), s(141, 542), s(899, -1069), s(668, 709), s(817, 879), s(-545, 863), ],
  [s(-12, -18), s(-646, -6677), s(74, -31), s(12, 541), s(862, -432), s(886, 34), s(1218, 698), s(-126, 1898), ],
  [s(-82, -8), s(-815, -11523), s(-132, -49), s(63, -1222), s(749, -383), s(203, 152), s(375, 1694), s(-1491, -639), ],
  [s(-14, 40), s(-1290, -9789), s(195, -10), s(-250, -1068), s(779, 176), s(624, 787), s(853, 1347), s(-1714, 84), ],
  [s(-36, -6), s(-753, -6381), s(-314, -42), s(-29, -711), s(854, -860), s(827, 157), s(1161, 1484), s(-147, 358), ],
],
];

pub const DEFENDING_PIECE_LOCATIONS: [[[ScoreTuple; 8]; 24]; 4] = [
[
  [s(-17, 37), s(-4983, -580), s(-909, 28), s(2, 166), s(-440, -887), s(735, -82), s(662, -689), s(-3218, 176), ],
  [s(-40, -26), s(736, -418), s(-1017, -22), s(246, -903), s(-1003, -472), s(128, -156), s(-237, 813), s(1774, 456), ],
  [s(-42, 6), s(-7170, 832), s(-951, 24), s(-25, 575), s(-44, -1625), s(1173, 109), s(1183, 591), s(-2813, 1292), ],
  [s(-49, 11), s(-5970, 701), s(-326, -39), s(-368, 128), s(-337, -578), s(327, -88), s(585, 299), s(163, 426), ],
  [s(-37, 9), s(-8247, 9), s(-904, -72), s(-258, 167), s(-616, -847), s(524, -105), s(853, -402), s(-3745, 294), ],
  [s(-60, -2), s(-4695, 537), s(-279, -26), s(-170, -523), s(-363, -706), s(392, -47), s(400, 1004), s(1258, 462), ],
  [s(-31, -46), s(-6199, 59), s(-434, -65), s(-146, -62), s(-190, -633), s(569, -56), s(848, -132), s(-1048, 215), ],
  [s(-76, -58), s(-5392, 139), s(-347, -56), s(-463, 50), s(-423, -643), s(566, 81), s(888, 143), s(553, 852), ],
  [s(-69, -51), s(-332, -188), s(-589, -57), s(7, -282), s(-226, -433), s(501, -87), s(710, -70), s(-6699, 242), ],
  [s(-85, -75), s(82, 15), s(-484, -48), s(-216, -128), s(-353, -687), s(390, -3), s(598, 220), s(278, 888), ],
  [s(-46, -50), s(-196, 400), s(-279, -44), s(-369, 175), s(-207, -301), s(426, 83), s(683, 227), s(-4358, 1006), ],
  [s(-74, -57), s(-628, -202), s(-150, -51), s(-164, 116), s(-485, -458), s(348, 94), s(387, 94), s(628, 939), ],
  [s(-76, -52), s(-537, 500), s(-221, -60), s(-387, 293), s(-268, -384), s(-16, -32), s(260, 73), s(-342, 922), ],
  [s(-44, -51), s(-392, 386), s(-219, -56), s(-140, 154), s(-230, -55), s(-27, -56), s(88, 190), s(302, 838), ],
  [s(-26, -65), s(-366, 103), s(-186, -59), s(-272, 699), s(-537, -210), s(208, 14), s(360, -326), s(494, 1164), ],
  [s(-17, -44), s(-233, 137), s(-466, -55), s(-229, 386), s(-339, -530), s(211, -77), s(360, 4), s(132, 1154), ],
  [s(-64, -53), s(212, 284), s(-492, -54), s(-155, 406), s(-488, -50), s(149, -111), s(304, -46), s(-260, 1038), ],
  [s(-28, -62), s(-52, 344), s(-251, -53), s(-381, 792), s(-293, -91), s(-11, -34), s(243, -149), s(338, 1282), ],
  [s(-11, -56), s(-360, 98), s(-504, -49), s(-121, 440), s(-330, -214), s(138, -113), s(279, -306), s(-310, 889), ],
  [s(-28, -60), s(-37, 561), s(-39, -66), s(-50, 675), s(-267, -20), s(107, -200), s(226, -150), s(-441, 931), ],
  [s(-33, -47), s(-310, 787), s(320, -59), s(-273, 1104), s(-514, -44), s(160, -155), s(299, -153), s(1, 1242), ],
  [s(-50, -50), s(-305, 165), s(-571, -68), s(-266, 494), s(-533, -31), s(395, 106), s(510, -286), s(90, 935), ],
  [s(-39, -48), s(-120, 254), s(-420, -60), s(-213, 931), s(-309, 123), s(241, -162), s(533, -983), s(-733, 756), ],
  [s(-28, -42), s(-559, 687), s(622, -71), s(-450, 922), s(-651, 317), s(331, -69), s(541, -619), s(202, 749), ],
],
[
  [s(-37, 9), s(-8247, 9), s(-904, -72), s(-258, 167), s(-616, -847), s(524, -105), s(853, -402), s(-3745, 294), ],
  [s(-60, -2), s(-4695, 537), s(-279, -26), s(-170, -523), s(-363, -706), s(392, -47), s(400, 1004), s(1258, 462), ],
  [s(-31, -46), s(-6199, 59), s(-434, -65), s(-146, -62), s(-190, -633), s(569, -56), s(848, -132), s(-1048, 215), ],
  [s(-76, -58), s(-5392, 139), s(-347, -56), s(-463, 50), s(-423, -643), s(566, 81), s(888, 143), s(553, 852), ],
  [s(-69, -51), s(-332, -188), s(-589, -57), s(7, -282), s(-226, -433), s(501, -87), s(710, -70), s(-6699, 242), ],
  [s(-85, -75), s(82, 15), s(-484, -48), s(-216, -128), s(-353, -687), s(390, -3), s(598, 220), s(278, 888), ],
  [s(-46, -50), s(-196, 400), s(-279, -44), s(-369, 175), s(-207, -301), s(426, 83), s(683, 227), s(-4358, 1006), ],
  [s(-74, -57), s(-628, -202), s(-150, -51), s(-164, 116), s(-485, -458), s(348, 94), s(387, 94), s(628, 939), ],
  [s(-76, -52), s(-537, 500), s(-221, -60), s(-387, 293), s(-268, -384), s(-16, -32), s(260, 73), s(-342, 922), ],
  [s(-44, -51), s(-392, 386), s(-219, -56), s(-140, 154), s(-230, -55), s(-27, -56), s(88, 190), s(302, 838), ],
  [s(-26, -65), s(-366, 103), s(-186, -59), s(-272, 699), s(-537, -210), s(208, 14), s(360, -326), s(494, 1164), ],
  [s(-17, -44), s(-233, 137), s(-466, -55), s(-229, 386), s(-339, -530), s(211, -77), s(360, 4), s(132, 1154), ],
  [s(-64, -53), s(212, 284), s(-492, -54), s(-155, 406), s(-488, -50), s(149, -111), s(304, -46), s(-260, 1038), ],
  [s(-28, -62), s(-52, 344), s(-251, -53), s(-381, 792), s(-293, -91), s(-11, -34), s(243, -149), s(338, 1282), ],
  [s(-11, -56), s(-360, 98), s(-504, -49), s(-121, 440), s(-330, -214), s(138, -113), s(279, -306), s(-310, 889), ],
  [s(-28, -60), s(-37, 561), s(-39, -66), s(-50, 675), s(-267, -20), s(107, -200), s(226, -150), s(-441, 931), ],
  [s(-33, -47), s(-310, 787), s(320, -59), s(-273, 1104), s(-514, -44), s(160, -155), s(299, -153), s(1, 1242), ],
  [s(-50, -50), s(-305, 165), s(-571, -68), s(-266, 494), s(-533, -31), s(395, 106), s(510, -286), s(90, 935), ],
  [s(-39, -48), s(-120, 254), s(-420, -60), s(-213, 931), s(-309, 123), s(241, -162), s(533, -983), s(-733, 756), ],
  [s(-28, -42), s(-559, 687), s(622, -71), s(-450, 922), s(-651, 317), s(331, -69), s(541, -619), s(202, 749), ],
  [s(-24, -52), s(31, 254), s(-758, -65), s(-332, 898), s(-201, 158), s(534, 174), s(976, -1033), s(-196, 783), ],
  [s(-23, -50), s(643, 230), s(101, -53), s(-479, 687), s(-662, 192), s(251, -23), s(468, -729), s(-210, 659), ],
  [s(-46, -47), s(196, 258), s(112, -56), s(-249, 1092), s(-377, 250), s(354, -80), s(746, -1181), s(-821, 740), ],
  [s(-35, -57), s(773, 795), s(219, -49), s(-512, 985), s(-125, 302), s(321, 24), s(1232, -987), s(-629, 632), ],
],
[
  [s(-69, -51), s(-332, -188), s(-589, -57), s(7, -282), s(-226, -433), s(501, -87), s(710, -70), s(-6699, 242), ],
  [s(-85, -75), s(82, 15), s(-484, -48), s(-216, -128), s(-353, -687), s(390, -3), s(598, 220), s(278, 888), ],
  [s(-46, -50), s(-196, 400), s(-279, -44), s(-369, 175), s(-207, -301), s(426, 83), s(683, 227), s(-4358, 1006), ],
  [s(-74, -57), s(-628, -202), s(-150, -51), s(-164, 116), s(-485, -458), s(348, 94), s(387, 94), s(628, 939), ],
  [s(-76, -52), s(-537, 500), s(-221, -60), s(-387, 293), s(-268, -384), s(-16, -32), s(260, 73), s(-342, 922), ],
  [s(-44, -51), s(-392, 386), s(-219, -56), s(-140, 154), s(-230, -55), s(-27, -56), s(88, 190), s(302, 838), ],
  [s(-26, -65), s(-366, 103), s(-186, -59), s(-272, 699), s(-537, -210), s(208, 14), s(360, -326), s(494, 1164), ],
  [s(-17, -44), s(-233, 137), s(-466, -55), s(-229, 386), s(-339, -530), s(211, -77), s(360, 4), s(132, 1154), ],
  [s(-64, -53), s(212, 284), s(-492, -54), s(-155, 406), s(-488, -50), s(149, -111), s(304, -46), s(-260, 1038), ],
  [s(-28, -62), s(-52, 344), s(-251, -53), s(-381, 792), s(-293, -91), s(-11, -34), s(243, -149), s(338, 1282), ],
  [s(-11, -56), s(-360, 98), s(-504, -49), s(-121, 440), s(-330, -214), s(138, -113), s(279, -306), s(-310, 889), ],
  [s(-28, -60), s(-37, 561), s(-39, -66), s(-50, 675), s(-267, -20), s(107, -200), s(226, -150), s(-441, 931), ],
  [s(-33, -47), s(-310, 787), s(320, -59), s(-273, 1104), s(-514, -44), s(160, -155), s(299, -153), s(1, 1242), ],
  [s(-50, -50), s(-305, 165), s(-571, -68), s(-266, 494), s(-533, -31), s(395, 106), s(510, -286), s(90, 935), ],
  [s(-39, -48), s(-120, 254), s(-420, -60), s(-213, 931), s(-309, 123), s(241, -162), s(533, -983), s(-733, 756), ],
  [s(-28, -42), s(-559, 687), s(622, -71), s(-450, 922), s(-651, 317), s(331, -69), s(541, -619), s(202, 749), ],
  [s(-24, -52), s(31, 254), s(-758, -65), s(-332, 898), s(-201, 158), s(534, 174), s(976, -1033), s(-196, 783), ],
  [s(-23, -50), s(643, 230), s(101, -53), s(-479, 687), s(-662, 192), s(251, -23), s(468, -729), s(-210, 659), ],
  [s(-46, -47), s(196, 258), s(112, -56), s(-249, 1092), s(-377, 250), s(354, -80), s(746, -1181), s(-821, 740), ],
  [s(-35, -57), s(773, 795), s(219, -49), s(-512, 985), s(-125, 302), s(321, 24), s(1232, -987), s(-629, 632), ],
  [s(-31, -58), s(1052, 399), s(413, -62), s(-482, 902), s(-45, 515), s(224, 88), s(911, -885), s(-765, 605), ],
  [s(-23, -51), s(401, 432), s(311, -53), s(-577, 1061), s(-291, 406), s(536, -72), s(926, -1270), s(-356, 971), ],
  [s(-42, -55), s(1011, 469), s(890, -54), s(-597, 587), s(109, 927), s(470, 69), s(1308, -1170), s(427, 621), ],
  [s(-8, -51), s(803, 142), s(535, -46), s(-627, -174), s(63, 2391), s(417, 8), s(1229, -1199), s(-328, 514), ],
],
[
  [s(-76, -52), s(-537, 500), s(-221, -60), s(-387, 293), s(-268, -384), s(-16, -32), s(260, 73), s(-342, 922), ],
  [s(-44, -51), s(-392, 386), s(-219, -56), s(-140, 154), s(-230, -55), s(-27, -56), s(88, 190), s(302, 838), ],
  [s(-26, -65), s(-366, 103), s(-186, -59), s(-272, 699), s(-537, -210), s(208, 14), s(360, -326), s(494, 1164), ],
  [s(-17, -44), s(-233, 137), s(-466, -55), s(-229, 386), s(-339, -530), s(211, -77), s(360, 4), s(132, 1154), ],
  [s(-64, -53), s(212, 284), s(-492, -54), s(-155, 406), s(-488, -50), s(149, -111), s(304, -46), s(-260, 1038), ],
  [s(-28, -62), s(-52, 344), s(-251, -53), s(-381, 792), s(-293, -91), s(-11, -34), s(243, -149), s(338, 1282), ],
  [s(-11, -56), s(-360, 98), s(-504, -49), s(-121, 440), s(-330, -214), s(138, -113), s(279, -306), s(-310, 889), ],
  [s(-28, -60), s(-37, 561), s(-39, -66), s(-50, 675), s(-267, -20), s(107, -200), s(226, -150), s(-441, 931), ],
  [s(-33, -47), s(-310, 787), s(320, -59), s(-273, 1104), s(-514, -44), s(160, -155), s(299, -153), s(1, 1242), ],
  [s(-50, -50), s(-305, 165), s(-571, -68), s(-266, 494), s(-533, -31), s(395, 106), s(510, -286), s(90, 935), ],
  [s(-39, -48), s(-120, 254), s(-420, -60), s(-213, 931), s(-309, 123), s(241, -162), s(533, -983), s(-733, 756), ],
  [s(-28, -42), s(-559, 687), s(622, -71), s(-450, 922), s(-651, 317), s(331, -69), s(541, -619), s(202, 749), ],
  [s(-24, -52), s(31, 254), s(-758, -65), s(-332, 898), s(-201, 158), s(534, 174), s(976, -1033), s(-196, 783), ],
  [s(-23, -50), s(643, 230), s(101, -53), s(-479, 687), s(-662, 192), s(251, -23), s(468, -729), s(-210, 659), ],
  [s(-46, -47), s(196, 258), s(112, -56), s(-249, 1092), s(-377, 250), s(354, -80), s(746, -1181), s(-821, 740), ],
  [s(-35, -57), s(773, 795), s(219, -49), s(-512, 985), s(-125, 302), s(321, 24), s(1232, -987), s(-629, 632), ],
  [s(-31, -58), s(1052, 399), s(413, -62), s(-482, 902), s(-45, 515), s(224, 88), s(911, -885), s(-765, 605), ],
  [s(-23, -51), s(401, 432), s(311, -53), s(-577, 1061), s(-291, 406), s(536, -72), s(926, -1270), s(-356, 971), ],
  [s(-42, -55), s(1011, 469), s(890, -54), s(-597, 587), s(109, 927), s(470, 69), s(1308, -1170), s(427, 621), ],
  [s(-8, -51), s(803, 142), s(535, -46), s(-627, -174), s(63, 2391), s(417, 8), s(1229, -1199), s(-328, 514), ],
  [s(-19, -41), s(719, 565), s(-6176, -56), s(-387, 804), s(484, 947), s(643, 225), s(1560, -12059), s(384, 1019), ],
  [s(-21, -25), s(177, 1762), s(-7518, -61), s(-1463, 2180), s(-2279, 159), s(-243, 798), s(1421, -6440), s(-2538, 1344), ],
  [s(-19, -35), s(-2018, 1386), s(-7447, -66), s(-1633, 1490), s(-2702, 1032), s(426, 645), s(2081, -5830), s(-5147, -292), ],
  [s(-14, -53), s(-625, 2061), s(-7545, -68), s(-1622, 1473), s(-2798, 844), s(-729, 812), s(775, -6629), s(-8723, 198), ],
],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(-88, -88), s(1492, 3384), s(2536, -83), s(712, 7591), s(1760, 1008), s(-4321, -1500), s(-3661, 4315), s(597, 441), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(-55, 20), s(677, -1032), s(-945, -47), s(-1631, 1852), s(845, 914), s(2484, -1759), s(-2330, 1406), s(727, -1109), ];

pub const OUTPUT_BIAS: ScoreTuple = s(0, 0);

/*
fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
desc: startpos
output: S(-363.727462139771, 1271.9279874561716) - S(-363.727462139771, 1271.9279874561716)
= S(0, 0)

fen: r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1
desc: kiwipete
output: S(-155.44729769766877, 802.9037118109442) - S(-337.4903726778282, 279.96672148983447)
= S(182.04307498015942, 522.9369903211098)

fen: r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7
desc: fried liver attack
output: S(-225.5370737384141, 677.486150763069) - S(-136.17766736728902, 627.4504585059195)
= S(-89.35940637112509, 50.035692257149435)

fen: 1r2r1k1/pbp1qpp1/1p1p4/4nPR1/4P3/P1N4P/1PPQB3/1K1R4 w - - 1 24
desc: wahoo vs akimbo
output: S(57.6406491797851, 513.5130716578019) - S(-247.7971677488481, 663.599003436349)
= S(305.4378169286332, -150.0859317785471)

fen: 2kr3r/ppp1qppp/2b2n2/4p3/4P3/P1P2Q2/P1B2PPP/R1B2RK1 w - - 7 14
output: S(-248.1132059518842, 357.15532101032557) - S(-283.00067637223856, 845.292033574409)
= S(34.88747042035436, -488.1367125640834)

fen: rnbq1b1r/ppPknQ1p/3pp3/1B6/5pp1/BP2P3/P1PK1PPP/RN4NR b - - 4 11
output: S(-177.012630695775, 1118.7069814459758) - S(-377.5328498936927, 1239.373652559234)
= S(200.5202191979177, -120.66667111325819)

fen: 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1
output: S(-243.72201630367906, 1162.6232249484979) - S(-533.7320324751207, 1204.269944728282)
= S(290.01001617144163, -41.646719779784235)

fen: 8/3kp1p1/8/1p6/4PP2/5K2/1P6/8 w - - 0 1
output: S(-166.13835120555405, 1068.1947935928906) - S(-214.46515453009624, 1168.0671471739893)
= S(48.3268033245422, -99.87235358109865)

fen: 2k1n3/3bp1p1/8/1p6/4PP2/5K2/1P2R3/8 w - - 0 1
output: S(-64.7702046138702, 1010.8067720159306) - S(-186.65803661859178, 1192.8032849337)
= S(121.88783200472157, -181.99651291776945)

fen: 8/8/3bk2p/1r2p1pP/p1p3P1/P1B1K3/1PP5/5R2 b - - 25 52
output: S(-596.0358362724769, 1154.2150728361134) - S(-445.9115684884065, 1096.2325579537128)
= S(-150.1242677840704, 57.982514882400665)

*/
