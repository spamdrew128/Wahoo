#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [[Pst; NUM_PIECES as usize]; 2] = [
[
// Knight PST
Pst::new([
  s(220, 255), s(225, 326), s(219, 353), s(343, 346), s(293, 359), s(260, 358), s(185, 348), s(167, 290), 
  s(287, 304), s(321, 324), s(348, 317), s(345, 328), s(343, 332), s(342, 330), s(315, 342), s(299, 316), 
  s(327, 308), s(338, 329), s(397, 333), s(355, 352), s(370, 349), s(374, 348), s(354, 320), s(316, 308), 
  s(359, 316), s(350, 349), s(389, 361), s(377, 368), s(394, 368), s(366, 365), s(350, 341), s(342, 322), 
  s(343, 334), s(365, 339), s(371, 359), s(373, 370), s(372, 369), s(357, 368), s(350, 338), s(331, 332), 
  s(330, 325), s(352, 329), s(358, 335), s(367, 356), s(351, 359), s(347, 338), s(332, 330), s(320, 311), 
  s(328, 308), s(327, 310), s(343, 321), s(346, 327), s(343, 322), s(323, 323), s(318, 304), s(305, 289), 
  s(310, 283), s(304, 315), s(323, 300), s(320, 310), s(315, 306), s(300, 295), s(301, 314), s(257, 277), 
]),
// Bishop PST
Pst::new([
  s(331, 366), s(298, 391), s(278, 383), s(257, 390), s(250, 392), s(244, 390), s(323, 377), s(340, 386), 
  s(305, 358), s(308, 381), s(346, 370), s(331, 361), s(316, 364), s(363, 357), s(369, 360), s(347, 354), 
  s(362, 365), s(367, 368), s(382, 370), s(358, 367), s(380, 348), s(380, 365), s(384, 357), s(368, 359), 
  s(356, 358), s(365, 360), s(391, 369), s(387, 378), s(409, 377), s(379, 367), s(371, 366), s(351, 358), 
  s(370, 336), s(355, 365), s(371, 370), s(393, 375), s(394, 373), s(374, 374), s(369, 359), s(358, 348), 
  s(375, 344), s(384, 351), s(385, 363), s(382, 372), s(379, 370), s(386, 365), s(383, 360), s(363, 341), 
  s(380, 334), s(400, 341), s(394, 344), s(376, 353), s(371, 350), s(387, 339), s(380, 332), s(384, 337), 
  s(376, 323), s(376, 337), s(353, 356), s(363, 343), s(352, 342), s(358, 347), s(383, 349), s(356, 328), 
]),
// Rook PST
Pst::new([
  s(588, 630), s(529, 654), s(562, 651), s(600, 630), s(571, 646), s(555, 651), s(598, 633), s(562, 646), 
  s(562, 630), s(562, 636), s(576, 641), s(555, 639), s(577, 637), s(555, 649), s(546, 644), s(542, 642), 
  s(548, 620), s(602, 620), s(565, 623), s(566, 628), s(544, 633), s(540, 634), s(551, 632), s(527, 633), 
  s(503, 630), s(524, 629), s(525, 636), s(540, 629), s(534, 628), s(529, 637), s(533, 625), s(504, 635), 
  s(491, 621), s(529, 619), s(498, 632), s(530, 623), s(524, 624), s(509, 628), s(499, 626), s(492, 622), 
  s(504, 600), s(533, 605), s(520, 607), s(523, 609), s(513, 611), s(513, 604), s(505, 608), s(493, 607), 
  s(467, 606), s(545, 585), s(515, 602), s(524, 599), s(520, 599), s(515, 603), s(502, 602), s(482, 601), 
  s(488, 590), s(483, 611), s(508, 602), s(518, 597), s(516, 596), s(508, 601), s(504, 599), s(500, 605), 
]),
// Queen PST
Pst::new([
  s(982, 1201), s(1046, 1157), s(995, 1232), s(982, 1246), s(995, 1234), s(972, 1248), s(965, 1222), s(927, 1246), 
  s(1013, 1065), s(964, 1098), s(968, 1135), s(924, 1169), s(940, 1147), s(966, 1098), s(949, 1098), s(962, 1082), 
  s(983, 1059), s(992, 1055), s(977, 1096), s(974, 1104), s(953, 1117), s(974, 1077), s(958, 1061), s(973, 1054), 
  s(969, 1063), s(969, 1083), s(968, 1081), s(962, 1092), s(957, 1103), s(963, 1070), s(953, 1074), s(959, 1062), 
  s(967, 1044), s(969, 1059), s(956, 1073), s(959, 1105), s(952, 1102), s(952, 1087), s(953, 1066), s(954, 1041), 
  s(966, 1029), s(976, 1043), s(973, 1051), s(954, 1089), s(957, 1080), s(960, 1069), s(965, 1046), s(958, 1032), 
  s(957, 987), s(968, 997), s(977, 999), s(971, 1035), s(971, 1034), s(970, 1023), s(960, 1032), s(963, 1016), 
  s(949, 988), s(948, 968), s(939, 1012), s(953, 1014), s(963, 995), s(953, 1007), s(947, 1021), s(946, 1023), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(104, 262), s(157, 234), s(180, 240), s(176, 217), s(146, 218), s(148, 205), s(113, 237), s(130, 233), 
  s(120, 163), s(143, 163), s(157, 144), s(124, 132), s(118, 128), s(126, 137), s(92, 149), s(86, 154), 
  s(85, 135), s(91, 125), s(108, 119), s(108, 112), s(99, 112), s(86, 122), s(75, 127), s(65, 137), 
  s(85, 110), s(82, 106), s(104, 104), s(101, 107), s(99, 107), s(83, 114), s(66, 114), s(61, 116), 
  s(93, 104), s(106, 96), s(104, 111), s(96, 122), s(93, 122), s(83, 117), s(74, 113), s(61, 116), 
  s(87, 103), s(118, 97), s(121, 115), s(82, 138), s(83, 131), s(71, 129), s(70, 119), s(61, 126), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(8, 8), s(-67, 93), s(-49, 100), s(-73, 111), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-89, 150), s(-42, 180), s(-96, 205), s(-10, 192), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-94, 96), s(2, 116), s(2, 130), s(-70, 147), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-105, 24), s(-52, 50), s(-43, 53), s(-84, 64), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-127, -10), s(-55, 2), s(-31, 10), s(-60, 26), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-62, -33), s(-10, -23), s(-12, -14), s(-16, -2), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(11, -63), s(17, -42), s(-13, -29), s(-30, -19), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(36, -107), s(37, -70), s(7, -53), s(7, -55), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]),
],
[
// Knight PST
Pst::new([
  s(167, 290), s(185, 348), s(260, 358), s(293, 359), s(343, 346), s(219, 353), s(225, 326), s(220, 255), 
  s(299, 316), s(315, 342), s(342, 330), s(343, 332), s(345, 328), s(348, 317), s(321, 324), s(287, 304), 
  s(316, 308), s(354, 320), s(374, 348), s(370, 349), s(355, 352), s(397, 333), s(338, 329), s(327, 308), 
  s(342, 322), s(350, 341), s(366, 365), s(394, 368), s(377, 368), s(389, 361), s(350, 349), s(359, 316), 
  s(331, 332), s(350, 338), s(357, 368), s(372, 369), s(373, 370), s(371, 359), s(365, 339), s(343, 334), 
  s(320, 311), s(332, 330), s(347, 338), s(351, 359), s(367, 356), s(358, 335), s(352, 329), s(330, 325), 
  s(305, 289), s(318, 304), s(323, 323), s(343, 322), s(346, 327), s(343, 321), s(327, 310), s(328, 308), 
  s(257, 277), s(301, 314), s(300, 295), s(315, 306), s(320, 310), s(323, 300), s(304, 315), s(310, 283), 
]),
// Bishop PST
Pst::new([
  s(340, 386), s(323, 377), s(244, 390), s(250, 392), s(257, 390), s(278, 383), s(298, 391), s(331, 366), 
  s(347, 354), s(369, 360), s(363, 357), s(316, 364), s(331, 361), s(346, 370), s(308, 381), s(305, 358), 
  s(368, 359), s(384, 357), s(380, 365), s(380, 348), s(358, 367), s(382, 370), s(367, 368), s(362, 365), 
  s(351, 358), s(371, 366), s(379, 367), s(409, 377), s(387, 378), s(391, 369), s(365, 360), s(356, 358), 
  s(358, 348), s(369, 359), s(374, 374), s(394, 373), s(393, 375), s(371, 370), s(355, 365), s(370, 336), 
  s(363, 341), s(383, 360), s(386, 365), s(379, 370), s(382, 372), s(385, 363), s(384, 351), s(375, 344), 
  s(384, 337), s(380, 332), s(387, 339), s(371, 350), s(376, 353), s(394, 344), s(400, 341), s(380, 334), 
  s(356, 328), s(383, 349), s(358, 347), s(352, 342), s(363, 343), s(353, 356), s(376, 337), s(376, 323), 
]),
// Rook PST
Pst::new([
  s(562, 646), s(598, 633), s(555, 651), s(571, 646), s(600, 630), s(562, 651), s(529, 654), s(588, 630), 
  s(542, 642), s(546, 644), s(555, 649), s(577, 637), s(555, 639), s(576, 641), s(562, 636), s(562, 630), 
  s(527, 633), s(551, 632), s(540, 634), s(544, 633), s(566, 628), s(565, 623), s(602, 620), s(548, 620), 
  s(504, 635), s(533, 625), s(529, 637), s(534, 628), s(540, 629), s(525, 636), s(524, 629), s(503, 630), 
  s(492, 622), s(499, 626), s(509, 628), s(524, 624), s(530, 623), s(498, 632), s(529, 619), s(491, 621), 
  s(493, 607), s(505, 608), s(513, 604), s(513, 611), s(523, 609), s(520, 607), s(533, 605), s(504, 600), 
  s(482, 601), s(502, 602), s(515, 603), s(520, 599), s(524, 599), s(515, 602), s(545, 585), s(467, 606), 
  s(500, 605), s(504, 599), s(508, 601), s(516, 596), s(518, 597), s(508, 602), s(483, 611), s(488, 590), 
]),
// Queen PST
Pst::new([
  s(927, 1246), s(965, 1222), s(972, 1248), s(995, 1234), s(982, 1246), s(995, 1232), s(1046, 1157), s(982, 1201), 
  s(962, 1082), s(949, 1098), s(966, 1098), s(940, 1147), s(924, 1169), s(968, 1135), s(964, 1098), s(1013, 1065), 
  s(973, 1054), s(958, 1061), s(974, 1077), s(953, 1117), s(974, 1104), s(977, 1096), s(992, 1055), s(983, 1059), 
  s(959, 1062), s(953, 1074), s(963, 1070), s(957, 1103), s(962, 1092), s(968, 1081), s(969, 1083), s(969, 1063), 
  s(954, 1041), s(953, 1066), s(952, 1087), s(952, 1102), s(959, 1105), s(956, 1073), s(969, 1059), s(967, 1044), 
  s(958, 1032), s(965, 1046), s(960, 1069), s(957, 1080), s(954, 1089), s(973, 1051), s(976, 1043), s(966, 1029), 
  s(963, 1016), s(960, 1032), s(970, 1023), s(971, 1034), s(971, 1035), s(977, 999), s(968, 997), s(957, 987), 
  s(946, 1023), s(947, 1021), s(953, 1007), s(963, 995), s(953, 1014), s(939, 1012), s(948, 968), s(949, 988), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(130, 233), s(113, 237), s(148, 205), s(146, 218), s(176, 217), s(180, 240), s(157, 234), s(104, 262), 
  s(86, 154), s(92, 149), s(126, 137), s(118, 128), s(124, 132), s(157, 144), s(143, 163), s(120, 163), 
  s(65, 137), s(75, 127), s(86, 122), s(99, 112), s(108, 112), s(108, 119), s(91, 125), s(85, 135), 
  s(61, 116), s(66, 114), s(83, 114), s(99, 107), s(101, 107), s(104, 104), s(82, 106), s(85, 110), 
  s(61, 116), s(74, 113), s(83, 117), s(93, 122), s(96, 122), s(104, 111), s(106, 96), s(93, 104), 
  s(61, 126), s(70, 119), s(71, 129), s(83, 131), s(82, 138), s(121, 115), s(118, 97), s(87, 103), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-73, 111), s(-49, 100), s(-67, 93), s(8, 8), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-10, 192), s(-96, 205), s(-42, 180), s(-89, 150), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-70, 147), s(2, 130), s(2, 116), s(-94, 96), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-84, 64), s(-43, 53), s(-52, 50), s(-105, 24), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-60, 26), s(-31, 10), s(-55, 2), s(-127, -10), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-16, -2), s(-12, -14), s(-10, -23), s(-62, -33), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-30, -19), s(-13, -29), s(17, -42), s(11, -63), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(7, -55), s(7, -53), s(37, -70), s(36, -107), 
]),
],
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(84, 138), s(99, 123), s(65, 144), s(104, 106), s(13, 132), s(57, 98), s(-46, 149), s(-51, 165), 
  s(44, 142), s(45, 140), s(26, 122), s(34, 107), s(33, 108), s(32, 102), s(-14, 119), s(-43, 143), 
  s(35, 70), s(29, 68), s(29, 59), s(12, 58), s(8, 57), s(34, 45), s(-6, 72), s(-10, 67), 
  s(21, 34), s(8, 42), s(-9, 38), s(-2, 33), s(-14, 31), s(7, 24), s(16, 39), s(0, 36), 
  s(12, 4), s(-5, 27), s(-23, 18), s(-19, 13), s(-12, 6), s(10, 5), s(1, 26), s(12, 9), 
  s(0, 20), s(-3, 21), s(-13, 5), s(-8, 0), s(0, -3), s(4, 0), s(4, 6), s(-3, 11), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-46, -178),
  s(0, -110),
  s(-5, -45),
  s(-14, -16),
  s(-11, 5),
  s(-8, 1),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(61, -28),
  s(12, -31),
  s(-1, -27),
  s(-15, -16),
  s(-23, -20),
  s(-12, -20),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(15, 376),
  s(181, 158),
  s(52, 49),
  s(18, 15),
  s(-4, -4),
  s(3, -7),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 67);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(23, 56), s(27, 72), s(27, 75), s(30, 75), s(29, 79), s(30, 75), s(29, 72), s(27, 63), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(7, 37), s(15, 57), s(18, 68), s(22, 78), s(23, 85), s(24, 89), s(23, 91), s(19, 95), s(21, 91), s(22, 86), s(28, 87), s(-19, 116), s(26, 75), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 113), s(1, 131), s(1, 154), s(0, 163), s(2, 175), s(3, 181), s(4, 188), s(9, 192), s(10, 197), s(12, 199), s(15, 205), s(20, 208), s(31, 202), s(28, 199), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(55, 216), s(54, 229), s(57, 259), s(60, 271), s(62, 279), s(65, 281), s(66, 301), s(68, 307), s(70, 306), s(73, 308), s(73, 320), s(75, 314), s(79, 319), s(77, 324), s(82, 324), s(79, 329), s(89, 324), s(93, 324), s(113, 306), s(118, 307), s(166, 274), s(148, 274), s(177, 253), s(225, 238), s(282, 195), s(206, 232), s(203, 199), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(11, 27), s(19, 38), s(28, 45), s(35, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(2, 15), s(8, 20), s(12, 23), s(15, 28), s(15, 30), s(18, 29), s(21, 38), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 4), s(11, 8), s(19, 13), s(24, 20), s(28, 25), s(35, 26), s(39, 32), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 135), s(-11, 147), s(-11, 152), s(-11, 165), s(-11, 178), s(-11, 180), s(-11, 187), s(-11, 194), s(-12, 205), s(-10, 201), s(-15, 209), s(3, 193), s(-19, 230), s(21, 192), 
];

pub const PAWN_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(98, 87), s(75, 30)];
pub const PAWN_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(94, 68), s(74, 58)];
pub const PAWN_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(166, 133), s(109, 3)];
pub const PAWN_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(234, 112), s(99, -34)];
pub const KNIGHT_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(36, 31), s(39, 38)];
pub const KNIGHT_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(63, 72), s(82, 15)];
pub const KNIGHT_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(112, 237), s(64, -39)];
pub const BISHOP_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(18, 36), s(26, 31)];
pub const BISHOP_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(84, 95), s(66, 32)];
pub const BISHOP_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(122, 217), s(89, 24)];
pub const ROOK_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(117, 394), s(84, 6)];

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-26, 81);

pub const TEMPO_BONUS: ScoreTuple = s(34, 23);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-4, 10), s(5, -7), s(9, -3), s(12, -6), s(11, -5), s(11, -5), s(10, -4), s(11, -6), s(12, -6), s(11, -3), s(9, -2), s(10, -4), s(7, -1), s(10, -3), s(8, -4), s(7, -3), s(6, -2), s(3, 0), s(4, -5), s(4, -6), s(8, -9), s(3, -8), s(3, -10), s(3, -14), s(0, -15), s(2, -21), s(0, -16), s(-29, -14), 
],
// Bishop attacks
[
  s(3, 7), s(7, -4), s(11, -5), s(10, -4), s(10, -2), s(11, -4), s(9, -4), s(10, -5), s(12, -6), s(10, -5), s(10, -6), s(9, -5), s(9, -6), s(8, -5), s(9, -7), s(6, -6), s(9, -7), s(6, -6), s(6, -6), s(3, -5), s(3, -4), s(4, -10), s(5, -7), s(3, -10), s(-1, -8), s(6, -16), s(5, -13), s(-7, -16), 
],
// Rook attacks
[
  s(5, 2), s(3, -2), s(5, -5), s(6, -6), s(5, -6), s(5, -5), s(5, -7), s(4, -4), s(6, -7), s(5, -6), s(5, -6), s(5, -7), s(3, -4), s(3, -4), s(3, -3), s(3, -2), s(2, -1), s(1, -1), s(1, 0), s(1, 0), s(0, 0), s(1, 0), s(-1, 0), s(0, 0), s(-1, 0), s(-7, 1), s(-10, 3), s(2, -2), 
],
// Queen attacks
[
  s(-1, 4), s(1, -4), s(3, -7), s(5, -8), s(4, -6), s(3, -3), s(4, -5), s(5, -4), s(5, -6), s(6, -3), s(4, 0), s(6, -1), s(6, 0), s(8, -1), s(6, 0), s(8, -4), s(8, -2), s(10, -4), s(9, -2), s(14, -5), s(14, -5), s(8, -2), s(25, -11), s(15, -11), s(11, -2), s(13, -5), s(-14, 11), s(7, -9), 
],
// Pawn attacks
[
  s(0, 6), s(6, -2), s(4, -5), s(2, -4), s(1, -4), s(2, -4), s(0, -2), s(1, -4), s(0, -3), s(0, -2), s(0, -3), s(1, -3), s(0, -2), s(1, -3), s(0, -2), s(1, -3), s(2, -3), s(2, -3), s(4, -4), s(2, -3), s(5, -6), s(6, -6), s(7, -7), s(9, -8), s(11, -7), s(4, -5), s(27, -14), s(20, -13), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-6, 5), s(-1, 3), s(-4, 3), s(-3, 2), s(-4, 3), s(-3, 3), s(-3, 3), s(-3, 1), s(-3, 2), s(-4, 2), s(-4, 2), s(-3, 0), s(-5, 3), s(-5, 3), s(-3, 2), s(-5, 4), s(-5, 4), s(-2, 1), s(-2, 5), s(-2, 4), s(-5, 6), s(-1, 7), s(-5, 8), s(-3, 11), s(-7, 12), s(-9, 18), s(-3, 12), s(-5, 24), 
],
// Bishop defenses
[
  s(0, 1), s(-2, 0), s(-4, 2), s(-5, 2), s(-3, 2), s(-3, 2), s(-5, 3), s(-3, 2), s(-4, 2), s(-4, 3), s(-3, 1), s(-3, 1), s(-4, 3), s(-4, 2), s(-3, 2), s(-2, 0), s(-3, 1), s(-1, 0), s(-3, 2), s(0, 0), s(0, 0), s(-1, 2), s(-5, 3), s(0, 2), s(2, 3), s(-2, 5), s(0, 0), s(7, 9), 
],
// Rook defenses
[
  s(-22, 12), s(-4, 4), s(-5, 6), s(-5, 5), s(-4, 4), s(-5, 5), s(-3, 4), s(-4, 4), s(-4, 5), s(-4, 4), s(-3, 3), s(-3, 4), s(-1, 2), s(-3, 5), s(-2, 3), s(-2, 2), s(0, 1), s(-1, 2), s(-1, 3), s(-1, 3), s(-4, 4), s(-1, 3), s(-2, 4), s(-3, 4), s(-5, 5), s(-6, 4), s(4, 1), s(-2, 3), 
],
// Queen defenses
[
  s(2, -9), s(-3, 2), s(-2, 1), s(-2, 2), s(-3, 2), s(-3, 3), s(-3, 4), s(-3, 5), s(-4, 7), s(-4, 6), s(-3, 5), s(-3, 5), s(-2, 3), s(-2, 3), s(0, 1), s(-1, 3), s(0, 0), s(0, 2), s(2, 0), s(1, 0), s(3, 0), s(5, -1), s(-1, 7), s(0, 5), s(13, 0), s(12, 0), s(5, 5), s(2, 2), 
],
// Pawn defenses
[
  s(-10, -4), s(-16, 3), s(-12, 1), s(-10, 2), s(-8, 0), s(-8, 0), s(-8, 0), s(-6, 0), s(-4, -1), s(-4, -2), s(-2, -2), s(-3, -2), s(0, -5), s(0, -5), s(0, -6), s(1, -7), s(0, -6), s(1, -7), s(2, -10), s(2, -9), s(5, -12), s(7, -14), s(9, -15), s(11, -17), s(14, -18), s(44, -27), s(11, -21), s(15, -22), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(89, 31),
  s(65, 46),
  s(54, 59),
  s(50, 65),
  s(45, 77),
  s(36, 106),
  s(43, 123),
  s(53, 100),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-169, -8), s(66, -31), s(75, -25), s(82, -30), s(85, -26), s(85, -30), s(84, -28), s(87, -28), s(87, -37), s(83, -28), s(83, -28), s(77, -27), s(76, -24), s(77, -28), s(75, -25), s(73, -21), s(70, -19), s(71, -25), s(68, -18), s(65, -16), s(66, -17), s(57, -7), s(57, -10), s(56, -9), s(58, -9), s(52, -3), s(55, -6), s(52, -5), s(46, 2), s(47, -1), s(46, 1), s(44, 0), s(41, 2), s(43, 3), s(41, 3), s(32, 12), s(34, 13), s(34, 10), s(34, 10), s(28, 18), s(29, 14), s(29, 18), s(25, 19), s(24, 21), s(24, 19), s(22, 22), s(17, 27), s(18, 24), s(19, 26), s(16, 27), s(14, 29), s(14, 28), s(13, 30), s(11, 32), s(7, 36), s(7, 39), s(5, 37), s(0, 44), s(1, 43), s(0, 43), s(-3, 45), s(0, 45), s(-1, 46), s(-7, 51), s(-5, 50), s(-6, 51), s(-11, 56), s(-11, 55), s(-14, 59), s(-10, 55), s(-15, 58), s(-19, 64), s(-18, 58), s(-16, 58), s(-26, 70), s(-26, 68), s(-23, 68), s(-26, 70), s(-25, 70), s(-29, 73), s(-30, 75), s(-30, 77), s(-35, 81), s(-38, 82), s(-33, 81), s(-38, 80), s(-35, 86), s(-41, 84), s(-39, 79), s(-42, 88), s(-45, 93), s(-48, 96), s(-48, 96), s(-48, 86), s(-46, 86), s(-49, 105), s(-52, 97), s(-51, 101), s(-57, 105), s(-51, 103), s(-57, 112), s(-57, 108), s(-48, 102), s(-54, 112), s(-56, 115), s(-64, 101), s(-55, 114), s(-53, 113), s(-59, 122), s(-63, 116), s(-60, 107), s(-53, 116), s(-56, 109), s(-55, 112), s(-52, 70), s(-55, 149), s(-74, 136), s(-74, 133), s(-66, 72), s(-55, 172), s(-47, 164), s(-64, 188), s(-68, 146), s(-81, 93), s(-53, 177), s(-45, 156), s(-47, -82), s(-97, 207), s(-40, 85), s(-126, 144), s(-92, 185), s(-68, 183), s(-21, 64), s(-136, 35), s(-105, -19), s(-123, -85), s(-75, 17), s(172, 104), s(-31, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(49, 37), s(28, -5), s(43, 3), s(40, 9), s(40, 18), s(41, 11), s(32, 27), s(34, 18), s(36, 19), s(28, 29), s(27, 31), s(34, 19), s(24, 31), s(32, 25), s(31, 24), s(18, 34), s(24, 29), s(34, 18), s(11, 34), s(20, 34), s(24, 21), s(17, 33), s(12, 35), s(27, 26), s(11, 33), s(15, 30), s(21, 33), s(15, 28), s(7, 38), s(23, 24), s(20, 31), s(5, 33), s(12, 36), s(13, 30), s(3, 37), s(9, 39), s(21, 24), s(-8, 33), s(-2, 35), s(11, 23), s(4, 31), s(10, 28), s(-6, 23), s(-7, 21), s(-18, 31), s(50, 42), s(-162, 49), s(4, 15), s(82, 97), s(77, -91), s(-6, -135), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const FILE_STRUCTURE: [ScoreTuple; 193] = [
  s(13, 52), s(31, 38), s(37, 41), s(21, 37), s(17, 42), s(31, 28), s(29, 0), s(1, 1), s(20, 31), s(22, -21), s(1, 1), s(1, 1), s(10, -12), s(1, 1), s(1, 1), s(1, 1), s(25, 44), s(33, 29), s(22, 47), s(1, 1), s(30, 29), s(31, 26), s(1, 1), s(1, 1), s(27, 20), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(29, 33), s(34, 25), s(1, 1), s(1, 1), s(33, 17), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(31, 25), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(16, 51), s(31, 42), s(34, 53), s(1, 1), s(18, 42), s(35, 35), s(1, 1), s(1, 1), s(28, 27), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(25, 37), s(33, 23), s(1, 1), s(1, 1), s(26, 29), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(31, 11), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(10, 57), s(27, 48), s(1, 1), s(1, 1), s(20, 45), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(19, 39), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(8, 67), 
];

pub const STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(51, 90);

pub const NON_STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(34, -36);

// DRAWISHNESS FEATURES
pub const OPPOSITE_BISHOPS: ScoreTuple = s(12, -2);

pub const MATERIAL_IMBALANCE: [[ScoreTuple; 16]; (NUM_PIECES - 1) as usize] = [
// Knight imbalance
[
  s(8, -30), s(-8, 13), s(-66, -33), s(2, 0), s(0, 0), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
],
// Bishop imbalance
[
  s(12, -29), s(-22, 15), s(-9, -24), s(0, 0), s(0, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
],
// Rook imbalance
[
  s(-30, -25), s(-85, -17), s(45, 18), s(-1, -49), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
],
// Queen imbalance
[
  s(15, -40), s(-71, 15), s(66, 72), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
],
// Pawn imbalance
[
  s(-59, 12), s(-20, 5), s(-20, -29), s(-8, -27), s(21, -27), s(54, 41), s(41, -17), s(-6, 0), s(0, 0), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
],
];

