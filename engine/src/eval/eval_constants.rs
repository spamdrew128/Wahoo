#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(169, 288), s(207, 336), s(269, 365), s(315, 344), s(329, 359), s(216, 340), s(194, 339), s(218, 252), 
  s(289, 320), s(323, 336), s(349, 325), s(333, 339), s(356, 322), s(343, 324), s(309, 330), s(310, 293), 
  s(310, 317), s(353, 327), s(375, 350), s(371, 351), s(356, 351), s(396, 333), s(344, 320), s(334, 296), 
  s(340, 324), s(353, 345), s(367, 367), s(400, 368), s(374, 368), s(390, 361), s(349, 344), s(363, 312), 
  s(335, 330), s(349, 338), s(361, 368), s(375, 367), s(373, 371), s(370, 359), s(367, 340), s(341, 335), 
  s(324, 309), s(335, 332), s(352, 341), s(352, 357), s(368, 357), s(358, 332), s(353, 326), s(329, 325), 
  s(306, 289), s(315, 308), s(325, 322), s(345, 322), s(346, 323), s(340, 322), s(328, 303), s(326, 308), 
  s(269, 277), s(304, 309), s(304, 298), s(314, 308), s(321, 306), s(323, 294), s(302, 320), s(309, 279), 
]),
// Bishop PST
Pst::new([
  s(341, 383), s(318, 377), s(268, 384), s(247, 390), s(264, 389), s(258, 385), s(307, 387), s(327, 365), 
  s(347, 351), s(360, 364), s(359, 357), s(315, 363), s(334, 359), s(347, 369), s(325, 372), s(310, 356), 
  s(362, 365), s(389, 353), s(379, 362), s(379, 353), s(362, 359), s(385, 371), s(359, 369), s(368, 358), 
  s(354, 354), s(374, 361), s(380, 364), s(411, 376), s(385, 376), s(390, 370), s(364, 363), s(358, 359), 
  s(362, 344), s(372, 357), s(378, 371), s(397, 374), s(391, 372), s(370, 370), s(356, 363), s(369, 338), 
  s(366, 341), s(388, 355), s(391, 361), s(382, 366), s(381, 372), s(384, 364), s(380, 354), s(375, 339), 
  s(385, 340), s(385, 329), s(391, 337), s(374, 348), s(376, 351), s(389, 345), s(395, 342), s(380, 327), 
  s(357, 328), s(386, 349), s(360, 346), s(354, 341), s(362, 341), s(355, 353), s(371, 334), s(377, 319), 
]),
// Rook PST
Pst::new([
  s(565, 641), s(585, 635), s(554, 654), s(576, 642), s(593, 632), s(555, 643), s(557, 642), s(582, 631), 
  s(544, 638), s(546, 644), s(558, 649), s(572, 638), s(560, 634), s(563, 639), s(558, 630), s(560, 630), 
  s(527, 631), s(549, 632), s(544, 631), s(546, 632), s(564, 625), s(553, 623), s(606, 615), s(549, 616), 
  s(505, 634), s(533, 624), s(526, 641), s(533, 632), s(539, 622), s(525, 626), s(528, 624), s(502, 625), 
  s(495, 618), s(504, 623), s(513, 626), s(527, 620), s(527, 621), s(493, 628), s(520, 619), s(490, 619), 
  s(496, 607), s(504, 612), s(516, 602), s(516, 608), s(520, 608), s(517, 604), s(532, 593), s(501, 593), 
  s(485, 600), s(505, 600), s(516, 602), s(520, 601), s(524, 594), s(512, 599), s(533, 584), s(467, 601), 
  s(501, 603), s(504, 599), s(509, 601), s(517, 596), s(517, 593), s(508, 596), s(493, 600), s(492, 590), 
]),
// Queen PST
Pst::new([
  s(922, 1232), s(955, 1223), s(961, 1252), s(979, 1240), s(990, 1232), s(986, 1225), s(1054, 1143), s(980, 1209), 
  s(956, 1075), s(934, 1102), s(954, 1115), s(934, 1146), s(918, 1169), s(960, 1119), s(986, 1077), s(1014, 1072), 
  s(959, 1058), s(941, 1077), s(960, 1090), s(951, 1117), s(963, 1108), s(986, 1080), s(994, 1042), s(990, 1053), 
  s(947, 1070), s(944, 1077), s(952, 1077), s(948, 1102), s(964, 1094), s(968, 1076), s(971, 1080), s(968, 1060), 
  s(952, 1038), s(946, 1074), s(949, 1086), s(947, 1113), s(955, 1096), s(952, 1074), s(968, 1053), s(967, 1043), 
  s(953, 1033), s(961, 1047), s(956, 1072), s(953, 1078), s(952, 1089), s(970, 1050), s(979, 1036), s(969, 1025), 
  s(957, 1017), s(957, 1027), s(967, 1017), s(971, 1027), s(968, 1037), s(977, 996), s(974, 993), s(975, 971), 
  s(945, 1018), s(946, 1013), s(951, 1009), s(961, 995), s(957, 1003), s(942, 997), s(956, 973), s(943, 1006), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(156, 240), s(160, 230), s(158, 231), s(178, 212), s(143, 224), s(161, 212), s(100, 241), s(80, 257), 
  s(86, 166), s(81, 156), s(113, 148), s(113, 142), s(123, 123), s(164, 134), s(148, 153), s(114, 154), 
  s(68, 150), s(78, 131), s(86, 126), s(95, 107), s(110, 114), s(102, 115), s(84, 122), s(75, 125), 
  s(65, 124), s(68, 118), s(83, 113), s(100, 106), s(99, 107), s(96, 105), s(74, 103), s(73, 106), 
  s(68, 120), s(79, 113), s(85, 114), s(91, 120), s(93, 121), s(95, 113), s(92, 99), s(78, 103), 
  s(65, 128), s(75, 118), s(72, 126), s(81, 129), s(78, 137), s(107, 118), s(95, 103), s(71, 105), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-24, 3), s(-51, 73), s(25, 79), s(-71, 112), s(-33, 80), s(-92, 95), s(-48, 90), s(72, -8), 
  s(-64, 118), s(-41, 159), s(-104, 183), s(52, 167), s(-27, 162), s(-32, 174), s(-10, 154), s(-76, 134), 
  s(-127, 92), s(-15, 103), s(-39, 125), s(-67, 135), s(-27, 128), s(76, 110), s(43, 108), s(-37, 78), 
  s(-42, 20), s(-20, 50), s(-34, 60), s(-72, 66), s(-78, 62), s(-43, 52), s(-64, 54), s(-131, 30), 
  s(-84, -18), s(-23, 4), s(-43, 23), s(-64, 31), s(-61, 27), s(-34, 10), s(-75, 8), s(-150, 0), 
  s(-39, -35), s(-2, -19), s(-22, -6), s(-18, 0), s(-17, -2), s(-14, -13), s(-17, -18), s(-71, -29), 
  s(14, -62), s(5, -37), s(-10, -27), s(-36, -19), s(-33, -18), s(-20, -28), s(13, -40), s(7, -62), 
  s(31, -102), s(63, -84), s(41, -59), s(-37, -40), s(9, -54), s(-11, -47), s(39, -71), s(34, -105), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(56, 140), s(60, 130), s(58, 131), s(78, 112), s(43, 124), s(61, 112), s(0, 141), s(-19, 157), 
  s(50, 132), s(61, 138), s(44, 113), s(41, 92), s(31, 116), s(12, 110), s(-34, 126), s(-48, 149), 
  s(38, 54), s(32, 61), s(32, 54), s(16, 63), s(2, 55), s(28, 51), s(-10, 77), s(-6, 77), 
  s(21, 22), s(9, 34), s(-9, 36), s(-3, 34), s(-18, 31), s(3, 27), s(9, 47), s(0, 43), 
  s(11, -4), s(-7, 22), s(-24, 20), s(-17, 14), s(-18, 7), s(5, 6), s(-8, 32), s(15, 14), 
  s(-2, 10), s(-3, 16), s(-10, 5), s(-9, 2), s(-3, -3), s(-5, 3), s(-3, 11), s(-1, 17), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-41, -180),
  s(0, -111),
  s(-4, -46),
  s(-12, -17),
  s(-10, 5),
  s(-11, 3),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(58, -29),
  s(12, -32),
  s(0, -28),
  s(-14, -16),
  s(-23, -19),
  s(-10, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(19, 373),
  s(165, 163),
  s(52, 50),
  s(18, 15),
  s(-5, -4),
  s(4, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 67);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(22, 56), s(25, 70), s(24, 73), s(26, 72), s(25, 75), s(25, 71), s(22, 68), s(20, 58), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(6, 36), s(14, 56), s(16, 67), s(20, 77), s(21, 84), s(22, 87), s(21, 89), s(16, 94), s(18, 90), s(19, 84), s(25, 85), s(-20, 113), s(20, 74), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 111), s(1, 129), s(1, 152), s(0, 161), s(1, 173), s(3, 179), s(3, 186), s(8, 190), s(9, 195), s(11, 197), s(14, 202), s(19, 205), s(29, 200), s(27, 195), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(49, 213), s(49, 222), s(53, 257), s(57, 270), s(60, 280), s(64, 281), s(65, 301), s(68, 307), s(71, 306), s(74, 308), s(75, 319), s(77, 313), s(81, 318), s(80, 322), s(85, 323), s(83, 327), s(92, 322), s(96, 321), s(117, 302), s(126, 301), s(174, 268), s(159, 265), s(186, 246), s(235, 229), s(287, 187), s(203, 232), s(205, 197), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(12, 27), s(21, 38), s(31, 45), s(39, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(2, 15), s(8, 20), s(12, 23), s(15, 28), s(15, 31), s(19, 29), s(22, 37), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 4), s(11, 8), s(19, 12), s(24, 20), s(28, 25), s(35, 25), s(39, 31), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 134), s(-12, 146), s(-13, 152), s(-13, 165), s(-13, 178), s(-14, 179), s(-15, 187), s(-14, 194), s(-16, 205), s(-14, 201), s(-19, 209), s(0, 192), s(-24, 231), s(19, 188), 
];

pub const PAWN_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(97, 86), s(75, 30)];
pub const PAWN_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(95, 66), s(74, 58)];
pub const PAWN_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(166, 132), s(108, 3)];
pub const PAWN_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(230, 113), s(98, -34)];
pub const KNIGHT_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(35, 31), s(38, 38)];
pub const KNIGHT_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(62, 72), s(82, 15)];
pub const KNIGHT_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(114, 232), s(63, -40)];
pub const BISHOP_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(18, 36), s(27, 31)];
pub const BISHOP_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(85, 91), s(65, 33)];
pub const BISHOP_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(123, 212), s(90, 22)];
pub const ROOK_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(114, 395), s(83, 7)];

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-32, 85);

pub const TEMPO_BONUS: ScoreTuple = s(34, 23);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-4, 10), s(3, -5), s(8, -3), s(11, -5), s(9, -4), s(9, -5), s(9, -4), s(10, -5), s(11, -6), s(10, -2), s(9, -2), s(10, -4), s(7, 0), s(10, -3), s(8, -4), s(7, -2), s(6, -2), s(3, 0), s(5, -5), s(4, -7), s(7, -9), s(2, -9), s(2, -11), s(2, -15), s(0, -16), s(-1, -22), s(5, -21), s(-17, -20), 
],
// Bishop attacks
[
  s(2, 8), s(6, -3), s(10, -5), s(9, -4), s(9, -1), s(11, -4), s(9, -4), s(9, -4), s(11, -6), s(10, -5), s(10, -6), s(8, -5), s(8, -6), s(7, -4), s(9, -8), s(6, -6), s(9, -8), s(6, -7), s(6, -7), s(3, -6), s(3, -5), s(4, -12), s(5, -8), s(2, -11), s(-2, -9), s(3, -17), s(8, -17), s(-6, -18), 
],
// Rook attacks
[
  s(5, 1), s(2, -1), s(5, -5), s(6, -7), s(5, -7), s(4, -5), s(5, -6), s(4, -4), s(5, -7), s(4, -6), s(5, -6), s(5, -7), s(3, -4), s(3, -4), s(3, -3), s(3, -2), s(1, -1), s(1, 0), s(1, -1), s(0, 0), s(0, 0), s(0, 0), s(-1, 0), s(0, 0), s(-2, 1), s(-6, 1), s(-15, 5), s(0, -2), 
],
// Queen attacks
[
  s(-2, 5), s(1, -4), s(3, -7), s(4, -9), s(4, -6), s(3, -3), s(4, -5), s(4, -3), s(4, -5), s(5, -3), s(4, 0), s(5, 0), s(5, 1), s(7, 0), s(5, 2), s(7, -1), s(7, 0), s(10, -2), s(9, 0), s(12, -2), s(12, -3), s(7, 0), s(23, -7), s(12, -8), s(14, -1), s(11, -3), s(13, 0), s(6, -9), 
],
// Pawn attacks
[
  s(0, 6), s(5, -2), s(4, -4), s(1, -4), s(1, -3), s(1, -3), s(0, -2), s(1, -3), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(1, -2), s(1, -3), s(2, -3), s(3, -3), s(2, -3), s(4, -5), s(4, -5), s(5, -6), s(8, -8), s(9, -6), s(5, -5), s(33, -14), s(20, -15), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-7, 6), s(-1, 2), s(-4, 2), s(-4, 1), s(-4, 2), s(-3, 2), s(-3, 3), s(-3, 1), s(-4, 1), s(-4, 2), s(-4, 1), s(-3, 0), s(-5, 3), s(-5, 3), s(-4, 2), s(-6, 4), s(-6, 4), s(-2, 1), s(-3, 5), s(-2, 4), s(-5, 6), s(-2, 8), s(-6, 9), s(-2, 11), s(-7, 12), s(-9, 20), s(-12, 15), s(-8, 26), 
],
// Bishop defenses
[
  s(2, 0), s(-2, 0), s(-4, 1), s(-4, 2), s(-3, 2), s(-3, 2), s(-5, 3), s(-3, 2), s(-4, 2), s(-4, 3), s(-3, 1), s(-4, 1), s(-4, 2), s(-4, 2), s(-4, 2), s(-2, 0), s(-3, 1), s(-1, 1), s(-4, 3), s(-1, 1), s(0, 0), s(-2, 2), s(-5, 3), s(-1, 3), s(2, 3), s(-3, 6), s(-2, 1), s(7, 10), 
],
// Rook defenses
[
  s(-17, 13), s(-4, 5), s(-5, 6), s(-5, 5), s(-4, 4), s(-5, 6), s(-3, 4), s(-4, 4), s(-4, 5), s(-3, 4), s(-3, 3), s(-3, 4), s(-1, 2), s(-3, 5), s(-2, 3), s(-2, 2), s(-1, 1), s(-1, 2), s(-2, 3), s(-1, 3), s(-4, 5), s(-1, 4), s(-2, 4), s(-3, 5), s(-2, 4), s(-6, 5), s(2, 1), s(-3, 3), 
],
// Queen defenses
[
  s(2, -7), s(-2, 3), s(-1, 2), s(-1, 2), s(-2, 2), s(-2, 2), s(-2, 4), s(-2, 5), s(-3, 6), s(-3, 5), s(-2, 4), s(-2, 4), s(-1, 2), s(-1, 2), s(0, 0), s(0, 1), s(0, 0), s(0, 1), s(3, -2), s(2, 0), s(2, 0), s(7, -1), s(0, 6), s(0, 6), s(12, 1), s(11, 1), s(14, 4), s(1, 2), 
],
// Pawn defenses
[
  s(-11, -4), s(-17, 3), s(-13, 2), s(-11, 2), s(-9, 1), s(-9, 0), s(-9, 0), s(-8, 1), s(-5, -1), s(-4, -2), s(-3, -2), s(-3, -1), s(-1, -4), s(-1, -4), s(0, -5), s(0, -6), s(0, -5), s(0, -7), s(1, -9), s(1, -9), s(5, -13), s(6, -14), s(9, -16), s(10, -18), s(14, -19), s(42, -29), s(21, -23), s(11, -22), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(93, 30),
  s(71, 43),
  s(60, 57),
  s(56, 64),
  s(53, 76),
  s(45, 101),
  s(52, 116),
  s(58, 97),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-176, -8), s(62, -31), s(74, -26), s(81, -30), s(84, -27), s(83, -30), s(83, -28), s(85, -28), s(84, -33), s(81, -28), s(81, -27), s(76, -27), s(75, -24), s(76, -28), s(74, -25), s(72, -21), s(69, -17), s(70, -24), s(67, -18), s(63, -15), s(66, -17), s(56, -6), s(56, -8), s(56, -8), s(57, -9), s(52, -3), s(54, -5), s(52, -5), s(47, 2), s(48, -1), s(46, 0), s(44, 0), s(42, 2), s(44, 3), s(42, 2), s(34, 11), s(36, 11), s(35, 9), s(35, 9), s(30, 16), s(31, 12), s(31, 16), s(28, 17), s(26, 19), s(26, 17), s(25, 20), s(20, 25), s(20, 22), s(21, 24), s(19, 25), s(17, 28), s(17, 26), s(15, 28), s(14, 30), s(10, 33), s(10, 37), s(9, 35), s(3, 42), s(4, 40), s(3, 41), s(0, 43), s(2, 43), s(1, 44), s(-3, 48), s(-1, 48), s(-3, 49), s(-6, 53), s(-7, 53), s(-10, 57), s(-6, 52), s(-11, 56), s(-14, 62), s(-13, 56), s(-11, 55), s(-21, 68), s(-21, 66), s(-19, 66), s(-21, 67), s(-20, 68), s(-24, 71), s(-25, 73), s(-25, 74), s(-30, 79), s(-32, 81), s(-27, 78), s(-32, 78), s(-30, 84), s(-35, 82), s(-34, 78), s(-37, 86), s(-38, 91), s(-42, 95), s(-42, 95), s(-41, 85), s(-40, 85), s(-43, 104), s(-45, 96), s(-45, 100), s(-50, 106), s(-43, 101), s(-49, 111), s(-50, 109), s(-42, 98), s(-47, 110), s(-49, 113), s(-55, 99), s(-47, 111), s(-46, 110), s(-52, 120), s(-54, 112), s(-51, 106), s(-45, 110), s(-48, 105), s(-45, 106), s(-44, 60), s(-44, 128), s(-59, 113), s(-61, 116), s(-53, 59), s(-47, 172), s(-41, 165), s(-51, 191), s(-49, 146), s(-71, 76), s(-45, 179), s(-36, 150), s(-42, -106), s(-91, 195), s(-41, 79), s(-112, 146), s(-57, 155), s(-77, 161), s(-22, 71), s(-140, 30), s(-109, -8), s(-130, -82), s(-77, 17), s(173, 107), s(-36, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(52, 33), s(27, -7), s(43, 1), s(40, 7), s(40, 16), s(39, 10), s(32, 26), s(34, 17), s(36, 20), s(28, 28), s(27, 30), s(33, 19), s(25, 30), s(31, 25), s(31, 24), s(19, 33), s(24, 28), s(33, 18), s(13, 33), s(21, 33), s(24, 20), s(19, 32), s(14, 34), s(28, 24), s(14, 31), s(17, 29), s(22, 31), s(17, 27), s(10, 36), s(24, 23), s(23, 29), s(10, 30), s(16, 33), s(15, 29), s(9, 35), s(14, 36), s(23, 24), s(-7, 34), s(4, 32), s(15, 21), s(11, 29), s(19, 24), s(8, 16), s(-2, 21), s(-5, 29), s(55, 40), s(-49, 47), s(6, 15), s(122, 97), s(78, -94), s(-5, -138), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const FILE_STRUCTURE: [ScoreTuple; 193] = [
  s(10, 54), s(32, 38), s(41, 38), s(26, 35), s(14, 43), s(32, 26), s(31, -5), s(1, 1), s(19, 31), s(21, -24), s(1, 1), s(1, 1), s(7, -10), s(1, 1), s(1, 1), s(1, 1), s(26, 44), s(36, 27), s(29, 42), s(1, 1), s(31, 28), s(35, 20), s(1, 1), s(1, 1), s(29, 16), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(32, 32), s(41, 18), s(1, 1), s(1, 1), s(37, 12), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(38, 18), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(13, 52), s(31, 41), s(40, 48), s(1, 1), s(16, 41), s(38, 30), s(1, 1), s(1, 1), s(28, 24), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(25, 37), s(38, 17), s(1, 1), s(1, 1), s(28, 27), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(37, 4), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(8, 58), s(30, 45), s(1, 1), s(1, 1), s(20, 44), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(21, 37), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(7, 66), 
];

pub const STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(49, 92);

pub const NON_STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(35, -38);
