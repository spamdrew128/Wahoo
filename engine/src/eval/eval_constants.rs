#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(170, 288), s(211, 336), s(270, 365), s(320, 342), s(333, 358), s(226, 338), s(196, 340), s(223, 251), 
  s(289, 321), s(322, 336), s(348, 325), s(333, 340), s(357, 322), s(348, 323), s(308, 330), s(309, 293), 
  s(309, 318), s(353, 327), s(375, 350), s(372, 350), s(355, 350), s(397, 332), s(345, 319), s(332, 296), 
  s(339, 325), s(352, 345), s(367, 367), s(400, 368), s(374, 368), s(390, 361), s(351, 345), s(364, 312), 
  s(334, 331), s(348, 339), s(361, 367), s(375, 367), s(372, 371), s(370, 359), s(367, 340), s(341, 335), 
  s(323, 310), s(334, 332), s(351, 341), s(352, 357), s(367, 357), s(357, 333), s(352, 327), s(328, 325), 
  s(305, 290), s(314, 309), s(324, 323), s(344, 322), s(345, 324), s(339, 322), s(326, 304), s(325, 308), 
  s(269, 279), s(303, 309), s(303, 299), s(314, 309), s(320, 306), s(322, 294), s(301, 321), s(310, 280), 
]),
// Bishop PST
Pst::new([
  s(340, 384), s(314, 378), s(267, 384), s(244, 389), s(263, 388), s(258, 384), s(316, 385), s(325, 366), 
  s(345, 351), s(357, 364), s(358, 356), s(314, 362), s(333, 358), s(347, 368), s(323, 372), s(312, 356), 
  s(361, 365), s(387, 353), s(377, 362), s(378, 351), s(360, 358), s(383, 370), s(357, 369), s(368, 358), 
  s(353, 355), s(374, 361), s(380, 364), s(411, 375), s(386, 374), s(391, 369), s(363, 363), s(358, 358), 
  s(360, 345), s(371, 358), s(377, 371), s(397, 373), s(392, 371), s(369, 369), s(355, 362), s(368, 338), 
  s(364, 343), s(386, 355), s(390, 361), s(381, 366), s(380, 372), s(383, 364), s(379, 354), s(374, 339), 
  s(383, 341), s(384, 330), s(390, 337), s(373, 349), s(375, 351), s(388, 345), s(394, 342), s(379, 328), 
  s(356, 330), s(385, 351), s(358, 347), s(353, 343), s(361, 342), s(353, 354), s(371, 335), s(376, 320), 
]),
// Rook PST
Pst::new([
  s(563, 642), s(585, 634), s(556, 652), s(576, 639), s(595, 629), s(555, 641), s(563, 639), s(593, 627), 
  s(542, 639), s(545, 643), s(557, 647), s(572, 636), s(561, 631), s(563, 636), s(561, 628), s(562, 628), 
  s(525, 632), s(546, 632), s(542, 631), s(545, 630), s(562, 623), s(549, 622), s(600, 615), s(546, 616), 
  s(502, 635), s(530, 624), s(524, 641), s(529, 632), s(536, 621), s(523, 625), s(525, 623), s(501, 625), 
  s(493, 620), s(501, 623), s(510, 627), s(524, 620), s(526, 620), s(491, 628), s(518, 618), s(489, 618), 
  s(493, 609), s(501, 613), s(513, 602), s(514, 608), s(519, 607), s(515, 604), s(531, 592), s(501, 593), 
  s(482, 602), s(503, 602), s(514, 603), s(518, 601), s(522, 594), s(510, 599), s(532, 584), s(466, 602), 
  s(498, 604), s(502, 600), s(507, 602), s(514, 597), s(514, 593), s(505, 596), s(492, 601), s(490, 591), 
]),
// Queen PST
Pst::new([
  s(920, 1236), s(953, 1229), s(956, 1260), s(988, 1240), s(979, 1253), s(987, 1229), s(1057, 1155), s(987, 1214), 
  s(957, 1076), s(936, 1105), s(957, 1116), s(935, 1150), s(917, 1178), s(959, 1122), s(987, 1078), s(1018, 1073), 
  s(959, 1060), s(944, 1076), s(961, 1089), s(950, 1119), s(960, 1113), s(980, 1088), s(993, 1041), s(987, 1059), 
  s(949, 1067), s(945, 1076), s(952, 1078), s(948, 1102), s(965, 1093), s(969, 1076), s(972, 1080), s(971, 1061), 
  s(953, 1037), s(946, 1075), s(949, 1087), s(948, 1113), s(957, 1099), s(952, 1078), s(968, 1056), s(968, 1049), 
  s(953, 1033), s(962, 1048), s(958, 1072), s(954, 1080), s(952, 1091), s(970, 1055), s(978, 1043), s(970, 1033), 
  s(957, 1018), s(958, 1026), s(968, 1019), s(971, 1029), s(968, 1040), s(978, 1001), s(974, 1001), s(978, 977), 
  s(946, 1018), s(947, 1012), s(951, 1008), s(962, 994), s(957, 1003), s(942, 1001), s(958, 973), s(944, 1007), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(153, 240), s(153, 230), s(153, 231), s(174, 213), s(136, 224), s(157, 213), s(94, 242), s(78, 257), 
  s(86, 166), s(81, 156), s(113, 148), s(113, 141), s(124, 123), s(167, 133), s(150, 152), s(115, 153), 
  s(68, 150), s(77, 131), s(86, 125), s(95, 107), s(110, 114), s(103, 114), s(84, 121), s(75, 125), 
  s(65, 123), s(68, 118), s(83, 113), s(99, 106), s(99, 107), s(96, 105), s(74, 103), s(73, 106), 
  s(68, 120), s(79, 113), s(85, 114), s(91, 120), s(93, 121), s(95, 113), s(92, 99), s(78, 103), 
  s(65, 128), s(74, 119), s(72, 126), s(81, 129), s(78, 137), s(107, 118), s(95, 103), s(71, 105), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-25, 2), s(-59, 74), s(25, 79), s(-80, 114), s(-50, 83), s(-93, 93), s(-53, 89), s(79, -10), 
  s(-62, 116), s(-33, 159), s(-96, 184), s(50, 169), s(-35, 166), s(-40, 176), s(-1, 152), s(-70, 132), 
  s(-123, 90), s(-23, 104), s(-48, 127), s(-76, 136), s(-34, 128), s(63, 111), s(40, 106), s(-33, 75), 
  s(-62, 22), s(-37, 53), s(-47, 62), s(-88, 69), s(-94, 64), s(-64, 54), s(-86, 56), s(-147, 31), 
  s(-91, -17), s(-41, 7), s(-52, 25), s(-71, 33), s(-66, 28), s(-42, 11), s(-82, 9), s(-151, -1), 
  s(-44, -37), s(-10, -20), s(-29, -6), s(-25, 0), s(-24, -2), s(-21, -14), s(-22, -21), s(-72, -33), 
  s(19, -62), s(7, -37), s(-6, -27), s(-34, -18), s(-30, -17), s(-17, -28), s(17, -41), s(13, -63), 
  s(35, -104), s(65, -85), s(42, -60), s(-36, -39), s(10, -54), s(-9, -48), s(42, -73), s(38, -107), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(53, 140), s(53, 130), s(53, 131), s(74, 113), s(36, 124), s(57, 113), s(-5, 142), s(-21, 157), 
  s(48, 132), s(59, 138), s(43, 112), s(40, 93), s(30, 115), s(10, 111), s(-34, 126), s(-47, 148), 
  s(36, 54), s(31, 61), s(31, 54), s(15, 63), s(2, 55), s(28, 51), s(-10, 78), s(-8, 77), 
  s(20, 22), s(9, 34), s(-10, 36), s(-3, 34), s(-19, 32), s(2, 28), s(9, 47), s(0, 43), 
  s(10, -4), s(-9, 22), s(-25, 20), s(-17, 14), s(-21, 9), s(3, 6), s(-13, 34), s(14, 15), 
  s(-2, 10), s(-3, 16), s(-10, 6), s(-9, 2), s(-4, -2), s(-7, 4), s(-5, 13), s(-2, 17), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-31, -182),
  s(1, -111),
  s(-3, -46),
  s(-11, -17),
  s(-10, 5),
  s(-9, 4),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(56, -29),
  s(12, -32),
  s(0, -28),
  s(-14, -17),
  s(-23, -19),
  s(-11, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(20, 368),
  s(163, 163),
  s(52, 50),
  s(18, 15),
  s(-5, -4),
  s(4, -9),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 68);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(22, 56), s(25, 70), s(23, 73), s(25, 72), s(24, 76), s(24, 72), s(21, 69), s(18, 59), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(6, 36), s(14, 56), s(16, 67), s(20, 77), s(21, 85), s(22, 88), s(20, 90), s(16, 94), s(18, 91), s(19, 85), s(24, 85), s(-15, 113), s(13, 76), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 110), s(1, 129), s(1, 152), s(0, 161), s(2, 173), s(3, 179), s(3, 186), s(9, 190), s(10, 195), s(11, 197), s(14, 202), s(19, 205), s(29, 200), s(29, 194), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(50, 215), s(49, 227), s(54, 258), s(58, 272), s(61, 281), s(65, 283), s(66, 303), s(68, 309), s(71, 308), s(75, 311), s(75, 322), s(78, 316), s(81, 321), s(80, 325), s(84, 328), s(82, 332), s(91, 327), s(94, 328), s(114, 311), s(121, 313), s(167, 282), s(153, 280), s(184, 257), s(237, 238), s(290, 199), s(218, 233), s(206, 218), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(12, 27), s(21, 39), s(31, 45), s(39, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(2, 14), s(9, 19), s(12, 23), s(16, 28), s(16, 30), s(20, 29), s(22, 37), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 4), s(11, 8), s(19, 12), s(24, 19), s(28, 24), s(35, 25), s(38, 31), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 133), s(-12, 146), s(-13, 152), s(-13, 165), s(-13, 178), s(-14, 180), s(-15, 188), s(-15, 196), s(-16, 207), s(-15, 205), s(-20, 213), s(-1, 199), s(-27, 241), s(11, 209), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 36);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(78, 59);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(123, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(103, -31);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 36);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 17);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(64, -43);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 33);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(70, 33);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(92, 24);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(85, 13);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-32, 84);

pub const TEMPO_BONUS: ScoreTuple = s(34, 24);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-5, 12), s(4, -6), s(8, -3), s(11, -6), s(10, -5), s(10, -6), s(10, -5), s(11, -6), s(11, -7), s(11, -4), s(10, -4), s(11, -7), s(8, -3), s(11, -5), s(9, -7), s(8, -4), s(7, -4), s(5, -3), s(4, -6), s(4, -8), s(7, -11), s(2, -10), s(0, -11), s(0, -15), s(0, -17), s(-6, -20), s(-4, -15), s(-26, -21), 
],
// Bishop attacks
[
  s(2, 9), s(7, -3), s(10, -5), s(10, -4), s(10, -2), s(11, -5), s(10, -5), s(10, -5), s(12, -7), s(11, -7), s(10, -7), s(9, -6), s(9, -7), s(8, -7), s(9, -9), s(7, -8), s(9, -10), s(6, -8), s(6, -9), s(3, -7), s(4, -6), s(3, -13), s(4, -8), s(1, -12), s(-4, -9), s(0, -17), s(8, -18), s(-13, -20), 
],
// Rook attacks
[
  s(5, 2), s(3, -1), s(6, -5), s(7, -7), s(6, -8), s(5, -6), s(6, -7), s(5, -5), s(6, -8), s(5, -7), s(5, -7), s(5, -8), s(4, -6), s(4, -5), s(4, -5), s(4, -4), s(3, -3), s(2, -2), s(2, -2), s(1, -1), s(0, 0), s(2, -1), s(0, 0), s(0, -1), s(0, 0), s(-2, 0), s(-15, 5), s(8, -6), 
],
// Queen attacks
[
  s(-2, 6), s(1, -4), s(4, -8), s(5, -11), s(5, -7), s(5, -6), s(6, -8), s(6, -6), s(6, -8), s(8, -8), s(7, -5), s(9, -10), s(9, -8), s(10, -9), s(9, -8), s(10, -11), s(10, -11), s(13, -11), s(11, -8), s(20, -16), s(16, -10), s(9, -5), s(19, -11), s(16, -14), s(9, 0), s(7, -1), s(24, -7), s(6, -4), 
],
// Pawn attacks
[
  s(0, 7), s(5, -2), s(4, -4), s(1, -4), s(1, -4), s(1, -4), s(0, -2), s(1, -4), s(0, -2), s(0, -2), s(0, -2), s(1, -3), s(0, -3), s(1, -3), s(1, -3), s(1, -3), s(1, -3), s(2, -3), s(3, -4), s(2, -4), s(4, -6), s(5, -6), s(5, -7), s(9, -9), s(10, -8), s(3, -6), s(39, -16), s(27, -18), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-7, 5), s(-1, 2), s(-4, 2), s(-4, 1), s(-4, 3), s(-4, 2), s(-4, 3), s(-4, 1), s(-4, 1), s(-5, 2), s(-4, 2), s(-4, 1), s(-5, 3), s(-6, 4), s(-4, 3), s(-5, 4), s(-6, 5), s(-4, 3), s(-3, 6), s(-3, 5), s(-5, 7), s(-2, 9), s(-5, 9), s(-1, 11), s(-4, 12), s(-7, 20), s(-6, 13), s(-6, 27), 
],
// Bishop defenses
[
  s(2, 0), s(-2, 0), s(-3, 1), s(-5, 2), s(-3, 2), s(-3, 2), s(-5, 3), s(-4, 2), s(-4, 3), s(-4, 3), s(-3, 2), s(-4, 1), s(-4, 3), s(-5, 3), s(-3, 2), s(-3, 1), s(-2, 1), s(-2, 1), s(-3, 3), s(-1, 1), s(0, 0), s(-2, 3), s(-4, 3), s(-1, 3), s(1, 4), s(0, 5), s(2, 0), s(37, 7), 
],
// Rook defenses
[
  s(-20, 13), s(-4, 5), s(-5, 6), s(-5, 5), s(-4, 4), s(-5, 6), s(-3, 4), s(-4, 4), s(-4, 5), s(-3, 5), s(-3, 4), s(-3, 4), s(-1, 3), s(-3, 5), s(-2, 4), s(-2, 3), s(-1, 2), s(0, 2), s(-1, 3), s(-1, 4), s(-3, 5), s(-1, 4), s(-1, 4), s(-3, 5), s(-4, 5), s(-4, 4), s(6, 0), s(-4, 3), 
],
// Queen defenses
[
  s(1, -6), s(-2, 3), s(-1, 2), s(-1, 2), s(-2, 2), s(-2, 3), s(-3, 5), s(-2, 5), s(-3, 6), s(-3, 6), s(-3, 5), s(-3, 6), s(-3, 6), s(-2, 6), s(-1, 4), s(-1, 4), s(-1, 6), s(0, 5), s(0, 3), s(-1, 5), s(1, 3), s(4, 0), s(-2, 8), s(0, 7), s(9, 0), s(12, -2), s(-16, 15), s(1, -1), 
],
// Pawn defenses
[
  s(-11, -4), s(-18, 3), s(-13, 2), s(-11, 2), s(-9, 1), s(-9, 0), s(-8, 0), s(-7, 1), s(-5, -1), s(-4, -2), s(-3, -2), s(-3, -2), s(-1, -4), s(-1, -4), s(-1, -5), s(0, -6), s(0, -5), s(0, -7), s(1, -11), s(1, -10), s(4, -14), s(6, -16), s(9, -18), s(11, -20), s(13, -20), s(31, -28), s(2, -20), s(15, -26), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(89, 26),
  s(68, 41),
  s(55, 54),
  s(52, 63),
  s(49, 75),
  s(47, 99),
  s(56, 114),
  s(57, 95),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-165, -6), s(55, -26), s(70, -21), s(75, -27), s(79, -24), s(78, -28), s(77, -26), s(81, -27), s(80, -36), s(76, -27), s(76, -26), s(71, -26), s(70, -23), s(71, -27), s(69, -24), s(68, -21), s(64, -17), s(67, -25), s(64, -18), s(60, -17), s(63, -18), s(54, -7), s(54, -10), s(53, -9), s(55, -10), s(50, -5), s(51, -7), s(50, -6), s(45, 0), s(45, -2), s(45, -1), s(42, 0), s(39, 1), s(43, 0), s(40, 0), s(33, 8), s(35, 9), s(34, 8), s(33, 8), s(29, 14), s(30, 10), s(30, 14), s(26, 15), s(25, 18), s(25, 16), s(24, 19), s(19, 22), s(19, 20), s(20, 23), s(17, 24), s(16, 26), s(16, 24), s(14, 27), s(13, 29), s(10, 32), s(10, 35), s(8, 33), s(2, 40), s(4, 39), s(2, 40), s(0, 41), s(1, 41), s(1, 43), s(-4, 47), s(-2, 46), s(-3, 47), s(-7, 52), s(-8, 51), s(-11, 55), s(-6, 51), s(-11, 55), s(-15, 61), s(-14, 54), s(-11, 54), s(-21, 66), s(-21, 64), s(-19, 64), s(-21, 66), s(-20, 66), s(-24, 69), s(-25, 72), s(-25, 73), s(-30, 77), s(-32, 79), s(-27, 76), s(-32, 76), s(-30, 82), s(-36, 81), s(-34, 76), s(-36, 84), s(-38, 89), s(-42, 93), s(-41, 92), s(-41, 83), s(-40, 83), s(-43, 102), s(-44, 94), s(-45, 99), s(-50, 104), s(-43, 100), s(-50, 110), s(-50, 106), s(-42, 97), s(-47, 109), s(-50, 112), s(-55, 97), s(-47, 109), s(-45, 109), s(-52, 117), s(-54, 110), s(-52, 103), s(-45, 109), s(-48, 104), s(-46, 105), s(-44, 60), s(-45, 132), s(-61, 113), s(-64, 121), s(-54, 66), s(-47, 179), s(-40, 171), s(-52, 203), s(-54, 155), s(-72, 83), s(-43, 175), s(-36, 156), s(-40, -89), s(-96, 205), s(-39, 85), s(-127, 149), s(-66, 128), s(-113, 187), s(-19, 87), s(-137, 24), s(-106, 0), s(-125, -76), s(-74, 16), s(176, 110), s(-27, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(50, 31), s(27, -10), s(42, 0), s(40, 3), s(40, 15), s(40, 8), s(33, 25), s(35, 14), s(35, 19), s(29, 27), s(28, 28), s(34, 17), s(25, 29), s(32, 24), s(31, 21), s(18, 33), s(24, 27), s(33, 16), s(13, 32), s(21, 32), s(23, 19), s(18, 31), s(13, 33), s(28, 24), s(12, 30), s(17, 28), s(23, 30), s(17, 26), s(9, 35), s(23, 22), s(22, 28), s(9, 29), s(15, 33), s(15, 28), s(8, 34), s(13, 36), s(23, 23), s(-9, 33), s(2, 31), s(14, 20), s(12, 27), s(15, 26), s(4, 18), s(-4, 21), s(-7, 28), s(52, 45), s(-69, 49), s(6, 13), s(109, 105), s(75, -95), s(-2, -137), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const FILE_STRUCTURE: [ScoreTuple; 193] = [
  s(11, 52), s(32, 37), s(39, 39), s(27, 36), s(14, 42), s(31, 25), s(30, -6), s(1, 1), s(18, 29), s(19, -27), s(1, 1), s(1, 1), s(6, -14), s(1, 1), s(1, 1), s(1, 1), s(26, 43), s(35, 27), s(27, 43), s(1, 1), s(31, 27), s(33, 21), s(1, 1), s(1, 1), s(27, 15), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(32, 29), s(39, 17), s(1, 1), s(1, 1), s(35, 12), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(38, 8), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(14, 51), s(32, 39), s(40, 47), s(1, 1), s(17, 40), s(39, 26), s(1, 1), s(1, 1), s(30, 17), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(26, 35), s(36, 16), s(1, 1), s(1, 1), s(28, 25), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(36, -1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(8, 57), s(31, 44), s(1, 1), s(1, 1), s(22, 40), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(22, 34), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(7, 67), 
];
