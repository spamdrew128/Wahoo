#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(233, 246), s(260, 287), s(277, 318), s(301, 305), s(316, 317), s(261, 288), s(267, 281), s(244, 244), 
  s(266, 295), s(298, 306), s(329, 295), s(318, 306), s(327, 291), s(343, 289), s(296, 295), s(286, 269), 
  s(278, 298), s(322, 301), s(344, 322), s(344, 320), s(336, 316), s(357, 311), s(323, 289), s(305, 272), 
  s(309, 299), s(321, 317), s(337, 337), s(363, 338), s(350, 331), s(360, 330), s(328, 312), s(337, 286), 
  s(301, 309), s(318, 312), s(330, 337), s(347, 331), s(345, 335), s(344, 324), s(340, 308), s(316, 300), 
  s(291, 292), s(304, 305), s(321, 313), s(322, 325), s(342, 323), s(329, 305), s(326, 298), s(300, 297), 
  s(272, 278), s(280, 293), s(293, 300), s(315, 298), s(316, 298), s(313, 297), s(303, 282), s(300, 283), 
  s(248, 260), s(271, 270), s(269, 282), s(281, 289), s(290, 284), s(292, 277), s(272, 280), s(273, 273), 
]),
// Bishop PST
Pst::new([
  s(301, 337), s(290, 332), s(264, 333), s(257, 336), s(271, 335), s(265, 332), s(295, 334), s(294, 319), 
  s(307, 307), s(319, 320), s(318, 314), s(285, 318), s(311, 312), s(320, 322), s(301, 324), s(290, 309), 
  s(318, 321), s(343, 312), s(335, 320), s(340, 309), s(321, 317), s(350, 326), s(328, 323), s(335, 313), 
  s(309, 315), s(330, 319), s(337, 324), s(360, 335), s(346, 331), s(352, 327), s(324, 320), s(323, 313), 
  s(314, 306), s(326, 319), s(332, 328), s(352, 330), s(350, 328), s(328, 326), s(318, 319), s(327, 296), 
  s(317, 306), s(339, 313), s(344, 320), s(337, 324), s(339, 327), s(339, 319), s(336, 310), s(331, 296), 
  s(334, 303), s(335, 297), s(342, 299), s(328, 308), s(332, 311), s(347, 305), s(350, 301), s(333, 289), 
  s(307, 290), s(337, 304), s(312, 305), s(306, 301), s(316, 298), s(309, 313), s(324, 294), s(331, 279), 
]),
// Rook PST
Pst::new([
  s(556, 571), s(560, 571), s(560, 573), s(560, 571), s(560, 570), s(551, 570), s(554, 571), s(558, 569), 
  s(520, 559), s(532, 560), s(546, 562), s(551, 555), s(545, 552), s(552, 554), s(544, 551), s(546, 550), 
  s(502, 557), s(527, 556), s(525, 555), s(533, 552), s(549, 546), s(543, 541), s(557, 548), s(529, 541), 
  s(482, 560), s(510, 550), s(513, 560), s(520, 553), s(529, 543), s(523, 542), s(521, 542), s(499, 545), 
  s(470, 548), s(480, 552), s(494, 553), s(508, 547), s(512, 546), s(490, 544), s(512, 539), s(483, 538), 
  s(470, 541), s(478, 543), s(491, 534), s(493, 539), s(502, 535), s(505, 526), s(520, 517), s(490, 519), 
  s(460, 532), s(479, 534), s(491, 534), s(496, 532), s(501, 524), s(505, 522), s(528, 509), s(456, 526), 
  s(475, 538), s(478, 535), s(485, 536), s(495, 530), s(500, 524), s(491, 533), s(480, 530), s(479, 519), 
]),
// Queen PST
Pst::new([
  s(936, 969), s(953, 969), s(966, 972), s(968, 973), s(970, 974), s(957, 965), s(962, 957), s(964, 967), 
  s(925, 946), s(907, 962), s(938, 954), s(937, 958), s(929, 960), s(944, 941), s(955, 935), s(965, 952), 
  s(920, 949), s(918, 958), s(935, 961), s(935, 959), s(937, 953), s(945, 940), s(950, 923), s(937, 930), 
  s(916, 959), s(911, 961), s(924, 957), s(928, 960), s(940, 953), s(945, 937), s(944, 939), s(941, 922), 
  s(909, 951), s(909, 957), s(915, 958), s(925, 965), s(932, 959), s(924, 932), s(939, 911), s(931, 912), 
  s(906, 936), s(919, 949), s(920, 956), s(920, 954), s(922, 955), s(940, 914), s(943, 906), s(930, 901), 
  s(911, 922), s(913, 937), s(924, 932), s(931, 920), s(931, 920), s(943, 893), s(940, 899), s(926, 878), 
  s(901, 918), s(900, 918), s(906, 913), s(915, 912), s(912, 928), s(905, 911), s(910, 894), s(899, 905), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(155, 163), s(157, 160), s(152, 159), s(152, 154), s(142, 159), s(149, 157), s(146, 163), s(152, 165), 
  s(95, 156), s(93, 157), s(113, 146), s(116, 139), s(109, 134), s(139, 138), s(126, 155), s(87, 157), 
  s(67, 132), s(75, 117), s(86, 109), s(87, 96), s(109, 95), s(82, 107), s(86, 110), s(71, 115), 
  s(64, 106), s(64, 104), s(81, 96), s(93, 91), s(98, 87), s(84, 94), s(76, 91), s(67, 93), 
  s(66, 106), s(77, 99), s(84, 99), s(88, 104), s(100, 105), s(90, 101), s(98, 89), s(78, 94), 
  s(61, 114), s(69, 104), s(68, 111), s(70, 118), s(74, 126), s(88, 105), s(93, 96), s(67, 104), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-13, -41), s(-1, 2), s(17, 26), s(4, 38), s(2, 22), s(-5, 18), s(1, 3), s(-2, -38), 
  s(-12, -39), s(7, -4), s(-15, 19), s(26, 26), s(3, 20), s(0, 26), s(4, -3), s(-16, -31), 
  s(-27, -37), s(12, -15), s(-4, 16), s(-13, 25), s(1, 26), s(29, 19), s(27, -1), s(-14, -36), 
  s(12, -38), s(33, -8), s(20, 10), s(-11, 21), s(-14, 21), s(-5, 14), s(0, 0), s(-22, -32), 
  s(7, -37), s(31, -15), s(6, 9), s(-27, 22), s(-23, 23), s(4, 10), s(7, -4), s(-4, -26), 
  s(26, -27), s(35, -9), s(-15, 9), s(-24, 19), s(-17, 20), s(-6, 14), s(21, 0), s(4, -18), 
  s(48, -24), s(5, 1), s(-8, 10), s(-31, 16), s(-31, 21), s(-17, 15), s(14, 3), s(27, -23), 
  s(20, -24), s(28, 0), s(13, 9), s(-48, 19), s(0, 9), s(-40, 27), s(13, 5), s(20, -27), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(55, 63), s(57, 60), s(52, 59), s(52, 54), s(42, 59), s(49, 57), s(46, 63), s(52, 65), 
  s(56, 64), s(55, 64), s(41, 55), s(42, 46), s(49, 53), s(39, 54), s(8, 59), s(17, 64), 
  s(17, 50), s(16, 53), s(22, 44), s(21, 47), s(3, 47), s(30, 37), s(-6, 57), s(1, 58), 
  s(-3, 29), s(0, 33), s(-12, 30), s(0, 27), s(-16, 29), s(6, 22), s(8, 40), s(-3, 40), 
  s(-2, 1), s(-9, 24), s(-24, 20), s(-12, 10), s(-13, 7), s(-2, 9), s(-4, 31), s(14, 13), 
  s(-4, 7), s(-3, 17), s(-10, 8), s(-3, -2), s(9, -10), s(0, 8), s(2, 14), s(-2, 11), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-39, -58),
  s(-26, -59),
  s(-10, -34),
  s(-13, -20),
  s(-4, -8),
  s(-4, -9),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(30, 43),
  s(-15, -4),
  s(-2, -23),
  s(-13, -13),
  s(-22, -16),
  s(-11, -14),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(40, 62),
  s(62, 68),
  s(46, 35),
  s(19, 13),
  s(-2, -6),
  s(7, -6),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(40, 48);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(26, 1), s(28, 11), s(27, 14), s(28, 14), s(28, 17), s(28, 13), s(26, 8), s(25, -2), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(17, 0), s(24, 13), s(28, 19), s(31, 27), s(32, 32), s(34, 33), s(33, 34), s(30, 35), s(32, 30), s(33, 24), s(39, 23), s(8, 38), s(17, 15), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(10, 13), s(14, 21), s(15, 36), s(14, 45), s(18, 50), s(19, 55), s(20, 61), s(27, 59), s(29, 62), s(32, 63), s(37, 65), s(43, 66), s(45, 65), s(38, 63), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(32, -11), s(31, -17), s(34, 3), s(36, 18), s(37, 30), s(39, 34), s(40, 53), s(41, 59), s(42, 63), s(44, 66), s(45, 71), s(46, 69), s(50, 70), s(49, 71), s(54, 70), s(54, 71), s(59, 70), s(60, 69), s(63, 65), s(63, 66), s(63, 61), s(53, 52), s(47, 48), s(43, 45), s(37, 39), s(14, 18), s(6, 10), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(16, 17), s(27, 24), s(37, 28), s(47, 29), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 15), s(12, 19), s(16, 22), s(21, 25), s(21, 27), s(26, 26), s(30, 32), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(2, 23), s(6, 25), s(12, 30), s(17, 36), s(20, 40), s(24, 42), s(25, 46), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(9, 53), s(11, 61), s(12, 67), s(15, 64), s(18, 67), s(19, 67), s(21, 67), s(24, 66), s(27, 66), s(30, 59), s(30, 58), s(45, 40), s(36, 48), s(32, 36), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(68, 37);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(66, 56);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(68, 34);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(68, 36);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(38, 29);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(63, 21);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(57, -20);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(22, 26);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(60, 29);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(68, 53);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(64, 34);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(0, 56);

pub const TEMPO_BONUS: ScoreTuple = s(33, 18);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(15, -126), s(197, 243), s(361, -129), s(70, 326), s(-60, 4), s(-586, -138), s(-2, -214), s(577, 81), ],
  [s(239, 167), s(20, 120), s(263, -94), s(0, 370), s(-183, -743), s(-407, -14), s(0, -164), s(456, 353), ],
  [s(119, 0), s(162, 84), s(295, -1), s(117, 17), s(-276, 21), s(105, -13), s(-26, -94), s(476, -81), ],
  [s(-446, 266), s(212, -3173), s(396, -78), s(-7, 188), s(402, 204), s(134, 45), s(-19, -133), s(248, 123), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(36, 119), s(-126, 83), s(-303, 155), s(-44, -193), s(105, -32), s(107, 53), s(-54, 187), s(-215, -165), ],
  [s(-94, 33), s(-16, 77), s(-272, 46), s(34, -56), s(75, -36), s(101, 44), s(-61, 88), s(-258, -115), ],
  [s(-105, 120), s(-73, 91), s(-216, 92), s(-64, -48), s(215, -24), s(43, 2), s(-70, 11), s(-94, -102), ],
  [s(-132, -1484), s(-16, -56), s(-214, 68), s(-60, -128), s(186, -43), s(-95, -101), s(-72, 25), s(9, 18), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(236, -296), s(895, 292), s(717, -1096), s(-463, 459), s(707, -420), s(346, -106), s(-63, -9), s(728, 266), ],
  [s(834, -155), s(623, -28), s(287, -506), s(71, 288), s(-374, -510), s(116, 112), s(-21, 32), s(706, 750), ],
  [s(822, -67), s(-2728, 347), s(-1007, -291), s(375, 142), s(-480, -383), s(361, 114), s(-12, -7), s(643, 512), ],
  [s(27, 114), s(-2904, 590), s(-1931, 1444), s(-158, -141), s(-3796, -186), s(-5, 105), s(-5, 927), s(564, -246), ],
  [s(1126, 110), s(-3578, 785), s(-152, 1817), s(-1185, -535), s(-1899, 512), s(-235, 109), s(-14, 938), s(779, -890), ],
  [s(2526, 548), s(-3029, 500), s(493, 1218), s(170, -1534), s(-1902, 584), s(23, 102), s(-12, -588), s(857, -1204), ],
  [s(1143, 418), s(-1722, 265), s(-724, 959), s(2325, -3282), s(-1545, 527), s(-1948, 138), s(-11, -1107), s(1799, -1388), ],
  [s(1437, 628), s(-1181, 491), s(-228, 701), s(282, -2808), s(593, 501), s(1174, 163), s(-11, -1152), s(1069, -1921), ],
]);

pub const TROPISM: [ScoreTuple; 8] = 
  [s(-11, 2), s(-2, -10), s(11, 10), s(1, -7), s(2, 0), s(-3, 5), s(7, 0), s(5, 4), ];

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-704, 686), s(-2106, 430), s(594, -2263), s(-297, 105), s(2838, -1421), s(1617, 178), s(0, -1354), s(-1171, 1450), ],
  [s(-439, 831), s(2381, -783), s(3310, -3090), s(-2238, -359), s(1662, -1413), s(1335, 1191), s(-2, -1153), s(-1121, 1919), ],
  [s(-1260, 377), s(2304, 373), s(-139, -2518), s(-1157, -151), s(2184, -471), s(270, -1716), s(9, -854), s(-429, 1154), ],
  [s(527, 472), s(-3504, 240), s(915, -1767), s(910, 332), s(336, -700), s(-901, 65), s(0, -1563), s(277, 1156), ],
  [s(-1144, 1124), s(-255, 787), s(962, -1098), s(1531, 240), s(-814, -482), s(1149, -249), s(0, -1317), s(-967, 900), ],
  [s(-359, 415), s(-1912, 949), s(693, -1414), s(244, -23), s(420, -688), s(1131, 148), s(-11, -1469), s(-1487, -45), ],
  [s(449, 123), s(-650, -168), s(334, -74), s(-807, 305), s(82, -54), s(140, 289), s(-8, -707), s(357, 434), ],
  [s(-199, -282), s(-9, 44), s(-201, -225), s(83, 366), s(201, -11), s(424, -31), s(-12, -1425), s(-11, 36), ],
  [s(372, 27), s(-520, -47), s(-301, -214), s(-2247, 225), s(-63, -167), s(622, 311), s(-12, -797), s(368, 134), ],
  [s(-192, -204), s(41, -163), s(31, -205), s(-140, 408), s(301, 135), s(-62, -397), s(-24, -222), s(39, 593), ],
  [s(-270, -348), s(307, -90), s(-761, -277), s(-241, 836), s(-30, -183), s(508, 475), s(-24, -457), s(-306, 488), ],
  [s(-549, -185), s(204, -143), s(-274, -287), s(-93, 484), s(253, 107), s(346, 100), s(-18, -290), s(-56, 514), ],
  [s(-95, -139), s(266, -105), s(98, -231), s(-23, 306), s(123, -18), s(-331, -925), s(-22, -15), s(-99, 537), ],
  [s(327, -187), s(-112, 60), s(-620, -437), s(-302, 769), s(168, -600), s(105, 1114), s(-39, -9), s(-431, 224), ],
  [s(-474, -179), s(295, -124), s(-120, -341), s(139, 591), s(121, -43), s(184, -14), s(-35, 54), s(-320, 744), ],
  [s(-290, -127), s(195, 28), s(-25, -204), s(-2, 464), s(477, -306), s(-450, -701), s(-41, 0), s(-195, 558), ],
  [s(-17, -154), s(-124, -110), s(-220, -427), s(-224, 507), s(438, -1410), s(286, 791), s(-48, 25), s(-522, 340), ],
  [s(-503, -169), s(383, -329), s(-196, -348), s(214, 316), s(19, -702), s(59, 52), s(-39, 177), s(-277, 713), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(68, 415), s(102, -734), s(-253, 127), s(511, 649), s(240, -292), s(21, 373), s(-40, -129), s(-512, 1047), ],
  [s(-90, 618), s(601, -529), s(-1099, 608), s(70, 555), s(-92, -251), s(258, -19), s(-56, -515), s(-864, 412), ],
  [s(-549, 254), s(244, 235), s(-661, 425), s(256, 738), s(590, -148), s(255, 54), s(-43, -95), s(-854, 0), ],
  [s(192, 7), s(-171, -224), s(-90, 208), s(108, 455), s(-111, -46), s(836, -43), s(0, -334), s(-386, 218), ],
  [s(105, 230), s(-239, -166), s(-714, 287), s(1166, 572), s(105, 7), s(285, -47), s(-30, -901), s(-267, -76), ],
  [s(20, 123), s(138, -104), s(-391, 224), s(-22, 579), s(125, -155), s(239, 35), s(-32, -308), s(-314, 176), ],
  [s(396, 60), s(-317, 229), s(-80, 336), s(164, 839), s(255, 172), s(-144, 486), s(-4, -329), s(-404, 63), ],
  [s(814, -141), s(-491, 218), s(-392, 290), s(-49, 643), s(-186, 163), s(557, -429), s(-16, -730), s(-439, -225), ],
  [s(-170, 0), s(-209, 164), s(-177, 231), s(280, 828), s(483, 120), s(588, -11), s(-1, -283), s(-492, 311), ],
  [s(868, 218), s(-682, 768), s(-78, 326), s(-318, 1457), s(31, 394), s(495, 1004), s(-16, -136), s(-244, 277), ],
  [s(909, -135), s(-524, 682), s(-208, 250), s(216, 814), s(-129, 910), s(-157, -505), s(-7, -408), s(-289, -203), ],
  [s(796, 25), s(-148, 206), s(35, 288), s(19, 1298), s(-562, 317), s(-33, -5), s(-1, -100), s(90, 889), ],
  [s(1068, -278), s(-619, 774), s(421, -121), s(-69, 1147), s(-561, 1313), s(-553, 1787), s(-16, 2), s(-364, -541), ],
  [s(643, -618), s(-194, 541), s(1487, -86), s(398, 1114), s(-497, 1401), s(188, -90), s(-9, -326), s(-2149, 83), ],
  [s(879, -434), s(-233, 53), s(173, -81), s(419, 1141), s(-372, 1291), s(-1506, -5), s(-8, 363), s(139, 1226), ],
  [s(649, 1011), s(413, 660), s(433, -54), s(1047, 1043), s(-309, 1570), s(-114, 109), s(0, 357), s(-504, 1407), ],
  [s(-465, -1564), s(833, 566), s(-246, 564), s(151, -480), s(-969, 2124), s(143, 481), s(-2, 340), s(-1165, -1769), ],
  [s(-15, 455), s(367, 1066), s(506, 99), s(435, 1384), s(-963, 1135), s(-362, -660), s(7, 989), s(-1765, 1866), ],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(3564, -113), s(128, 1128), s(297, 315), s(-237, -708), s(-1160, -464), s(-265, -170), s(-63, 1329), s(1080, 2272), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(-938, 822), s(-1101, -848), s(1020, -964), s(-791, 1030), s(-701, -1110), s(-368, -553), s(34, 809), s(808, -968), ];

pub const OUTPUT_BIAS: ScoreTuple = s(0, 0);

/*
fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
desc: startpos
output: S(-369.79947242203696, -85.58460495862062) - S(-369.79947242203696, -85.58460495862062)
= S(0, 0)

fen: r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1
desc: kiwipete
output: S(-271.1594602855425, -102.13615788080827) - S(-325.08410018964673, -121.48433599574409)
= S(53.924639904104254, 19.34817811493582)

fen: r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7
desc: fried liver attack
output: S(-267.82572070049576, -134.4612742048221) - S(-290.5969185825522, -153.1131968301167)
= S(22.771197882056413, 18.65192262529459)

fen: 1r2r1k1/pbp1qpp1/1p1p4/4nPR1/4P3/P1N4P/1PPQB3/1K1R4 w - - 1 24
desc: wahoo vs akimbo
output: S(-237.91333501976908, -206.15780989443755) - S(-356.7829433552476, -99.74538157385231)
= S(118.86960833547852, -106.41242832058524)

fen: 2kr3r/ppp1qppp/2b2n2/4p3/4P3/P1P2Q2/P1B2PPP/R1B2RK1 w - - 7 14
output: S(-336.4745970371988, -171.44796316557762) - S(-363.8225804091458, -127.16655763267156)
= S(27.34798337194701, -44.281405532906064)

fen: rnbq1b1r/ppPknQ1p/3pp3/1B6/5pp1/BP2P3/P1PK1PPP/RN4NR b - - 4 11
output: S(-286.1005641021137, -235.34642621602873) - S(-439.188850342551, -155.40086945553372)
= S(153.0882862404373, -79.94555676049501)

fen: 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1
output: S(-254.5256172842886, -278.77211926845854) - S(-191.85536439031085, -281.03123118064025)
= S(-62.67025289397773, 2.2591119121817087)

fen: 8/3kp1p1/8/1p6/4PP2/5K2/1P6/8 w - - 0 1
output: S(-236.56619432696795, -175.46052354798047) - S(-280.124991843039, -191.73213512612088)
= S(43.55879751607108, 16.27161157814041)

fen: 2k1n3/3bp1p1/8/1p6/4PP2/5K2/1P2R3/8 w - - 0 1
output: S(-261.6676326653569, -149.80575721299587) - S(-221.91274746022356, -220.59791620964927)
= S(-39.75488520513335, 70.7921589966534)

fen: 8/8/3bk2p/1r2p1pP/p1p3P1/P1B1K3/1PP5/5R2 b - - 25 52
output: S(-208.70522419463163, -247.83123800839456) - S(-182.61951232334616, -233.48670035634683)
= S(-26.08571187128547, -14.344537652047734)

*/
