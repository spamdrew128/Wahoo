#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [[Pst; NUM_PIECES as usize]; 2] = [
[
// Knight PST
Pst::new([
  s(219, 254), s(220, 327), s(220, 352), s(346, 344), s(297, 357), s(259, 358), s(185, 347), s(167, 290), 
  s(287, 303), s(321, 324), s(348, 317), s(346, 328), s(344, 332), s(342, 329), s(315, 341), s(300, 314), 
  s(328, 307), s(338, 328), s(397, 332), s(355, 351), s(370, 347), s(374, 346), s(354, 319), s(316, 307), 
  s(359, 315), s(350, 349), s(389, 360), s(377, 367), s(394, 367), s(366, 364), s(350, 339), s(342, 321), 
  s(344, 334), s(366, 339), s(371, 358), s(373, 369), s(372, 367), s(357, 367), s(350, 338), s(331, 331), 
  s(330, 324), s(352, 328), s(358, 334), s(367, 356), s(351, 358), s(347, 337), s(332, 329), s(321, 310), 
  s(328, 307), s(327, 309), s(343, 321), s(347, 326), s(343, 321), s(323, 322), s(318, 303), s(305, 289), 
  s(310, 282), s(304, 313), s(323, 299), s(321, 309), s(316, 305), s(300, 294), s(301, 313), s(257, 276), 
]),
// Bishop PST
Pst::new([
  s(330, 365), s(298, 389), s(276, 382), s(258, 388), s(247, 391), s(244, 389), s(324, 376), s(340, 384), 
  s(305, 357), s(308, 380), s(346, 370), s(332, 359), s(316, 363), s(363, 356), s(369, 358), s(347, 353), 
  s(362, 364), s(367, 366), s(382, 369), s(359, 366), s(380, 347), s(380, 364), s(384, 355), s(368, 358), 
  s(357, 356), s(365, 359), s(391, 368), s(387, 376), s(409, 376), s(379, 365), s(371, 365), s(351, 357), 
  s(371, 335), s(355, 363), s(371, 369), s(394, 373), s(394, 372), s(374, 373), s(370, 357), s(358, 347), 
  s(375, 343), s(384, 349), s(385, 362), s(383, 371), s(380, 368), s(387, 364), s(383, 358), s(363, 339), 
  s(380, 332), s(400, 339), s(394, 343), s(376, 351), s(371, 349), s(388, 337), s(380, 331), s(385, 335), 
  s(376, 322), s(376, 336), s(353, 354), s(363, 342), s(353, 341), s(358, 346), s(384, 347), s(357, 327), 
]),
// Rook PST
Pst::new([
  s(584, 628), s(524, 652), s(552, 650), s(597, 629), s(568, 644), s(554, 649), s(599, 630), s(561, 644), 
  s(560, 628), s(560, 633), s(574, 638), s(556, 636), s(577, 634), s(555, 646), s(547, 641), s(541, 640), 
  s(546, 617), s(602, 618), s(564, 620), s(568, 624), s(546, 631), s(542, 631), s(553, 629), s(528, 631), 
  s(504, 627), s(525, 626), s(527, 633), s(540, 627), s(535, 625), s(530, 635), s(535, 622), s(505, 633), 
  s(492, 618), s(530, 616), s(500, 629), s(531, 620), s(524, 621), s(511, 625), s(501, 624), s(493, 619), 
  s(505, 598), s(534, 601), s(521, 605), s(524, 606), s(514, 609), s(513, 602), s(506, 606), s(494, 605), 
  s(468, 603), s(546, 582), s(516, 600), s(525, 597), s(521, 596), s(516, 600), s(503, 600), s(483, 599), 
  s(489, 588), s(484, 608), s(509, 599), s(519, 595), s(517, 593), s(509, 598), s(505, 596), s(501, 602), 
]),
// Queen PST
Pst::new([
  s(979, 1203), s(1044, 1158), s(991, 1235), s(981, 1248), s(994, 1235), s(971, 1248), s(966, 1221), s(923, 1247), 
  s(1010, 1066), s(962, 1097), s(964, 1137), s(918, 1174), s(937, 1149), s(963, 1099), s(945, 1097), s(959, 1081), 
  s(980, 1059), s(987, 1057), s(972, 1099), s(969, 1108), s(949, 1121), s(970, 1079), s(955, 1061), s(970, 1054), 
  s(966, 1062), s(965, 1084), s(965, 1082), s(959, 1094), s(954, 1104), s(960, 1071), s(950, 1074), s(955, 1062), 
  s(965, 1043), s(966, 1060), s(953, 1073), s(956, 1105), s(949, 1102), s(949, 1087), s(950, 1066), s(951, 1041), 
  s(963, 1029), s(973, 1043), s(970, 1050), s(951, 1089), s(954, 1079), s(957, 1070), s(962, 1046), s(955, 1033), 
  s(954, 985), s(966, 995), s(974, 998), s(968, 1035), s(968, 1034), s(967, 1023), s(957, 1032), s(960, 1016), 
  s(946, 984), s(946, 965), s(936, 1010), s(950, 1014), s(960, 995), s(950, 1007), s(944, 1020), s(943, 1023), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(104, 261), s(159, 232), s(181, 239), s(177, 217), s(146, 218), s(149, 204), s(111, 237), s(130, 232), 
  s(120, 162), s(143, 163), s(157, 143), s(124, 132), s(119, 128), s(126, 137), s(92, 149), s(86, 153), 
  s(85, 135), s(92, 125), s(108, 119), s(108, 112), s(99, 112), s(86, 122), s(75, 127), s(65, 136), 
  s(85, 110), s(83, 106), s(104, 104), s(101, 107), s(99, 107), s(83, 114), s(66, 114), s(61, 116), 
  s(93, 104), s(107, 96), s(104, 110), s(96, 121), s(93, 122), s(83, 116), s(74, 113), s(61, 116), 
  s(88, 103), s(118, 97), s(121, 115), s(82, 138), s(83, 130), s(71, 129), s(70, 119), s(61, 126), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-11, 10), s(-86, 95), s(-67, 102), s(-95, 114), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-96, 148), s(-51, 179), s(-102, 204), s(-20, 192), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-114, 95), s(-12, 114), s(-15, 128), s(-88, 145), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-104, 23), s(-50, 50), s(-40, 52), s(-85, 64), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-139, -9), s(-64, 2), s(-39, 10), s(-70, 27), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-69, -34), s(-16, -23), s(-19, -14), s(-24, -2), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(14, -62), s(20, -41), s(-11, -29), s(-28, -19), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(38, -106), s(40, -69), s(10, -52), s(10, -54), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]),
],
[
// Knight PST
Pst::new([
  s(167, 290), s(185, 347), s(259, 358), s(297, 357), s(346, 344), s(220, 352), s(220, 327), s(219, 254), 
  s(300, 314), s(315, 341), s(342, 329), s(344, 332), s(346, 328), s(348, 317), s(321, 324), s(287, 303), 
  s(316, 307), s(354, 319), s(374, 346), s(370, 347), s(355, 351), s(397, 332), s(338, 328), s(328, 307), 
  s(342, 321), s(350, 339), s(366, 364), s(394, 367), s(377, 367), s(389, 360), s(350, 349), s(359, 315), 
  s(331, 331), s(350, 338), s(357, 367), s(372, 367), s(373, 369), s(371, 358), s(366, 339), s(344, 334), 
  s(321, 310), s(332, 329), s(347, 337), s(351, 358), s(367, 356), s(358, 334), s(352, 328), s(330, 324), 
  s(305, 289), s(318, 303), s(323, 322), s(343, 321), s(347, 326), s(343, 321), s(327, 309), s(328, 307), 
  s(257, 276), s(301, 313), s(300, 294), s(316, 305), s(321, 309), s(323, 299), s(304, 313), s(310, 282), 
]),
// Bishop PST
Pst::new([
  s(340, 384), s(324, 376), s(244, 389), s(247, 391), s(258, 388), s(276, 382), s(298, 389), s(330, 365), 
  s(347, 353), s(369, 358), s(363, 356), s(316, 363), s(332, 359), s(346, 370), s(308, 380), s(305, 357), 
  s(368, 358), s(384, 355), s(380, 364), s(380, 347), s(359, 366), s(382, 369), s(367, 366), s(362, 364), 
  s(351, 357), s(371, 365), s(379, 365), s(409, 376), s(387, 376), s(391, 368), s(365, 359), s(357, 356), 
  s(358, 347), s(370, 357), s(374, 373), s(394, 372), s(394, 373), s(371, 369), s(355, 363), s(371, 335), 
  s(363, 339), s(383, 358), s(387, 364), s(380, 368), s(383, 371), s(385, 362), s(384, 349), s(375, 343), 
  s(385, 335), s(380, 331), s(388, 337), s(371, 349), s(376, 351), s(394, 343), s(400, 339), s(380, 332), 
  s(357, 327), s(384, 347), s(358, 346), s(353, 341), s(363, 342), s(353, 354), s(376, 336), s(376, 322), 
]),
// Rook PST
Pst::new([
  s(561, 644), s(599, 630), s(554, 649), s(568, 644), s(597, 629), s(552, 650), s(524, 652), s(584, 628), 
  s(541, 640), s(547, 641), s(555, 646), s(577, 634), s(556, 636), s(574, 638), s(560, 633), s(560, 628), 
  s(528, 631), s(553, 629), s(542, 631), s(546, 631), s(568, 624), s(564, 620), s(602, 618), s(546, 617), 
  s(505, 633), s(535, 622), s(530, 635), s(535, 625), s(540, 627), s(527, 633), s(525, 626), s(504, 627), 
  s(493, 619), s(501, 624), s(511, 625), s(524, 621), s(531, 620), s(500, 629), s(530, 616), s(492, 618), 
  s(494, 605), s(506, 606), s(513, 602), s(514, 609), s(524, 606), s(521, 605), s(534, 601), s(505, 598), 
  s(483, 599), s(503, 600), s(516, 600), s(521, 596), s(525, 597), s(516, 600), s(546, 582), s(468, 603), 
  s(501, 602), s(505, 596), s(509, 598), s(517, 593), s(519, 595), s(509, 599), s(484, 608), s(489, 588), 
]),
// Queen PST
Pst::new([
  s(923, 1247), s(966, 1221), s(971, 1248), s(994, 1235), s(981, 1248), s(991, 1235), s(1044, 1158), s(979, 1203), 
  s(959, 1081), s(945, 1097), s(963, 1099), s(937, 1149), s(918, 1174), s(964, 1137), s(962, 1097), s(1010, 1066), 
  s(970, 1054), s(955, 1061), s(970, 1079), s(949, 1121), s(969, 1108), s(972, 1099), s(987, 1057), s(980, 1059), 
  s(955, 1062), s(950, 1074), s(960, 1071), s(954, 1104), s(959, 1094), s(965, 1082), s(965, 1084), s(966, 1062), 
  s(951, 1041), s(950, 1066), s(949, 1087), s(949, 1102), s(956, 1105), s(953, 1073), s(966, 1060), s(965, 1043), 
  s(955, 1033), s(962, 1046), s(957, 1070), s(954, 1079), s(951, 1089), s(970, 1050), s(973, 1043), s(963, 1029), 
  s(960, 1016), s(957, 1032), s(967, 1023), s(968, 1034), s(968, 1035), s(974, 998), s(966, 995), s(954, 985), 
  s(943, 1023), s(944, 1020), s(950, 1007), s(960, 995), s(950, 1014), s(936, 1010), s(946, 965), s(946, 984), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(130, 232), s(111, 237), s(149, 204), s(146, 218), s(177, 217), s(181, 239), s(159, 232), s(104, 261), 
  s(86, 153), s(92, 149), s(126, 137), s(119, 128), s(124, 132), s(157, 143), s(143, 163), s(120, 162), 
  s(65, 136), s(75, 127), s(86, 122), s(99, 112), s(108, 112), s(108, 119), s(92, 125), s(85, 135), 
  s(61, 116), s(66, 114), s(83, 114), s(99, 107), s(101, 107), s(104, 104), s(83, 106), s(85, 110), 
  s(61, 116), s(74, 113), s(83, 116), s(93, 122), s(96, 121), s(104, 110), s(107, 96), s(93, 104), 
  s(61, 126), s(70, 119), s(71, 129), s(83, 130), s(82, 138), s(121, 115), s(118, 97), s(88, 103), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-95, 114), s(-67, 102), s(-86, 95), s(-11, 10), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-20, 192), s(-102, 204), s(-51, 179), s(-96, 148), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-88, 145), s(-15, 128), s(-12, 114), s(-114, 95), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-85, 64), s(-40, 52), s(-50, 50), s(-104, 23), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-70, 27), s(-39, 10), s(-64, 2), s(-139, -9), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-24, -2), s(-19, -14), s(-16, -23), s(-69, -34), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-28, -19), s(-11, -29), s(20, -41), s(14, -62), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(10, -54), s(10, -52), s(40, -69), s(38, -106), 
]),
],
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(85, 137), s(99, 123), s(65, 144), s(106, 106), s(13, 132), s(59, 97), s(-46, 148), s(-51, 164), 
  s(45, 142), s(45, 139), s(26, 121), s(35, 106), s(33, 107), s(32, 102), s(-14, 119), s(-44, 143), 
  s(35, 70), s(29, 68), s(29, 59), s(12, 58), s(8, 57), s(35, 45), s(-6, 72), s(-10, 67), 
  s(21, 34), s(8, 42), s(-9, 38), s(-2, 33), s(-14, 30), s(7, 24), s(16, 40), s(0, 36), 
  s(12, 4), s(-5, 27), s(-23, 19), s(-19, 13), s(-12, 6), s(10, 5), s(1, 27), s(12, 10), 
  s(0, 20), s(-3, 21), s(-14, 5), s(-8, 0), s(0, -2), s(4, 0), s(5, 6), s(-2, 11), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-47, -177),
  s(0, -110),
  s(-5, -46),
  s(-14, -17),
  s(-11, 5),
  s(-8, 0),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(62, -28),
  s(12, -31),
  s(-1, -27),
  s(-15, -16),
  s(-23, -20),
  s(-12, -20),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(23, 370),
  s(180, 158),
  s(52, 49),
  s(18, 15),
  s(-4, -4),
  s(3, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 67);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(24, 55), s(28, 70), s(27, 73), s(30, 73), s(30, 77), s(31, 74), s(29, 71), s(28, 62), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(7, 36), s(15, 56), s(18, 67), s(22, 77), s(23, 84), s(25, 87), s(24, 89), s(20, 93), s(21, 90), s(23, 84), s(29, 85), s(-19, 114), s(24, 74), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(1, 110), s(1, 128), s(2, 150), s(1, 160), s(3, 172), s(4, 178), s(5, 185), s(10, 189), s(11, 194), s(13, 196), s(16, 202), s(21, 204), s(32, 199), s(31, 195), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(51, 218), s(50, 231), s(53, 261), s(56, 274), s(58, 282), s(61, 284), s(62, 303), s(64, 309), s(66, 307), s(70, 310), s(70, 321), s(72, 315), s(75, 320), s(74, 324), s(79, 324), s(76, 329), s(85, 324), s(89, 323), s(110, 304), s(116, 306), s(165, 272), s(146, 272), s(175, 252), s(220, 238), s(269, 199), s(198, 231), s(202, 200), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(11, 27), s(19, 39), s(28, 45), s(35, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(2, 15), s(8, 20), s(12, 23), s(15, 28), s(15, 30), s(18, 29), s(21, 38), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 4), s(11, 9), s(19, 13), s(24, 20), s(28, 25), s(35, 26), s(39, 32), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 138), s(-12, 149), s(-12, 154), s(-11, 167), s(-12, 181), s(-12, 182), s(-12, 189), s(-12, 197), s(-13, 207), s(-11, 204), s(-16, 211), s(3, 196), s(-20, 233), s(20, 196), 
];

pub const PAWN_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(98, 87), s(75, 30)];
pub const PAWN_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(94, 68), s(74, 58)];
pub const PAWN_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(167, 133), s(110, 4)];
pub const PAWN_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(235, 114), s(99, -35)];
pub const KNIGHT_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(36, 31), s(39, 38)];
pub const KNIGHT_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(63, 69), s(83, 14)];
pub const KNIGHT_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(113, 233), s(64, -41)];
pub const BISHOP_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(18, 36), s(27, 30)];
pub const BISHOP_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(85, 91), s(66, 33)];
pub const BISHOP_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(122, 218), s(90, 22)];
pub const ROOK_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(116, 397), s(84, 5)];

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-26, 81);

pub const TEMPO_BONUS: ScoreTuple = s(34, 22);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-4, 10), s(5, -7), s(9, -4), s(12, -7), s(11, -5), s(11, -6), s(10, -5), s(12, -6), s(12, -7), s(11, -3), s(9, -2), s(10, -5), s(8, -2), s(10, -3), s(8, -4), s(7, -3), s(5, -1), s(3, 0), s(4, -4), s(4, -6), s(7, -9), s(1, -8), s(1, -10), s(1, -14), s(-1, -14), s(0, -20), s(3, -17), s(-64, -10), 
],
// Bishop attacks
[
  s(3, 8), s(8, -4), s(11, -5), s(10, -4), s(10, -2), s(11, -5), s(10, -5), s(10, -4), s(12, -6), s(10, -5), s(10, -6), s(9, -5), s(8, -5), s(7, -4), s(9, -7), s(6, -6), s(8, -7), s(6, -6), s(5, -7), s(3, -5), s(3, -4), s(3, -10), s(4, -6), s(1, -10), s(-2, -8), s(1, -15), s(5, -13), s(-7, -16), 
],
// Rook attacks
[
  s(5, 2), s(3, -2), s(5, -5), s(6, -7), s(5, -7), s(4, -5), s(5, -7), s(4, -5), s(5, -7), s(4, -6), s(4, -6), s(4, -7), s(2, -4), s(2, -4), s(2, -2), s(1, -1), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-1, 0), s(0, 0), s(-2, 0), s(-2, 0), s(-4, 1), s(-7, 0), s(-12, 3), s(1, -2), 
],
// Queen attacks
[
  s(-1, 4), s(1, -4), s(3, -7), s(5, -9), s(4, -6), s(3, -3), s(4, -5), s(5, -4), s(5, -6), s(6, -3), s(4, 0), s(6, -1), s(6, 0), s(8, -2), s(6, 0), s(8, -4), s(9, -4), s(11, -5), s(10, -4), s(15, -6), s(15, -7), s(9, -4), s(26, -14), s(17, -13), s(18, -8), s(18, -12), s(-19, 12), s(15, -20), 
],
// Pawn attacks
[
  s(1, 6), s(6, -2), s(4, -5), s(2, -4), s(1, -4), s(2, -4), s(1, -2), s(1, -4), s(0, -3), s(0, -2), s(0, -3), s(1, -3), s(0, -3), s(1, -3), s(1, -2), s(1, -3), s(2, -4), s(3, -4), s(3, -4), s(3, -4), s(4, -6), s(5, -6), s(7, -7), s(10, -9), s(12, -8), s(1, -5), s(32, -15), s(13, -10), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-5, 4), s(-1, 4), s(-4, 3), s(-3, 2), s(-4, 3), s(-3, 3), s(-3, 3), s(-3, 1), s(-3, 2), s(-4, 2), s(-3, 2), s(-3, 0), s(-5, 3), s(-4, 3), s(-3, 2), s(-5, 4), s(-5, 4), s(-2, 2), s(-2, 5), s(-2, 4), s(-4, 6), s(0, 7), s(-5, 8), s(-3, 11), s(-8, 12), s(-4, 18), s(-16, 15), s(1, 22), 
],
// Bishop defenses
[
  s(0, 1), s(-2, 0), s(-4, 2), s(-5, 2), s(-3, 2), s(-3, 2), s(-5, 3), s(-3, 2), s(-4, 2), s(-4, 3), s(-3, 1), s(-3, 1), s(-4, 3), s(-4, 2), s(-3, 2), s(-2, 0), s(-2, 0), s(0, 0), s(-2, 1), s(0, 0), s(-1, 0), s(-1, 2), s(-5, 3), s(0, 2), s(3, 3), s(0, 5), s(-2, 1), s(3, 10), 
],
// Rook defenses
[
  s(-21, 12), s(-4, 4), s(-5, 6), s(-5, 5), s(-4, 4), s(-5, 6), s(-3, 4), s(-4, 4), s(-4, 5), s(-4, 4), s(-3, 3), s(-3, 4), s(-1, 2), s(-3, 5), s(-2, 3), s(-2, 2), s(0, 1), s(-1, 2), s(-1, 3), s(-1, 3), s(-4, 4), s(-1, 3), s(-2, 4), s(-3, 4), s(-3, 4), s(-5, 4), s(4, 1), s(-4, 4), 
],
// Queen defenses
[
  s(2, -9), s(-2, 2), s(-2, 1), s(-2, 1), s(-3, 2), s(-2, 2), s(-3, 4), s(-3, 5), s(-4, 6), s(-3, 6), s(-3, 4), s(-3, 5), s(-2, 3), s(-2, 3), s(0, 0), s(-1, 4), s(0, 2), s(0, 3), s(0, 2), s(2, 0), s(3, 0), s(5, 0), s(-3, 8), s(-1, 7), s(0, 6), s(6, 3), s(7, 5), s(0, 5), 
],
// Pawn defenses
[
  s(-10, -4), s(-16, 3), s(-12, 1), s(-10, 2), s(-8, 0), s(-8, 0), s(-8, 0), s(-6, 0), s(-4, -1), s(-4, -2), s(-2, -3), s(-2, -2), s(0, -5), s(0, -5), s(0, -6), s(1, -7), s(1, -6), s(2, -8), s(3, -11), s(2, -10), s(7, -13), s(8, -15), s(12, -17), s(14, -18), s(15, -18), s(46, -29), s(8, -20), s(24, -25), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(88, 30),
  s(64, 44),
  s(51, 56),
  s(46, 63),
  s(43, 75),
  s(30, 104),
  s(40, 121),
  s(47, 100),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-173, -7), s(58, -29), s(69, -23), s(71, -26), s(79, -25), s(81, -28), s(80, -26), s(82, -26), s(82, -32), s(80, -27), s(79, -26), s(74, -26), s(75, -24), s(75, -28), s(73, -24), s(71, -21), s(69, -18), s(70, -25), s(66, -18), s(63, -16), s(65, -17), s(56, -7), s(56, -9), s(56, -9), s(57, -9), s(52, -3), s(54, -6), s(51, -5), s(46, 2), s(46, -1), s(45, 0), s(43, 0), s(41, 2), s(43, 3), s(41, 2), s(32, 12), s(34, 12), s(34, 10), s(34, 10), s(29, 17), s(29, 13), s(29, 17), s(26, 18), s(24, 20), s(24, 18), s(23, 22), s(18, 26), s(19, 23), s(19, 25), s(17, 27), s(15, 29), s(15, 27), s(13, 30), s(12, 31), s(8, 35), s(8, 38), s(6, 37), s(0, 43), s(1, 42), s(1, 43), s(-2, 44), s(0, 44), s(0, 46), s(-6, 50), s(-4, 50), s(-5, 50), s(-10, 55), s(-10, 54), s(-13, 58), s(-9, 54), s(-14, 57), s(-18, 64), s(-17, 57), s(-15, 57), s(-25, 69), s(-25, 67), s(-22, 67), s(-25, 69), s(-24, 69), s(-27, 72), s(-29, 74), s(-29, 76), s(-34, 80), s(-37, 82), s(-32, 80), s(-37, 79), s(-34, 85), s(-40, 83), s(-38, 78), s(-41, 87), s(-43, 92), s(-47, 95), s(-47, 95), s(-46, 85), s(-45, 85), s(-48, 104), s(-51, 96), s(-50, 100), s(-56, 104), s(-49, 101), s(-56, 111), s(-55, 107), s(-47, 100), s(-53, 111), s(-54, 113), s(-63, 100), s(-53, 112), s(-52, 111), s(-57, 121), s(-62, 114), s(-59, 106), s(-51, 113), s(-54, 108), s(-54, 110), s(-50, 67), s(-54, 152), s(-71, 120), s(-72, 122), s(-64, 69), s(-53, 175), s(-45, 167), s(-61, 192), s(-66, 150), s(-79, 90), s(-51, 186), s(-43, 160), s(-45, -81), s(-95, 205), s(-38, 85), s(-124, 147), s(-90, 158), s(-65, 186), s(-19, 66), s(-135, 34), s(-103, -21), s(-120, -81), s(-73, 16), s(173, 106), s(-27, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(48, 36), s(23, -5), s(41, 2), s(38, 8), s(39, 17), s(39, 10), s(31, 27), s(33, 18), s(36, 19), s(27, 28), s(26, 30), s(33, 18), s(24, 31), s(31, 25), s(31, 23), s(17, 34), s(23, 29), s(33, 17), s(11, 34), s(20, 33), s(24, 20), s(17, 33), s(12, 35), s(27, 25), s(11, 32), s(15, 30), s(20, 33), s(14, 28), s(6, 37), s(22, 23), s(19, 30), s(5, 32), s(12, 35), s(13, 29), s(3, 37), s(8, 39), s(21, 24), s(-9, 32), s(-3, 35), s(11, 22), s(4, 30), s(9, 28), s(-7, 22), s(-8, 21), s(-18, 30), s(49, 44), s(-182, 48), s(5, 13), s(73, 102), s(76, -94), s(-5, -134), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const FILE_STRUCTURE: [ScoreTuple; 193] = [
  s(12, 52), s(30, 37), s(37, 40), s(21, 37), s(16, 42), s(31, 26), s(29, -1), s(1, 1), s(20, 30), s(22, -23), s(1, 1), s(1, 1), s(10, -13), s(1, 1), s(1, 1), s(1, 1), s(24, 44), s(32, 28), s(21, 47), s(1, 1), s(30, 28), s(30, 25), s(1, 1), s(1, 1), s(27, 18), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(28, 33), s(33, 25), s(1, 1), s(1, 1), s(32, 16), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(29, 23), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(15, 51), s(30, 41), s(34, 52), s(1, 1), s(17, 41), s(36, 33), s(1, 1), s(1, 1), s(28, 26), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(24, 37), s(32, 21), s(1, 1), s(1, 1), s(25, 28), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(29, 10), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(9, 57), s(26, 48), s(1, 1), s(1, 1), s(20, 44), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(18, 39), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(6, 68), 
];

pub const STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(50, 90);

pub const NON_STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(32, -31);

pub const STM_ROOK_CONTACT_CHECKS: ScoreTuple = s(25, 0);

pub const NON_STM_ROOK_CONTACT_CHECKS: ScoreTuple = s(12, -6);
