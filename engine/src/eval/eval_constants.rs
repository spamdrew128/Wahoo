#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(192, 250), s(246, 296), s(278, 332), s(318, 313), s(336, 327), s(254, 303), s(260, 292), s(227, 230), 
  s(267, 299), s(302, 313), s(327, 307), s(313, 319), s(330, 303), s(341, 302), s(296, 304), s(294, 273), 
  s(283, 299), s(326, 309), s(346, 336), s(344, 334), s(330, 330), s(368, 320), s(326, 298), s(312, 275), 
  s(314, 300), s(326, 322), s(341, 347), s(376, 342), s(353, 340), s(370, 337), s(332, 317), s(343, 288), 
  s(307, 307), s(323, 314), s(336, 342), s(353, 337), s(350, 341), s(348, 331), s(344, 312), s(320, 302), 
  s(297, 287), s(309, 306), s(326, 315), s(328, 328), s(347, 325), s(334, 305), s(332, 295), s(305, 297), 
  s(277, 269), s(287, 283), s(297, 298), s(321, 294), s(322, 296), s(319, 294), s(305, 278), s(302, 281), 
  s(238, 252), s(274, 272), s(273, 275), s(287, 282), s(293, 279), s(299, 272), s(276, 284), s(277, 264), 
]),
// Bishop PST
Pst::new([
  s(314, 335), s(299, 334), s(259, 344), s(243, 353), s(261, 352), s(263, 346), s(305, 343), s(299, 324), 
  s(315, 308), s(322, 326), s(322, 323), s(287, 331), s(307, 326), s(319, 336), s(292, 336), s(297, 313), 
  s(323, 324), s(346, 319), s(336, 332), s(341, 323), s(322, 331), s(354, 338), s(326, 335), s(343, 319), 
  s(314, 316), s(333, 325), s(338, 333), s(367, 345), s(346, 345), s(358, 338), s(328, 328), s(327, 319), 
  s(319, 304), s(329, 322), s(337, 333), s(355, 338), s(354, 336), s(329, 335), s(322, 325), s(331, 299), 
  s(323, 302), s(344, 312), s(347, 322), s(341, 327), s(342, 332), s(345, 324), s(339, 313), s(338, 296), 
  s(340, 294), s(339, 292), s(347, 295), s(331, 308), s(336, 309), s(351, 304), s(356, 298), s(338, 285), 
  s(314, 278), s(342, 296), s(316, 301), s(312, 293), s(321, 291), s(313, 310), s(333, 285), s(335, 270), 
]),
// Rook PST
Pst::new([
  s(538, 589), s(547, 592), s(528, 608), s(547, 598), s(562, 591), s(533, 596), s(538, 598), s(561, 586), 
  s(523, 570), s(530, 578), s(541, 586), s(555, 577), s(544, 574), s(553, 573), s(549, 567), s(553, 564), 
  s(508, 563), s(529, 569), s(526, 570), s(531, 570), s(554, 562), s(542, 557), s(577, 556), s(535, 551), 
  s(488, 564), s(514, 559), s(511, 577), s(518, 569), s(527, 559), s(519, 557), s(522, 555), s(497, 556), 
  s(478, 548), s(485, 557), s(497, 561), s(510, 556), s(515, 555), s(480, 558), s(510, 550), s(480, 548), 
  s(479, 537), s(485, 544), s(497, 537), s(498, 544), s(506, 542), s(503, 534), s(519, 525), s(490, 525), 
  s(467, 528), s(486, 531), s(497, 533), s(501, 534), s(506, 527), s(503, 527), s(529, 513), s(454, 533), 
  s(483, 528), s(486, 526), s(493, 528), s(502, 523), s(505, 519), s(498, 528), s(485, 528), s(477, 518), 
]),
// Queen PST
Pst::new([
  s(940, 1041), s(970, 1035), s(995, 1040), s(1006, 1037), s(1003, 1039), s(996, 1027), s(1012, 1008), s(996, 1028), 
  s(928, 959), s(908, 985), s(937, 985), s(925, 1003), s(910, 1009), s(934, 974), s(953, 959), s(986, 961), 
  s(925, 963), s(914, 983), s(932, 995), s(927, 997), s(930, 985), s(950, 962), s(944, 939), s(945, 944), 
  s(914, 975), s(912, 990), s(921, 978), s(918, 993), s(934, 977), s(940, 960), s(940, 964), s(935, 947), 
  s(915, 957), s(912, 977), s(915, 989), s(918, 1008), s(927, 998), s(918, 963), s(934, 938), s(927, 939), 
  s(912, 947), s(924, 959), s(921, 981), s(919, 990), s(921, 996), s(935, 952), s(942, 943), s(930, 932), 
  s(916, 930), s(918, 943), s(927, 940), s(934, 946), s(931, 957), s(944, 921), s(943, 926), s(940, 893), 
  s(904, 939), s(903, 939), s(908, 936), s(917, 934), s(913, 952), s(905, 935), s(921, 910), s(903, 927), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(171, 190), s(173, 184), s(168, 185), s(178, 175), s(148, 186), s(171, 180), s(133, 196), s(128, 204), 
  s(85, 159), s(79, 160), s(113, 151), s(115, 144), s(110, 137), s(153, 148), s(134, 160), s(105, 160), 
  s(67, 134), s(73, 118), s(84, 114), s(93, 95), s(107, 99), s(101, 103), s(89, 112), s(82, 117), 
  s(63, 109), s(61, 106), s(81, 100), s(96, 92), s(98, 91), s(94, 92), s(77, 92), s(76, 94), 
  s(67, 108), s(74, 103), s(84, 103), s(89, 108), s(99, 111), s(97, 104), s(105, 92), s(86, 96), 
  s(63, 116), s(69, 107), s(70, 115), s(85, 116), s(85, 129), s(111, 110), s(107, 97), s(76, 102), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-9, -40), s(-6, 9), s(17, 37), s(-11, 54), s(-4, 32), s(-12, 27), s(4, 14), s(8, -37), 
  s(-2, -21), s(9, 19), s(-28, 48), s(33, 56), s(2, 49), s(1, 51), s(15, 16), s(-6, -9), 
  s(-24, -16), s(20, 6), s(-5, 41), s(-14, 54), s(5, 54), s(43, 45), s(45, 19), s(7, -16), 
  s(26, -21), s(38, 7), s(10, 29), s(-18, 39), s(-25, 40), s(-12, 31), s(-13, 18), s(-34, -11), 
  s(10, -34), s(19, -10), s(-15, 16), s(-41, 28), s(-43, 27), s(-27, 17), s(-34, 4), s(-52, -14), 
  s(6, -32), s(0, -12), s(-48, 5), s(-53, 14), s(-55, 15), s(-56, 12), s(-28, 0), s(-38, -16), 
  s(39, -15), s(-1, 4), s(-16, 12), s(-51, 21), s(-53, 27), s(-35, 22), s(9, 7), s(19, -10), 
  s(42, -53), s(57, -33), s(28, -17), s(-57, 0), s(-11, -11), s(-37, 2), s(31, -22), s(35, -52), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(71, 90), s(73, 84), s(68, 85), s(78, 75), s(48, 86), s(71, 80), s(33, 96), s(28, 104), 
  s(64, 98), s(69, 96), s(49, 75), s(45, 62), s(48, 74), s(25, 70), s(-7, 81), s(-20, 102), 
  s(29, 57), s(28, 59), s(29, 47), s(15, 56), s(3, 51), s(17, 45), s(-19, 67), s(-13, 70), 
  s(14, 29), s(8, 35), s(-13, 33), s(-3, 32), s(-18, 31), s(-3, 26), s(0, 43), s(-6, 45), 
  s(7, 4), s(-10, 28), s(-30, 26), s(-18, 16), s(-19, 12), s(-8, 15), s(-15, 38), s(13, 20), 
  s(-3, 13), s(-4, 24), s(-15, 15), s(-10, 5), s(-1, -2), s(-15, 12), s(-8, 22), s(-4, 19), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-60, -101),
  s(-21, -74),
  s(-5, -42),
  s(-9, -24),
  s(-5, -8),
  s(-7, -10),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(10, 25),
  s(-4, -20),
  s(0, -27),
  s(-12, -15),
  s(-25, -19),
  s(-15, -16),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(58, 118),
  s(104, 123),
  s(52, 40),
  s(20, 15),
  s(-4, -5),
  s(5, -7),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(40, 58);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(28, 5), s(30, 15), s(28, 17), s(29, 15), s(28, 18), s(28, 12), s(26, 7), s(26, -6), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(18, 2), s(26, 15), s(30, 20), s(34, 27), s(36, 31), s(37, 32), s(36, 32), s(32, 34), s(34, 28), s(35, 22), s(42, 20), s(3, 42), s(24, 12), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(8, 42), s(10, 53), s(11, 70), s(11, 78), s(13, 83), s(14, 86), s(15, 91), s(20, 91), s(20, 95), s(21, 96), s(23, 100), s(26, 101), s(30, 98), s(24, 94), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(44, 0), s(41, 5), s(43, 40), s(44, 63), s(44, 81), s(46, 89), s(46, 113), s(47, 122), s(47, 126), s(49, 130), s(49, 140), s(50, 136), s(53, 138), s(51, 141), s(56, 140), s(55, 141), s(65, 133), s(70, 130), s(88, 114), s(93, 113), s(108, 100), s(93, 93), s(89, 86), s(87, 87), s(76, 76), s(37, 53), s(23, 37), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(17, 20), s(29, 27), s(40, 30), s(50, 32), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 16), s(12, 21), s(17, 24), s(21, 27), s(23, 29), s(28, 27), s(33, 31), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(2, 19), s(7, 22), s(14, 27), s(20, 33), s(25, 37), s(32, 39), s(36, 46), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(3, 99), s(6, 105), s(6, 109), s(8, 113), s(10, 119), s(10, 119), s(12, 120), s(15, 120), s(17, 124), s(23, 113), s(22, 113), s(49, 83), s(41, 95), s(61, 74), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 27);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(75, 51);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(108, 10);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(95, -14);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 31);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(78, 12);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(66, -50);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 27);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(69, 26);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(88, 31);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(87, 2);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-25, 69);

pub const TEMPO_BONUS: ScoreTuple = s(34, 20);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(68, 2), s(145, 1166), s(102, -1), s(-415, -413), s(2733, 59), s(184, 42), s(1330, -457), s(186, -1132), ],
  [s(247, 6), s(237, 1012), s(181, -7), s(-208, -1466), s(2173, -105), s(390, 187), s(1080, -760), s(299, -1238), ],
  [s(-368, -29), s(-732, -176), s(-767, -8), s(-394, -9), s(1669, 148), s(-198, 268), s(450, -173), s(1261, -53), ],
  [s(-224, -207), s(-461, 72), s(-1045, -109), s(63, -208), s(1674, 380), s(-182, -3775), s(310, 208), s(578, -1652), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-781, -44), s(-768, 76), s(-596, -81), s(276, 157), s(-960, -620), s(-915, 149), s(-633, -1080), s(-486, 797), ],
  [s(-1162, -41), s(-1369, -121), s(-1093, -11), s(352, -95), s(-1052, -765), s(-941, 98), s(-1216, -174), s(-553, 290), ],
  [s(-1108, -53), s(-924, 285), s(-755, -11), s(161, 84), s(-285, -822), s(-875, -8), s(-494, -64), s(-217, 347), ],
  [s(-647, -38), s(-570, -217), s(-758, -19), s(-461, 0), s(-271, -1521), s(-722, -438), s(-466, 481), s(-512, 388), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(-1216, -31), s(-473, 356), s(-707, -37), s(-884, -2659), s(3711, -517), s(-995, 742), s(-720, 2224), s(-625, -1795), ],
  [s(-295, -28), s(-459, 714), s(-545, -16), s(624, -1301), s(484, -436), s(-206, 548), s(387, 1592), s(-1275, -1791), ],
  [s(-659, -48), s(-725, 1116), s(-639, -10), s(3205, -70), s(-324, -714), s(-608, 1860), s(141, 1254), s(-168, 458), ],
  [s(-547, -14), s(-500, 666), s(-518, -13), s(4944, 1018), s(1872, -1369), s(-457, 2432), s(-301, 1423), s(300, 1603), ],
  [s(-175, -51), s(-350, 42), s(-419, -17), s(5048, 2371), s(2856, -2026), s(-41, 2930), s(-1570, 768), s(3190, 3106), ],
  [s(-60, -8), s(-247, -2792), s(-508, 1), s(3693, 2725), s(1413, -1887), s(-17, 4131), s(-1940, 549), s(4901, 5156), ],
  [s(103, 0), s(-22, -1952), s(-281, -3), s(1063, 2601), s(3707, -1471), s(205, 4548), s(-875, 587), s(4465, 6364), ],
  [s(-161, -11), s(-56, -1567), s(-281, -9), s(1090, 2004), s(5209, 28), s(-102, 3186), s(-789, 289), s(5796, 5794), ],
]);

pub const TROPISM: [ScoreTuple; 8] = 
  [s(-967, -97), s(-1211, -410), s(-1314, -44), s(-39, -36), s(-91, -882), s(-823, -84), s(-702, -2033), s(-650, -120), ];

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-412, -1), s(-225, 1834), s(-453, -9), s(-3408, -4476), s(69, 555), s(-304, 5307), s(-15, -204), s(4065, 2319), ],
  [s(-255, 11), s(-135, -2591), s(-303, 2), s(-1037, -4671), s(-2359, -478), s(-154, 5935), s(5, 332), s(6348, 4095), ],
  [s(-265, 0), s(-128, 1475), s(-329, -6), s(257, -4062), s(-5704, 641), s(-164, 5641), s(-749, 1262), s(1271, 4057), ],
  [s(-231, 3), s(-124, 1027), s(-353, -11), s(-5119, -4571), s(4611, 96), s(-120, 3449), s(1025, -716), s(1514, 399), ],
  [s(-186, 9), s(-59, -1079), s(-283, -5), s(-4098, -4269), s(4191, -532), s(-79, 3327), s(1349, 399), s(2674, 1525), ],
  [s(-116, -1), s(-41, 2054), s(-242, -12), s(-3935, -3371), s(3936, 54), s(-24, 3189), s(983, -226), s(1579, 1198), ],
  [s(133, -10), s(-90, 1454), s(-394, -9), s(-5151, 40), s(3252, -1291), s(162, 857), s(693, -640), s(-144, -246), ],
  [s(-202, 9), s(-299, 653), s(-565, -7), s(-4693, -884), s(969, -1355), s(-87, 662), s(125, -707), s(-183, -1078), ],
  [s(-348, 6), s(-235, 909), s(-534, -9), s(-5278, -294), s(2251, -1368), s(-192, 830), s(-1137, -580), s(579, -100), ],
  [s(-183, -7), s(-370, -547), s(-514, 3), s(-1210, -887), s(768, -793), s(-85, 81), s(747, 40), s(-359, -1857), ],
  [s(-583, 5), s(-474, -1159), s(-642, -7), s(-1247, -2413), s(-1696, -779), s(-469, 205), s(-26, 90), s(-622, -2336), ],
  [s(-718, -9), s(-505, -106), s(-561, -7), s(-516, -523), s(423, -945), s(-619, 118), s(-2100, -202), s(-996, -1420), ],
  [s(-877, -15), s(-654, -148), s(-696, 8), s(-15, -1497), s(-318, -682), s(-646, -138), s(-1124, -275), s(-985, -2994), ],
  [s(-853, -10), s(-582, -192), s(-673, -8), s(-263, -2039), s(-2494, -1104), s(-632, -34), s(-715, 199), s(-944, -3140), ],
  [s(-1038, -9), s(-698, -68), s(-681, -6), s(-122, -1222), s(-810, -763), s(-803, -72), s(-1153, -65), s(-294, -1839), ],
  [s(-859, 4), s(-614, 115), s(-766, 1), s(-78, -1453), s(-213, -1010), s(-681, 40), s(-1231, -340), s(-807, -2273), ],
  [s(-464, -2), s(-451, -64), s(-566, -7), s(-274, -2092), s(-1914, -272), s(-323, 132), s(-97, -446), s(-112, -1856), ],
  [s(-680, -10), s(-572, -87), s(-636, -1), s(-13, -1863), s(-1475, -626), s(-553, 104), s(-118, -446), s(-518, -1132), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-692, -2), s(-541, -457), s(-797, -3), s(-447, -223), s(-2207, -1181), s(-639, -192), s(-1454, 1036), s(-134, -876), ],
  [s(-638, -10), s(-529, -610), s(-870, -8), s(-406, 344), s(-4956, -1034), s(-625, -637), s(-993, 767), s(-820, -898), ],
  [s(-588, -14), s(-291, 204), s(-522, -3), s(537, 584), s(-2673, -753), s(-395, -768), s(-811, 1109), s(-434, -983), ],
  [s(324, -11), s(57, -519), s(-333, 2), s(-2001, 693), s(-823, -318), s(425, -204), s(938, 505), s(-571, -491), ],
  [s(23, -15), s(-277, -915), s(-551, -5), s(-2518, 1114), s(-1940, -446), s(184, -372), s(368, 618), s(-501, -77), ],
  [s(-567, -13), s(-455, -279), s(-613, -5), s(-1137, 528), s(-1138, -527), s(-403, -476), s(-364, 773), s(-845, -543), ],
  [s(331, -13), s(-102, 283), s(-326, -10), s(-2774, 1435), s(-233, -296), s(438, -102), s(-1025, 161), s(-1402, -1560), ],
  [s(108, -9), s(-207, -192), s(-510, -3), s(-3392, 2279), s(-1373, -414), s(329, -394), s(396, -110), s(-1704, -1029), ],
  [s(-311, -13), s(-415, -308), s(-546, 12), s(-1714, 796), s(-648, -327), s(-309, -133), s(-314, 685), s(-794, -1526), ],
  [s(-256, -42), s(-341, -226), s(-513, -5), s(-2714, 1702), s(679, -589), s(-224, 273), s(-1189, -216), s(-1772, -5049), ],
  [s(-447, -12), s(-393, -820), s(-616, 0), s(-4248, 2053), s(-470, -614), s(-349, -124), s(-1198, 234), s(-1905, -3414), ],
  [s(-353, -10), s(-265, -415), s(-482, -7), s(-3792, 1080), s(950, -492), s(-217, 78), s(-32, 401), s(-2334, -3469), ],
  [s(111, 4), s(-32, -1836), s(-167, -9), s(-1668, 2626), s(1864, -1725), s(229, 392), s(-1507, 130), s(-1520, -4916), ],
  [s(-52, -2), s(-183, -2516), s(-416, 8), s(-2706, 2658), s(1186, -1714), s(-35, 243), s(-1831, 934), s(-2917, -4419), ],
  [s(108, -11), s(-33, -1918), s(-203, 3), s(-1163, 2104), s(250, -1738), s(148, 435), s(-1644, 1385), s(-1146, -4867), ],
  [s(703, 2), s(311, -2558), s(499, 6), s(433, 2625), s(-3211, -1757), s(499, 502), s(-1079, 3455), s(-930, -3734), ],
  [s(547, 2), s(219, -2340), s(377, 0), s(-307, 2699), s(-2415, -1672), s(566, 261), s(-1092, 4189), s(-3497, -4401), ],
  [s(616, 0), s(269, -2293), s(488, -9), s(1082, 2003), s(-2715, -1680), s(508, 1404), s(-31, 959), s(-1435, -4324), ],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(-755, -147), s(-758, 1139), s(-616, -102), s(3120, -256), s(4707, -760), s(-794, 4489), s(-1054, 1059), s(169, -113), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(-260, 32), s(-422, -112), s(-206, 65), s(320, -287), s(249, -376), s(-350, -367), s(-534, -341), s(128, 449), ];

pub const OUTPUT_BIAS: ScoreTuple = s(0, 0);

/*
fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
desc: startpos
output: S(-0.0416139748125421, 0.08774555765630551) - S(-0.0416139748125421, 0.08774555765630551)
= S(0, 0)

fen: r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1
desc: kiwipete
output: S(-0.0416139748125421, 0.08774555765630551) - S(-0.0416139748125421, 0.08774555765630551)
= S(0, 0)

fen: r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7
desc: fried liver attack
output: S(-0.0416139748125421, 0.08774555765630551) - S(-0.0416139748125421, 0.08774555765630551)
= S(0, 0)

fen: 1r2r1k1/pbp1qpp1/1p1p4/4nPR1/4P3/P1N4P/1PPQB3/1K1R4 w - - 1 24
desc: wahoo vs akimbo
output: S(26.910090156937763, 0.08774555765630551) - S(-0.0416139748125421, 0.08774555765630551)
= S(26.951704131750304, 0)

fen: 2kr3r/ppp1qppp/2b2n2/4p3/4P3/P1P2Q2/P1B2PPP/R1B2RK1 w - - 7 14
output: S(-0.0416139748125421, 0.08774555765630551) - S(-0.0416139748125421, 0.08774555765630551)
= S(0, 0)

fen: rnbq1b1r/ppPknQ1p/3pp3/1B6/5pp1/BP2P3/P1PK1PPP/RN4NR b - - 4 11
output: S(1.9414699732654337, 0.08774555765630551) - S(0.5587663201214033, 0.08774555765630551)
= S(1.3827036531440304, 0)

fen: 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1
output: S(187.19279360660744, -183.76951831196348) - S(158.3726541517159, -177.55359862775248)
= S(28.820139454891546, -6.215919684211002)

fen: 8/3kp1p1/8/1p6/4PP2/5K2/1P6/8 w - - 0 1
output: S(118.49557002944195, -185.8071734065901) - S(17.876510080023866, -184.83861216103304)
= S(100.61905994941809, -0.9685612455570549)

fen: 2k1n3/3bp1p1/8/1p6/4PP2/5K2/1P2R3/8 w - - 0 1
output: S(56.61642422063854, -98.28731135653175) - S(89.08776840640104, -112.96072982965661)
= S(-32.4713441857625, 14.673418473124869)

fen: 8/8/3bk2p/1r2p1pP/p1p3P1/P1B1K3/1PP5/5R2 b - - 25 52
output: S(162.65235202227962, -137.2902274543668) - S(115.47904940348975, -139.55293545274307)
= S(47.17330261878986, 2.2627079983762712)

*/
