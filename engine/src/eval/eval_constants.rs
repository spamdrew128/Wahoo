#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(169, 289), s(208, 337), s(267, 366), s(318, 343), s(328, 359), s(221, 338), s(193, 340), s(218, 252), 
  s(289, 320), s(323, 335), s(348, 325), s(333, 339), s(356, 321), s(346, 323), s(308, 330), s(310, 293), 
  s(309, 318), s(352, 326), s(375, 349), s(371, 350), s(355, 349), s(395, 332), s(343, 319), s(332, 295), 
  s(339, 324), s(352, 344), s(367, 366), s(399, 367), s(373, 367), s(389, 360), s(349, 344), s(362, 311), 
  s(333, 331), s(348, 338), s(360, 367), s(374, 366), s(372, 370), s(370, 358), s(366, 340), s(341, 335), 
  s(322, 310), s(334, 332), s(351, 340), s(351, 356), s(367, 357), s(357, 332), s(352, 326), s(328, 325), 
  s(304, 290), s(313, 309), s(324, 322), s(344, 322), s(345, 323), s(339, 321), s(327, 303), s(324, 308), 
  s(268, 279), s(302, 310), s(302, 299), s(312, 309), s(319, 306), s(321, 294), s(300, 321), s(308, 280), 
]),
// Bishop PST
Pst::new([
  s(339, 383), s(316, 377), s(267, 383), s(245, 389), s(265, 387), s(257, 384), s(306, 387), s(325, 365), 
  s(346, 351), s(357, 364), s(358, 356), s(315, 362), s(336, 357), s(347, 368), s(323, 371), s(310, 356), 
  s(360, 365), s(387, 353), s(377, 361), s(378, 351), s(362, 358), s(383, 370), s(358, 368), s(367, 357), 
  s(353, 354), s(373, 360), s(379, 363), s(410, 374), s(385, 374), s(390, 369), s(363, 363), s(357, 357), 
  s(360, 344), s(371, 357), s(376, 370), s(396, 372), s(391, 370), s(369, 369), s(355, 362), s(368, 338), 
  s(364, 342), s(386, 355), s(389, 361), s(381, 366), s(380, 372), s(382, 363), s(379, 353), s(374, 339), 
  s(383, 341), s(383, 330), s(389, 337), s(372, 348), s(375, 351), s(387, 345), s(394, 342), s(378, 328), 
  s(354, 330), s(383, 350), s(357, 347), s(352, 342), s(360, 342), s(353, 354), s(370, 335), s(375, 320), 
]),
// Rook PST
Pst::new([
  s(560, 642), s(582, 635), s(554, 652), s(576, 639), s(597, 629), s(554, 641), s(560, 640), s(588, 628), 
  s(541, 638), s(543, 643), s(556, 648), s(571, 636), s(561, 631), s(562, 636), s(557, 628), s(561, 628), 
  s(525, 631), s(547, 631), s(543, 630), s(546, 630), s(563, 623), s(552, 621), s(602, 614), s(547, 615), 
  s(503, 634), s(531, 623), s(525, 640), s(531, 631), s(539, 620), s(525, 624), s(526, 622), s(502, 624), 
  s(493, 619), s(502, 622), s(511, 625), s(525, 619), s(527, 619), s(494, 626), s(519, 617), s(489, 617), 
  s(493, 608), s(501, 612), s(514, 601), s(515, 607), s(519, 606), s(516, 602), s(531, 591), s(500, 592), 
  s(482, 601), s(502, 601), s(514, 602), s(518, 600), s(522, 593), s(511, 598), s(531, 583), s(466, 601), 
  s(498, 604), s(501, 599), s(507, 601), s(515, 596), s(514, 592), s(505, 595), s(491, 600), s(490, 590), 
]),
// Queen PST
Pst::new([
  s(922, 1232), s(955, 1224), s(963, 1253), s(983, 1241), s(980, 1244), s(983, 1227), s(1058, 1148), s(986, 1210), 
  s(957, 1073), s(935, 1100), s(954, 1115), s(934, 1148), s(918, 1172), s(960, 1117), s(986, 1074), s(1015, 1072), 
  s(959, 1058), s(942, 1074), s(961, 1086), s(951, 1117), s(963, 1109), s(983, 1083), s(993, 1038), s(990, 1054), 
  s(948, 1067), s(945, 1074), s(953, 1076), s(948, 1101), s(964, 1092), s(968, 1075), s(972, 1079), s(968, 1061), 
  s(952, 1038), s(946, 1074), s(948, 1086), s(947, 1111), s(955, 1097), s(952, 1075), s(968, 1053), s(967, 1047), 
  s(952, 1033), s(961, 1046), s(956, 1070), s(953, 1077), s(952, 1088), s(970, 1050), s(978, 1037), s(968, 1030), 
  s(956, 1016), s(956, 1026), s(967, 1018), s(970, 1027), s(967, 1037), s(976, 997), s(972, 995), s(974, 975), 
  s(945, 1018), s(946, 1012), s(950, 1009), s(960, 995), s(956, 1003), s(940, 999), s(954, 973), s(942, 1006), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(152, 240), s(153, 230), s(153, 231), s(174, 213), s(136, 224), s(157, 213), s(92, 242), s(77, 257), 
  s(86, 166), s(81, 156), s(112, 147), s(113, 142), s(123, 123), s(165, 133), s(148, 152), s(114, 153), 
  s(68, 149), s(78, 131), s(86, 125), s(95, 107), s(110, 114), s(103, 114), s(84, 121), s(75, 125), 
  s(65, 123), s(68, 118), s(83, 113), s(100, 106), s(99, 107), s(96, 105), s(74, 103), s(73, 106), 
  s(68, 120), s(79, 112), s(85, 113), s(91, 120), s(93, 121), s(95, 113), s(92, 99), s(78, 103), 
  s(65, 128), s(75, 118), s(72, 126), s(81, 129), s(78, 137), s(107, 118), s(95, 103), s(71, 105), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-24, 4), s(-52, 74), s(32, 80), s(-73, 114), s(-45, 84), s(-93, 94), s(-47, 89), s(81, -9), 
  s(-83, 113), s(-52, 156), s(-116, 181), s(36, 165), s(-43, 161), s(-52, 171), s(-17, 149), s(-93, 129), 
  s(-131, 87), s(-28, 100), s(-53, 123), s(-81, 133), s(-40, 125), s(59, 107), s(36, 103), s(-39, 72), 
  s(-64, 21), s(-41, 52), s(-51, 61), s(-94, 68), s(-100, 63), s(-68, 54), s(-87, 55), s(-146, 29), 
  s(-95, -16), s(-40, 7), s(-57, 26), s(-77, 34), s(-73, 29), s(-48, 12), s(-86, 10), s(-155, 0), 
  s(-42, -36), s(-7, -19), s(-30, -4), s(-25, 1), s(-24, -1), s(-21, -12), s(-21, -19), s(-72, -31), 
  s(19, -63), s(8, -38), s(-7, -27), s(-35, -18), s(-31, -17), s(-17, -28), s(18, -41), s(14, -63), 
  s(36, -103), s(67, -84), s(44, -59), s(-36, -38), s(11, -54), s(-8, -47), s(43, -72), s(39, -107), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(52, 140), s(53, 130), s(53, 131), s(74, 113), s(36, 124), s(57, 113), s(-7, 142), s(-22, 157), 
  s(48, 132), s(59, 138), s(43, 113), s(40, 93), s(31, 116), s(10, 110), s(-34, 126), s(-49, 149), 
  s(36, 54), s(30, 61), s(31, 54), s(15, 63), s(2, 55), s(27, 52), s(-11, 78), s(-8, 77), 
  s(19, 23), s(8, 35), s(-10, 36), s(-3, 34), s(-19, 32), s(3, 27), s(9, 47), s(0, 43), 
  s(9, -3), s(-8, 22), s(-25, 20), s(-17, 14), s(-19, 8), s(3, 6), s(-12, 34), s(14, 15), 
  s(-2, 10), s(-4, 16), s(-11, 6), s(-9, 2), s(-5, -2), s(-6, 4), s(-6, 13), s(-2, 17), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-31, -182),
  s(1, -111),
  s(-4, -46),
  s(-11, -17),
  s(-10, 5),
  s(-10, 3),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(57, -29),
  s(12, -33),
  s(0, -28),
  s(-13, -17),
  s(-23, -19),
  s(-10, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(17, 368),
  s(170, 162),
  s(52, 50),
  s(18, 15),
  s(-4, -4),
  s(4, -9),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 67);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(22, 56), s(25, 70), s(23, 73), s(25, 72), s(24, 75), s(24, 71), s(21, 68), s(19, 58), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(6, 37), s(14, 56), s(16, 67), s(20, 77), s(21, 84), s(22, 88), s(20, 90), s(16, 94), s(18, 90), s(20, 84), s(25, 85), s(-19, 113), s(19, 74), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 110), s(1, 128), s(0, 152), s(0, 161), s(1, 173), s(3, 178), s(3, 186), s(8, 189), s(10, 194), s(11, 196), s(14, 201), s(19, 204), s(29, 199), s(30, 193), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(49, 209), s(49, 222), s(53, 254), s(57, 267), s(60, 278), s(64, 280), s(65, 299), s(67, 305), s(70, 305), s(74, 308), s(74, 318), s(77, 313), s(80, 317), s(79, 322), s(84, 324), s(81, 329), s(91, 323), s(95, 324), s(115, 306), s(123, 308), s(171, 275), s(157, 273), s(189, 251), s(240, 231), s(286, 196), s(223, 227), s(202, 211), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(12, 27), s(21, 39), s(31, 45), s(39, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(2, 15), s(9, 20), s(12, 23), s(15, 28), s(16, 30), s(20, 29), s(22, 37), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 4), s(11, 8), s(19, 12), s(24, 20), s(28, 24), s(35, 25), s(38, 31), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 134), s(-12, 145), s(-13, 151), s(-12, 164), s(-13, 177), s(-14, 179), s(-15, 186), s(-14, 193), s(-15, 204), s(-14, 202), s(-19, 210), s(-1, 195), s(-25, 234), s(19, 199), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 36);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(78, 59);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(123, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(103, -34);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 36);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(65, -45);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 33);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(70, 33);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(91, 24);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(85, 11);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-31, 84);

pub const TEMPO_BONUS: ScoreTuple = s(35, 24);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-6, 13), s(3, -5), s(8, -3), s(11, -6), s(9, -4), s(10, -6), s(10, -4), s(11, -6), s(11, -7), s(10, -3), s(9, -3), s(11, -6), s(8, -2), s(11, -4), s(9, -6), s(8, -4), s(6, -2), s(4, -2), s(4, -6), s(4, -8), s(6, -11), s(1, -10), s(0, -11), s(0, -15), s(-5, -15), s(-7, -21), s(0, -22), s(-30, -17), 
],
// Bishop attacks
[
  s(2, 10), s(6, -3), s(10, -5), s(10, -4), s(9, -2), s(11, -5), s(9, -5), s(9, -5), s(11, -7), s(10, -6), s(10, -7), s(8, -5), s(8, -6), s(7, -5), s(9, -9), s(6, -8), s(8, -10), s(6, -8), s(5, -9), s(3, -8), s(3, -6), s(2, -13), s(4, -8), s(1, -13), s(-3, -10), s(0, -18), s(6, -21), s(-6, -20), 
],
// Rook attacks
[
  s(6, 2), s(3, -2), s(5, -5), s(6, -7), s(5, -7), s(4, -6), s(5, -7), s(4, -5), s(5, -8), s(4, -6), s(5, -7), s(5, -8), s(3, -5), s(3, -5), s(3, -4), s(3, -3), s(2, -2), s(2, -1), s(2, -1), s(1, -1), s(0, 0), s(1, -1), s(0, 0), s(0, -1), s(0, 0), s(-3, 0), s(-11, 4), s(1, -3), 
],
// Queen attacks
[
  s(-2, 6), s(1, -4), s(3, -7), s(4, -10), s(4, -6), s(3, -4), s(4, -6), s(4, -4), s(5, -6), s(6, -5), s(5, -2), s(7, -6), s(6, -2), s(8, -2), s(6, -1), s(9, -8), s(9, -9), s(11, -10), s(10, -7), s(16, -14), s(14, -10), s(9, -6), s(23, -13), s(14, -14), s(14, -6), s(9, -3), s(2, 2), s(6, -4), 
],
// Pawn attacks
[
  s(0, 8), s(5, -2), s(4, -5), s(1, -4), s(1, -4), s(1, -4), s(0, -2), s(1, -4), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(0, -3), s(0, -2), s(0, -2), s(1, -3), s(1, -3), s(3, -3), s(1, -3), s(4, -6), s(4, -6), s(5, -7), s(8, -10), s(10, -8), s(3, -6), s(29, -16), s(15, -14), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-7, 6), s(-1, 2), s(-4, 2), s(-4, 1), s(-4, 2), s(-3, 2), s(-4, 3), s(-4, 1), s(-4, 1), s(-4, 2), s(-4, 2), s(-4, 1), s(-6, 3), s(-5, 4), s(-4, 3), s(-6, 5), s(-5, 4), s(-3, 3), s(-2, 6), s(-2, 5), s(-5, 7), s(-1, 9), s(-4, 9), s(-2, 12), s(-2, 12), s(-4, 20), s(-2, 14), s(-1, 25), 
],
// Bishop defenses
[
  s(3, -1), s(-2, 0), s(-3, 1), s(-5, 2), s(-3, 2), s(-3, 2), s(-5, 3), s(-4, 2), s(-4, 3), s(-4, 3), s(-3, 2), s(-4, 2), s(-4, 3), s(-5, 2), s(-3, 3), s(-3, 1), s(-3, 2), s(-1, 1), s(-3, 2), s(-1, 1), s(0, 0), s(-1, 2), s(-4, 3), s(0, 3), s(2, 3), s(-1, 6), s(6, 0), s(8, 10), 
],
// Rook defenses
[
  s(-21, 13), s(-4, 5), s(-5, 6), s(-5, 5), s(-4, 4), s(-5, 6), s(-3, 4), s(-4, 4), s(-4, 5), s(-3, 5), s(-3, 3), s(-3, 4), s(-1, 2), s(-3, 5), s(-2, 3), s(-1, 3), s(0, 2), s(0, 2), s(-1, 4), s(-1, 4), s(-3, 5), s(-1, 4), s(-1, 4), s(-2, 5), s(-2, 4), s(-4, 4), s(5, 0), s(-3, 3), 
],
// Queen defenses
[
  s(1, -5), s(-2, 3), s(-1, 1), s(-1, 2), s(-2, 2), s(-2, 3), s(-2, 4), s(-2, 5), s(-3, 6), s(-3, 6), s(-2, 4), s(-2, 5), s(-2, 4), s(-1, 4), s(0, 0), s(-1, 4), s(0, 5), s(-1, 6), s(0, 3), s(0, 4), s(1, 3), s(4, 1), s(-1, 7), s(-1, 8), s(-1, 7), s(12, -1), s(0, 7), s(3, -3), 
],
// Pawn defenses
[
  s(-11, -4), s(-18, 3), s(-14, 2), s(-11, 2), s(-10, 1), s(-9, 0), s(-9, 0), s(-8, 1), s(-6, -1), s(-5, -2), s(-3, -2), s(-4, -1), s(-1, -4), s(-1, -4), s(-1, -5), s(0, -7), s(0, -5), s(0, -7), s(1, -11), s(1, -10), s(4, -15), s(6, -18), s(9, -20), s(10, -21), s(14, -23), s(32, -30), s(4, -22), s(18, -29), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(90, 23),
  s(68, 37),
  s(57, 52),
  s(52, 62),
  s(48, 74),
  s(45, 97),
  s(49, 113),
  s(60, 94),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-173, -5), s(50, -25), s(64, -19), s(71, -26), s(76, -23), s(75, -27), s(75, -25), s(79, -27), s(77, -35), s(74, -26), s(74, -26), s(69, -26), s(69, -23), s(69, -27), s(68, -24), s(66, -21), s(64, -19), s(64, -25), s(62, -18), s(60, -18), s(61, -18), s(53, -7), s(54, -11), s(52, -10), s(54, -11), s(49, -5), s(51, -8), s(50, -8), s(45, 0), s(45, -3), s(45, -2), s(41, 0), s(40, 0), s(42, 0), s(40, 0), s(33, 9), s(35, 8), s(34, 7), s(34, 6), s(30, 13), s(30, 9), s(30, 13), s(27, 14), s(26, 16), s(26, 14), s(25, 17), s(20, 21), s(20, 19), s(21, 21), s(19, 23), s(17, 25), s(17, 23), s(15, 26), s(14, 27), s(11, 30), s(11, 34), s(9, 32), s(4, 39), s(5, 37), s(4, 38), s(1, 40), s(3, 39), s(3, 41), s(-2, 46), s(0, 45), s(-1, 46), s(-5, 50), s(-6, 50), s(-9, 54), s(-4, 49), s(-9, 53), s(-13, 60), s(-11, 53), s(-9, 52), s(-19, 65), s(-19, 63), s(-17, 63), s(-19, 64), s(-18, 65), s(-21, 68), s(-23, 71), s(-22, 72), s(-28, 76), s(-30, 78), s(-25, 75), s(-30, 75), s(-28, 82), s(-33, 80), s(-31, 75), s(-34, 84), s(-35, 89), s(-39, 93), s(-39, 92), s(-38, 83), s(-37, 83), s(-40, 102), s(-41, 94), s(-42, 99), s(-47, 104), s(-40, 100), s(-46, 110), s(-47, 107), s(-39, 98), s(-44, 109), s(-46, 113), s(-52, 97), s(-43, 109), s(-42, 108), s(-48, 119), s(-50, 112), s(-48, 103), s(-41, 111), s(-44, 105), s(-41, 105), s(-40, 60), s(-40, 135), s(-56, 115), s(-58, 124), s(-49, 64), s(-43, 184), s(-36, 176), s(-47, 207), s(-46, 155), s(-66, 88), s(-40, 197), s(-31, 161), s(-36, -94), s(-89, 212), s(-35, 81), s(-116, 155), s(-54, 158), s(-84, 175), s(-16, 80), s(-136, 41), s(-105, -3), s(-126, -68), s(-73, 16), s(174, 109), s(-29, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(50, 29), s(24, -11), s(41, -2), s(39, 1), s(40, 13), s(39, 6), s(32, 24), s(35, 13), s(35, 17), s(29, 26), s(28, 27), s(33, 17), s(25, 28), s(31, 23), s(31, 21), s(19, 32), s(24, 26), s(33, 16), s(13, 31), s(21, 32), s(23, 18), s(18, 31), s(13, 33), s(28, 23), s(13, 30), s(17, 28), s(22, 30), s(17, 25), s(9, 35), s(23, 22), s(22, 28), s(9, 29), s(15, 33), s(14, 29), s(8, 35), s(13, 36), s(22, 23), s(-9, 33), s(3, 31), s(14, 20), s(10, 30), s(17, 25), s(5, 17), s(-6, 22), s(-8, 29), s(53, 45), s(-39, 44), s(6, 13), s(116, 108), s(75, -101), s(-3, -134), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const FILE_STRUCTURE: [ScoreTuple; 193] = [
  s(10, 52), s(32, 36), s(40, 38), s(27, 36), s(13, 42), s(32, 23), s(30, -8), s(1, 1), s(18, 28), s(19, -30), s(1, 1), s(1, 1), s(6, -16), s(1, 1), s(1, 1), s(1, 1), s(26, 43), s(35, 26), s(28, 43), s(1, 1), s(30, 26), s(33, 19), s(1, 1), s(1, 1), s(27, 14), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(33, 28), s(39, 16), s(1, 1), s(1, 1), s(35, 11), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(39, 5), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(13, 51), s(32, 39), s(41, 46), s(1, 1), s(16, 40), s(39, 24), s(1, 1), s(1, 1), s(29, 17), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(26, 35), s(36, 15), s(1, 1), s(1, 1), s(28, 24), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(36, -6), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(8, 57), s(30, 43), s(1, 1), s(1, 1), s(21, 41), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(21, 34), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(6, 67), 
];

pub const QUEEN_CONTACT_CHECKS: ScoreTuple = s(42, 14);
