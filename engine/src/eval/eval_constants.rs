#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [[Pst; NUM_PIECES as usize]; 2] = [
[
// Knight PST
Pst::new([
  s(294, 293), s(296, 295), s(296, 296), s(299, 297), s(297, 296), s(296, 296), s(295, 295), s(293, 293), 
  s(297, 295), s(300, 297), s(304, 298), s(301, 299), s(302, 299), s(302, 299), s(298, 298), s(296, 295), 
  s(300, 297), s(303, 299), s(305, 303), s(306, 303), s(306, 304), s(305, 303), s(302, 298), s(296, 296), 
  s(302, 298), s(303, 302), s(306, 305), s(306, 306), s(307, 306), s(305, 305), s(300, 300), s(298, 297), 
  s(297, 297), s(302, 299), s(304, 304), s(306, 306), s(305, 306), s(304, 305), s(299, 299), s(295, 297), 
  s(295, 295), s(299, 296), s(306, 303), s(303, 302), s(300, 301), s(303, 299), s(293, 294), s(293, 294), 
  s(295, 295), s(294, 294), s(295, 294), s(296, 295), s(296, 295), s(294, 294), s(294, 294), s(294, 294), 
  s(294, 294), s(293, 293), s(294, 293), s(293, 294), s(294, 294), s(293, 293), s(292, 292), s(294, 294), 
]),
// Bishop PST
Pst::new([
  s(297, 296), s(298, 298), s(298, 298), s(297, 298), s(297, 299), s(297, 298), s(298, 298), s(297, 298), 
  s(296, 295), s(301, 301), s(302, 301), s(302, 299), s(300, 298), s(301, 299), s(301, 301), s(295, 296), 
  s(303, 302), s(304, 302), s(305, 303), s(304, 303), s(305, 303), s(304, 303), s(303, 302), s(299, 300), 
  s(300, 299), s(303, 303), s(305, 305), s(306, 305), s(306, 306), s(305, 305), s(302, 304), s(299, 299), 
  s(300, 298), s(300, 301), s(305, 305), s(306, 306), s(306, 305), s(305, 305), s(302, 303), s(298, 298), 
  s(300, 300), s(304, 302), s(304, 304), s(306, 306), s(306, 306), s(305, 306), s(304, 304), s(301, 300), 
  s(301, 298), s(306, 305), s(302, 300), s(301, 303), s(299, 301), s(305, 300), s(301, 300), s(301, 298), 
  s(295, 295), s(298, 296), s(293, 295), s(295, 295), s(294, 294), s(294, 293), s(303, 297), s(296, 295), 
]),
// Rook PST
Pst::new([
  s(502, 502), s(501, 502), s(502, 502), s(503, 502), s(503, 503), s(502, 503), s(503, 503), s(503, 504), 
  s(503, 502), s(505, 505), s(506, 505), s(505, 505), s(506, 506), s(506, 506), s(505, 505), s(505, 505), 
  s(502, 500), s(504, 503), s(505, 503), s(505, 504), s(505, 504), s(504, 504), s(504, 504), s(502, 502), 
  s(500, 498), s(499, 499), s(503, 502), s(504, 503), s(503, 503), s(504, 504), s(502, 501), s(500, 500), 
  s(499, 497), s(500, 498), s(498, 498), s(501, 500), s(501, 502), s(500, 502), s(498, 499), s(498, 497), 
  s(497, 497), s(501, 498), s(497, 495), s(497, 496), s(497, 498), s(497, 497), s(498, 497), s(495, 496), 
  s(494, 495), s(498, 496), s(496, 495), s(496, 495), s(496, 496), s(496, 497), s(496, 497), s(493, 494), 
  s(493, 494), s(494, 495), s(502, 494), s(505, 500), s(504, 501), s(502, 498), s(497, 495), s(494, 494), 
]),
// Queen PST
Pst::new([
  s(900, 900), s(901, 901), s(902, 902), s(902, 903), s(902, 903), s(901, 902), s(900, 901), s(897, 898), 
  s(903, 903), s(902, 902), s(904, 905), s(903, 905), s(903, 904), s(901, 902), s(895, 899), s(895, 897), 
  s(905, 904), s(904, 903), s(905, 905), s(904, 905), s(904, 905), s(901, 904), s(899, 900), s(897, 898), 
  s(903, 904), s(903, 904), s(905, 905), s(904, 905), s(903, 905), s(901, 903), s(897, 900), s(897, 897), 
  s(901, 902), s(903, 904), s(901, 903), s(904, 905), s(902, 905), s(900, 903), s(899, 901), s(896, 897), 
  s(899, 899), s(902, 903), s(904, 904), s(900, 904), s(901, 904), s(902, 903), s(901, 901), s(898, 899), 
  s(896, 896), s(895, 895), s(897, 896), s(902, 900), s(902, 899), s(902, 898), s(898, 898), s(898, 898), 
  s(896, 896), s(895, 895), s(894, 894), s(894, 894), s(899, 895), s(894, 894), s(895, 895), s(898, 897), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(106, 107), s(106, 107), s(106, 107), s(106, 107), s(106, 107), s(106, 106), s(107, 107), s(107, 107), 
  s(107, 107), s(106, 107), s(107, 107), s(106, 106), s(106, 106), s(106, 107), s(106, 107), s(106, 107), 
  s(102, 106), s(100, 106), s(103, 103), s(105, 101), s(104, 99), s(101, 101), s(103, 105), s(101, 105), 
  s(94, 97), s(93, 100), s(94, 94), s(100, 95), s(104, 95), s(99, 95), s(95, 99), s(94, 96), 
  s(99, 94), s(102, 100), s(94, 95), s(95, 99), s(95, 99), s(94, 94), s(95, 97), s(94, 95), 
  s(96, 93), s(106, 102), s(105, 102), s(96, 102), s(93, 95), s(93, 99), s(93, 99), s(94, 99), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-2, -3), s(0, 0), s(0, -1), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 0), s(3, 4), s(1, 4), s(2, 2), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(0, 1), s(5, 5), s(6, 6), s(5, 6), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-1, 0), s(4, 6), s(5, 6), s(5, 6), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-4, -3), s(0, 2), s(4, 6), s(4, 6), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-4, -4), s(0, 0), s(1, 4), s(1, 5), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(5, -3), s(3, 1), s(0, 1), s(-3, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-6, -7), s(5, -4), s(-4, -5), s(-6, -6), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]),
],
[
// Knight PST
Pst::new([
  s(293, 293), s(295, 295), s(296, 296), s(297, 296), s(299, 297), s(296, 296), s(296, 295), s(294, 293), 
  s(296, 295), s(298, 298), s(302, 299), s(302, 299), s(301, 299), s(304, 298), s(300, 297), s(297, 295), 
  s(296, 296), s(302, 298), s(305, 303), s(306, 304), s(306, 303), s(305, 303), s(303, 299), s(300, 297), 
  s(298, 297), s(300, 300), s(305, 305), s(307, 306), s(306, 306), s(306, 305), s(303, 302), s(302, 298), 
  s(295, 297), s(299, 299), s(304, 305), s(305, 306), s(306, 306), s(304, 304), s(302, 299), s(297, 297), 
  s(293, 294), s(293, 294), s(303, 299), s(300, 301), s(303, 302), s(306, 303), s(299, 296), s(295, 295), 
  s(294, 294), s(294, 294), s(294, 294), s(296, 295), s(296, 295), s(295, 294), s(294, 294), s(295, 295), 
  s(294, 294), s(292, 292), s(293, 293), s(294, 294), s(293, 294), s(294, 293), s(293, 293), s(294, 294), 
]),
// Bishop PST
Pst::new([
  s(297, 298), s(298, 298), s(297, 298), s(297, 299), s(297, 298), s(298, 298), s(298, 298), s(297, 296), 
  s(295, 296), s(301, 301), s(301, 299), s(300, 298), s(302, 299), s(302, 301), s(301, 301), s(296, 295), 
  s(299, 300), s(303, 302), s(304, 303), s(305, 303), s(304, 303), s(305, 303), s(304, 302), s(303, 302), 
  s(299, 299), s(302, 304), s(305, 305), s(306, 306), s(306, 305), s(305, 305), s(303, 303), s(300, 299), 
  s(298, 298), s(302, 303), s(305, 305), s(306, 305), s(306, 306), s(305, 305), s(300, 301), s(300, 298), 
  s(301, 300), s(304, 304), s(305, 306), s(306, 306), s(306, 306), s(304, 304), s(304, 302), s(300, 300), 
  s(301, 298), s(301, 300), s(305, 300), s(299, 301), s(301, 303), s(302, 300), s(306, 305), s(301, 298), 
  s(296, 295), s(303, 297), s(294, 293), s(294, 294), s(295, 295), s(293, 295), s(298, 296), s(295, 295), 
]),
// Rook PST
Pst::new([
  s(503, 504), s(503, 503), s(502, 503), s(503, 503), s(503, 502), s(502, 502), s(501, 502), s(502, 502), 
  s(505, 505), s(505, 505), s(506, 506), s(506, 506), s(505, 505), s(506, 505), s(505, 505), s(503, 502), 
  s(502, 502), s(504, 504), s(504, 504), s(505, 504), s(505, 504), s(505, 503), s(504, 503), s(502, 500), 
  s(500, 500), s(502, 501), s(504, 504), s(503, 503), s(504, 503), s(503, 502), s(499, 499), s(500, 498), 
  s(498, 497), s(498, 499), s(500, 502), s(501, 502), s(501, 500), s(498, 498), s(500, 498), s(499, 497), 
  s(495, 496), s(498, 497), s(497, 497), s(497, 498), s(497, 496), s(497, 495), s(501, 498), s(497, 497), 
  s(493, 494), s(496, 497), s(496, 497), s(496, 496), s(496, 495), s(496, 495), s(498, 496), s(494, 495), 
  s(494, 494), s(497, 495), s(502, 498), s(504, 501), s(505, 500), s(502, 494), s(494, 495), s(493, 494), 
]),
// Queen PST
Pst::new([
  s(897, 898), s(900, 901), s(901, 902), s(902, 903), s(902, 903), s(902, 902), s(901, 901), s(900, 900), 
  s(895, 897), s(895, 899), s(901, 902), s(903, 904), s(903, 905), s(904, 905), s(902, 902), s(903, 903), 
  s(897, 898), s(899, 900), s(901, 904), s(904, 905), s(904, 905), s(905, 905), s(904, 903), s(905, 904), 
  s(897, 897), s(897, 900), s(901, 903), s(903, 905), s(904, 905), s(905, 905), s(903, 904), s(903, 904), 
  s(896, 897), s(899, 901), s(900, 903), s(902, 905), s(904, 905), s(901, 903), s(903, 904), s(901, 902), 
  s(898, 899), s(901, 901), s(902, 903), s(901, 904), s(900, 904), s(904, 904), s(902, 903), s(899, 899), 
  s(898, 898), s(898, 898), s(902, 898), s(902, 899), s(902, 900), s(897, 896), s(895, 895), s(896, 896), 
  s(898, 897), s(895, 895), s(894, 894), s(899, 895), s(894, 894), s(894, 894), s(895, 895), s(896, 896), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(107, 107), s(107, 107), s(106, 106), s(106, 107), s(106, 107), s(106, 107), s(106, 107), s(106, 107), 
  s(106, 107), s(106, 107), s(106, 107), s(106, 106), s(106, 106), s(107, 107), s(106, 107), s(107, 107), 
  s(101, 105), s(103, 105), s(101, 101), s(104, 99), s(105, 101), s(103, 103), s(100, 106), s(102, 106), 
  s(94, 96), s(95, 99), s(99, 95), s(104, 95), s(100, 95), s(94, 94), s(93, 100), s(94, 97), 
  s(94, 95), s(95, 97), s(94, 94), s(95, 99), s(95, 99), s(94, 95), s(102, 100), s(99, 94), 
  s(94, 99), s(93, 99), s(93, 99), s(93, 95), s(96, 102), s(105, 102), s(106, 102), s(96, 93), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, -1), s(0, 0), s(-2, -3), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(2, 2), s(1, 4), s(3, 4), s(0, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(5, 6), s(6, 6), s(5, 5), s(0, 1), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(5, 6), s(5, 6), s(4, 6), s(-1, 0), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(4, 6), s(4, 6), s(0, 2), s(-4, -3), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(1, 5), s(1, 4), s(0, 0), s(-4, -4), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-3, 0), s(0, 1), s(3, 1), s(5, -3), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-6, -6), s(-4, -5), s(5, -4), s(-6, -7), 
]),
],
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(7, 7), s(7, 7), s(7, 7), s(6, 7), s(6, 7), s(6, 7), s(5, 7), s(5, 7), 
  s(7, 7), s(6, 7), s(6, 7), s(6, 7), s(6, 6), s(6, 6), s(6, 7), s(6, 7), 
  s(5, 7), s(5, 6), s(4, 6), s(4, 5), s(4, 5), s(4, 5), s(5, 6), s(3, 6), 
  s(-4, 5), s(-2, 6), s(-5, 0), s(-5, -1), s(-4, -1), s(1, 1), s(1, 4), s(-1, 1), 
  s(-6, -5), s(-5, -1), s(-6, -4), s(-5, -4), s(-4, -4), s(-2, -3), s(0, 0), s(-2, -5), 
  s(-6, -5), s(-5, -2), s(-5, -3), s(-4, -3), s(-2, -2), s(1, -2), s(1, -2), s(-4, -6), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(6, 6),
  s(5, 4),
  s(-1, -4),
  s(-6, -6),
  s(-5, -5),
  s(-5, -4),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(7, 7),
  s(7, 7),
  s(0, 0),
  s(-6, -6),
  s(-6, -6),
  s(-5, -5),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(5, 6),
  s(7, 7),
  s(6, 6),
  s(5, 4),
  s(-3, -3),
  s(2, 0),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(7, 7);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(-6, -6), s(-6, -6), s(-3, -5), s(5, -2), s(6, 5), s(6, 5), s(6, 5), s(3, 0), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(-5, -6), s(-1, -5), s(4, -1), s(6, 4), s(6, 6), s(6, 6), s(6, 5), s(6, 6), s(6, 5), s(5, 5), s(5, 5), s(3, 3), s(3, 1), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-6, -6), s(-6, -6), s(-5, -6), s(-4, -6), s(0, -6), s(2, -4), s(4, 0), s(6, 5), s(6, 5), s(6, 5), s(6, 6), s(6, 6), s(5, 5), s(5, 6), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(-3, -3), s(-4, -5), s(-4, -5), s(-4, -5), s(-4, -5), s(-3, -5), s(-1, -4), s(0, -2), s(2, 0), s(3, 1), s(4, 3), s(4, 4), s(4, 4), s(3, 4), s(4, 5), s(4, 5), s(5, 5), s(5, 5), s(5, 5), s(5, 5), s(5, 5), s(4, 4), s(4, 4), s(3, 3), s(3, 3), s(1, 0), s(1, 1), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(-4, -4), s(0, -3), s(4, 1), s(6, 4), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(0, -1), s(5, 5), s(6, 5), s(6, 6), s(6, 6), s(6, 5), s(5, 4), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(-3, 0), s(2, 0), s(5, 3), s(6, 5), s(6, 6), s(6, 6), s(4, 3), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-4, -4), s(-2, -2), s(0, 4), s(2, 3), s(4, 4), s(3, 5), s(3, 4), s(4, 4), s(4, 5), s(3, 4), s(3, 3), s(2, 2), s(1, 2), s(0, 0), 
];

pub const PAWN_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(5, 4), s(6, 4)];
pub const PAWN_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(5, 4), s(6, 5)];
pub const PAWN_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(5, 4), s(6, 5)];
pub const PAWN_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(5, 4), s(5, 2)];
pub const KNIGHT_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(6, 6), s(6, 5)];
pub const KNIGHT_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(4, 3), s(7, 4)];
pub const KNIGHT_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(3, 4), s(6, 2)];
pub const BISHOP_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(6, 6), s(3, 5)];
pub const BISHOP_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(6, 5), s(6, 6)];
pub const BISHOP_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(4, 4), s(7, 5)];
pub const ROOK_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(5, 5), s(6, 3)];

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(7, 7);

pub const TEMPO_BONUS: ScoreTuple = s(7, 7);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(4, 4), s(4, 6), s(8, 8), s(8, 7), s(8, 7), s(8, 7), s(8, 7), s(8, 7), s(8, 7), s(8, 7), s(8, 7), s(7, 6), s(7, 6), s(8, 6), s(7, 5), s(7, 4), s(7, 4), s(5, 3), s(5, 1), s(4, 0), s(4, 0), s(2, 0), s(0, -2), s(-1, -3), s(-1, -2), s(-3, -4), s(0, -1), s(-2, -2), 
],
// Bishop attacks
[
  s(4, 5), s(6, 8), s(8, 9), s(8, 8), s(8, 8), s(8, 8), s(8, 7), s(8, 8), s(8, 7), s(7, 7), s(8, 7), s(7, 6), s(7, 6), s(7, 6), s(7, 5), s(6, 4), s(7, 5), s(6, 3), s(6, 4), s(5, 3), s(4, 3), s(3, 1), s(2, 1), s(0, 0), s(0, 0), s(-1, -1), s(0, 0), s(0, -1), 
],
// Rook attacks
[
  s(4, 4), s(6, 7), s(7, 7), s(7, 6), s(7, 6), s(7, 5), s(7, 5), s(7, 6), s(7, 5), s(6, 5), s(6, 5), s(6, 5), s(6, 4), s(6, 4), s(5, 4), s(5, 4), s(5, 4), s(5, 4), s(5, 4), s(4, 4), s(4, 4), s(4, 5), s(3, 3), s(2, 3), s(3, 4), s(1, 2), s(2, 2), s(1, 1), 
],
// Queen attacks
[
  s(2, 3), s(2, 4), s(4, 4), s(6, 4), s(6, 5), s(5, 5), s(6, 5), s(6, 7), s(7, 7), s(7, 7), s(7, 7), s(7, 7), s(8, 8), s(8, 8), s(8, 8), s(8, 7), s(8, 8), s(8, 7), s(8, 8), s(8, 7), s(7, 7), s(7, 7), s(6, 6), s(6, 5), s(6, 5), s(5, 5), s(4, 4), s(2, 2), 
],
// Pawn attacks
[
  s(5, 5), s(5, 4), s(5, 4), s(5, 3), s(5, 2), s(4, 3), s(4, 2), s(4, 2), s(4, 2), s(4, 2), s(4, 2), s(4, 2), s(4, 2), s(5, 2), s(5, 2), s(4, 2), s(5, 3), s(5, 2), s(5, 2), s(4, 1), s(3, 1), s(4, 2), s(2, 0), s(1, 0), s(2, 0), s(1, 0), s(2, 0), s(0, 0), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(2, 3), s(0, 3), s(0, 2), s(0, 2), s(2, 1), s(2, 1), s(2, 1), s(1, 0), s(2, 0), s(2, 0), s(2, 0), s(2, -1), s(2, 0), s(2, 0), s(3, 0), s(2, 0), s(2, 1), s(3, 1), s(4, 3), s(3, 2), s(3, 3), s(4, 4), s(4, 4), s(4, 5), s(4, 4), s(3, 4), s(2, 2), s(2, 3), 
],
// Bishop defenses
[
  s(1, 1), s(-2, -3), s(-2, -2), s(-3, -3), s(-2, -3), s(-1, -2), s(-2, -3), s(-1, -2), s(-1, -2), s(-1, -2), s(0, -2), s(0, -3), s(0, -2), s(0, -2), s(1, -1), s(1, -2), s(1, -1), s(2, 0), s(1, 0), s(2, 0), s(2, 0), s(1, 1), s(1, 0), s(2, 3), s(2, 2), s(1, 1), s(1, 1), s(2, 2), 
],
// Rook defenses
[
  s(0, 1), s(0, 4), s(0, 3), s(0, 3), s(0, 3), s(0, 3), s(1, 3), s(1, 2), s(2, 2), s(2, 1), s(2, 1), s(3, 1), s(3, 1), s(3, 1), s(4, 1), s(4, 1), s(4, 1), s(4, 1), s(4, 1), s(4, 2), s(3, 2), s(4, 3), s(4, 3), s(3, 3), s(2, 2), s(2, 2), s(2, 2), s(1, 1), 
],
// Queen defenses
[
  s(1, 1), s(0, 0), s(0, -1), s(0, -2), s(1, -2), s(2, -1), s(2, 0), s(2, 0), s(3, -1), s(3, 0), s(3, 1), s(3, 1), s(4, 1), s(4, 1), s(4, 0), s(5, 1), s(4, 1), s(4, 0), s(4, 0), s(3, 1), s(3, 1), s(3, 1), s(3, 2), s(2, 1), s(3, 2), s(3, 2), s(3, 3), s(1, 0), 
],
// Pawn defenses
[
  s(4, 5), s(0, 5), s(1, 4), s(1, 3), s(2, 2), s(2, 1), s(3, 2), s(3, 3), s(3, 2), s(4, 2), s(4, 2), s(4, 0), s(4, 0), s(4, 1), s(4, 0), s(5, 0), s(4, 0), s(4, 0), s(3, 0), s(3, -1), s(1, -1), s(2, -1), s(1, -2), s(0, -2), s(0, -2), s(0, -2), s(0, -1), s(0, -2), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(10, 10),
  s(2, 1),
  s(6, -1),
  s(1, -3),
  s(-4, -4),
  s(-6, -4),
  s(-2, 0),
  s(3, 6),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-6, 7), s(-2, 0), s(3, 3), s(1, 0), s(7, 7), s(5, 4), s(5, 7), s(7, 7), s(5, 5), s(5, 6), s(5, 5), s(5, 5), s(4, 5), s(5, 5), s(5, 5), s(4, 4), s(5, 4), s(4, 4), s(5, 5), s(4, 3), s(5, 5), s(4, 3), s(4, 3), s(4, 3), s(5, 4), s(5, 4), s(5, 4), s(4, 3), s(5, 4), s(4, 3), s(5, 4), s(5, 3), s(4, 2), s(5, 4), s(4, 2), s(4, 2), s(5, 4), s(4, 2), s(4, 2), s(5, 4), s(4, 1), s(5, 4), s(4, 3), s(4, 3), s(4, 2), s(5, 4), s(3, 2), s(4, 1), s(6, 4), s(4, 2), s(4, 2), s(4, 2), s(3, 1), s(4, 2), s(3, 2), s(4, 1), s(4, 3), s(2, 0), s(2, 1), s(4, 3), s(2, 0), s(3, 2), s(4, 3), s(3, 1), s(3, 1), s(4, 3), s(2, 0), s(3, 0), s(3, 2), s(3, 0), s(3, 1), s(3, 1), s(1, -1), s(4, 2), s(2, 1), s(1, -1), s(3, 2), s(1, -1), s(2, 0), s(2, 1), s(1, 0), s(2, 0), s(2, 0), s(1, 0), s(1, 0), s(2, 0), s(0, -1), s(0, -1), s(1, 0), s(0, -1), s(1, 0), s(1, 0), s(0, -1), s(0, -1), s(1, -1), s(0, -1), s(0, -1), s(0, -1), s(0, -1), s(0, 0), s(0, -1), s(0, -1), s(0, -1), s(0, -1), s(-1, -1), s(0, -2), s(0, -2), s(0, -1), s(0, 0), s(-2, -2), s(0, 0), s(2, 0), s(-1, -1), s(0, 0), s(1, 0), s(0, 1), s(-1, 2), s(-1, 2), s(-1, 1), s(-1, 2), s(0, 3), s(0, 3), s(-1, 2), s(-2, 1), s(-1, 2), s(0, 2), s(-1, 0), s(0, 1), s(0, 1), s(0, 1), s(0, 1), s(-1, 1), s(0, 0), s(0, 1), s(0, 0), s(0, 0), s(0, 1), s(1, 1), s(0, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(8, 7), s(-4, -6), s(5, 0), s(2, 0), s(8, 8), s(4, 2), s(7, 7), s(6, 5), s(5, 2), s(6, 7), s(5, 4), s(6, 4), s(5, 4), s(8, 8), s(4, 4), s(2, 4), s(6, 5), s(7, 3), s(0, 0), s(6, 4), s(2, 2), s(4, 6), s(1, 6), s(5, 6), s(0, 0), s(7, 7), s(-1, 2), s(2, 2), s(-1, 2), s(5, 6), s(0, 4), s(-2, -1), s(-1, 1), s(0, 2), s(4, 6), s(2, 7), s(6, 7), s(0, 0), s(-2, -2), s(1, 3), s(2, 1), s(0, 0), s(0, 0), s(0, 0), s(-1, -2), s(1, 2), s(0, 0), s(0, 0), s(1, 1), s(1, 1), s(0, 0), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const FILE_STRUCTURE: [ScoreTuple; 193] = [
  s(-1, 5), s(5, 4), s(8, 7), s(9, 10), s(-2, 3), s(6, 4), s(5, -4), s(1, 1), s(0, 2), s(-1, -5), s(1, 1), s(1, 1), s(-3, -3), s(1, 1), s(1, 1), s(1, 1), s(6, 5), s(6, 2), s(7, 6), s(1, 1), s(7, 6), s(8, 1), s(1, 1), s(1, 1), s(3, -1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(4, 3), s(7, 8), s(1, 1), s(1, 1), s(7, 5), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(4, 6), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(2, 5), s(7, 6), s(8, 8), s(1, 1), s(2, 3), s(6, 6), s(1, 1), s(1, 1), s(2, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(5, 5), s(6, 4), s(1, 1), s(1, 1), s(5, 5), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(3, 3), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(3, 6), s(4, 6), s(1, 1), s(1, 1), s(3, 4), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 3), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 4), 
];

pub const STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(10, 10);

pub const NON_STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(8, 4);

// DRAWISHNESS FEATURES

pub const OPPOSITE_BISHOPS: ScoreTuple = s(0, 0);

pub const MATERIAL_IMBALANCE: [[ScoreTuple; 16]; (NUM_PIECES - 1) as usize] = [
// Knight imbalance
[
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
],
// Bishop imbalance
[
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
],
// Rook imbalance
[
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
],
// Queen imbalance
[
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
],
// Pawn imbalance
[
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
],
];

