#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, Pft}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(253, 288), s(360, 320), s(341, 384), s(392, 350), s(498, 335), s(308, 352), s(370, 302), s(318, 246), 
  s(345, 330), s(380, 359), s(472, 327), s(424, 354), s(446, 330), s(463, 322), s(432, 332), s(395, 301), 
  s(368, 328), s(451, 339), s(459, 371), s(474, 359), s(463, 355), s(552, 335), s(464, 324), s(434, 301), 
  s(431, 336), s(452, 360), s(450, 389), s(499, 381), s(468, 381), s(506, 369), s(457, 355), s(470, 315), 
  s(420, 346), s(446, 349), s(455, 386), s(469, 385), s(469, 382), s(465, 379), s(482, 352), s(435, 340), 
  s(415, 329), s(422, 360), s(444, 361), s(448, 375), s(463, 377), s(452, 351), s(457, 331), s(418, 337), 
  s(397, 298), s(400, 323), s(416, 338), s(439, 343), s(435, 345), s(438, 332), s(430, 307), s(417, 306), 
  s(311, 292), s(395, 295), s(384, 314), s(397, 331), s(408, 323), s(396, 322), s(395, 307), s(408, 262), 
]),
// Bishop PST
Pst::new([
  s(422, 397), s(406, 393), s(320, 410), s(274, 415), s(345, 403), s(323, 404), s(409, 394), s(408, 386), 
  s(423, 390), s(437, 395), s(410, 387), s(394, 381), s(427, 381), s(459, 381), s(409, 396), s(380, 383), 
  s(445, 383), s(475, 379), s(476, 385), s(465, 375), s(480, 371), s(507, 380), s(482, 383), s(482, 372), 
  s(437, 380), s(462, 386), s(457, 400), s(507, 397), s(471, 403), s(490, 388), s(454, 383), s(446, 387), 
  s(442, 374), s(451, 387), s(464, 395), s(479, 403), s(485, 391), s(450, 395), s(449, 380), s(436, 373), 
  s(447, 370), s(466, 381), s(466, 395), s(466, 393), s(464, 400), s(475, 385), s(454, 383), s(448, 370), 
  s(461, 352), s(465, 358), s(466, 365), s(451, 378), s(459, 378), s(470, 373), s(483, 361), s(448, 351), 
  s(427, 354), s(452, 370), s(433, 371), s(428, 376), s(444, 371), s(422, 386), s(438, 367), s(438, 351), 
]),
// Rook PST
Pst::new([
  s(666, 750), s(694, 740), s(636, 765), s(690, 747), s(674, 751), s(631, 757), s(689, 737), s(682, 742), 
  s(638, 754), s(642, 758), s(669, 753), s(692, 744), s(700, 729), s(687, 742), s(635, 754), s(646, 747), 
  s(612, 740), s(644, 739), s(642, 741), s(659, 734), s(660, 729), s(664, 726), s(705, 718), s(638, 723), 
  s(583, 741), s(629, 728), s(620, 744), s(637, 732), s(632, 730), s(623, 739), s(626, 727), s(601, 732), 
  s(578, 732), s(592, 732), s(609, 733), s(622, 728), s(645, 714), s(599, 727), s(629, 714), s(586, 721), 
  s(583, 712), s(600, 718), s(613, 710), s(620, 707), s(615, 716), s(620, 707), s(617, 709), s(585, 702), 
  s(569, 714), s(604, 704), s(610, 707), s(618, 710), s(624, 702), s(612, 707), s(613, 700), s(532, 718), 
  s(594, 706), s(605, 708), s(617, 706), s(622, 702), s(621, 700), s(599, 709), s(574, 716), s(584, 690), 
]),
// Queen PST
Pst::new([
  s(1193, 1187), s(1197, 1218), s(1189, 1243), s(1207, 1237), s(1306, 1187), s(1241, 1228), s(1307, 1161), s(1272, 1211), 
  s(1207, 1156), s(1178, 1207), s(1199, 1236), s(1185, 1263), s(1125, 1326), s(1232, 1229), s(1237, 1210), s(1296, 1160), 
  s(1225, 1144), s(1213, 1166), s(1234, 1164), s(1205, 1231), s(1256, 1213), s(1281, 1193), s(1282, 1154), s(1256, 1192), 
  s(1191, 1184), s(1216, 1173), s(1192, 1187), s(1195, 1222), s(1214, 1213), s(1232, 1200), s(1223, 1220), s(1227, 1191), 
  s(1224, 1130), s(1191, 1188), s(1218, 1174), s(1203, 1222), s(1218, 1190), s(1208, 1184), s(1233, 1173), s(1216, 1183), 
  s(1210, 1131), s(1232, 1117), s(1227, 1155), s(1227, 1149), s(1224, 1174), s(1229, 1147), s(1237, 1142), s(1227, 1151), 
  s(1216, 1100), s(1231, 1105), s(1240, 1102), s(1245, 1100), s(1246, 1112), s(1251, 1097), s(1234, 1075), s(1245, 1070), 
  s(1232, 1090), s(1221, 1091), s(1231, 1090), s(1238, 1085), s(1232, 1096), s(1197, 1101), s(1222, 1078), s(1209, 1060), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(154, 300), s(146, 298), s(134, 292), s(167, 265), s(131, 282), s(166, 258), s(85, 299), s(63, 316), 
  s(96, 164), s(97, 158), s(130, 153), s(131, 141), s(182, 134), s(197, 136), s(180, 156), s(139, 157), 
  s(78, 144), s(95, 130), s(99, 132), s(121, 112), s(122, 124), s(119, 126), s(103, 129), s(89, 131), 
  s(78, 127), s(74, 125), s(99, 122), s(123, 112), s(114, 119), s(115, 119), s(86, 116), s(87, 115), 
  s(85, 123), s(92, 124), s(105, 125), s(113, 134), s(118, 140), s(118, 133), s(130, 113), s(107, 111), 
  s(76, 128), s(89, 120), s(84, 137), s(99, 134), s(95, 152), s(131, 131), s(132, 110), s(93, 106), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-97, -104), s(76, -65), s(118, -48), s(-34, -12), s(-116, 13), s(-128, 36), s(66, 1), s(37, -49), 
  s(70, -27), s(12, 36), s(-66, 43), s(79, 18), s(-2, 43), s(-58, 77), s(20, 46), s(-53, 25), 
  s(-46, 23), s(28, 38), s(95, 29), s(14, 35), s(76, 39), s(120, 63), s(163, 53), s(-2, 18), 
  s(22, -7), s(0, 42), s(38, 39), s(-12, 51), s(-47, 59), s(-16, 55), s(-4, 49), s(-88, 17), 
  s(-125, 5), s(15, 6), s(2, 32), s(-60, 51), s(-68, 55), s(-22, 33), s(-45, 22), s(-92, -1), 
  s(29, -31), s(20, -3), s(8, 15), s(-13, 27), s(3, 25), s(15, 11), s(21, 0), s(-8, -18), 
  s(55, -49), s(49, -19), s(9, 5), s(-41, 21), s(-27, 21), s(0, 8), s(39, -13), s(30, -38), 
  s(17, -92), s(54, -57), s(22, -29), s(-91, 0), s(-15, -26), s(-51, -1), s(24, -38), s(20, -78), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(54, 200), s(46, 198), s(34, 192), s(67, 165), s(31, 182), s(66, 158), s(-14, 199), s(-36, 216), 
  s(48, 211), s(30, 216), s(13, 180), s(17, 150), s(-29, 148), s(-3, 163), s(-63, 188), s(-62, 206), 
  s(36, 122), s(14, 114), s(23, 90), s(5, 84), s(4, 72), s(42, 72), s(-20, 120), s(-13, 114), 
  s(5, 69), s(-8, 67), s(-30, 50), s(-22, 49), s(-38, 49), s(-35, 51), s(0, 70), s(5, 61), 
  s(5, 24), s(-6, 31), s(-30, 24), s(-47, 29), s(-31, 14), s(9, 9), s(-23, 39), s(15, 24), 
  s(-3, 18), s(11, 22), s(0, 9), s(-37, 22), s(-20, 12), s(-16, 14), s(-16, 30), s(-13, 25), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(56, -260),
  s(22, -149),
  s(1, -62),
  s(11, -38),
  s(-5, -3),
  s(-6, -13),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(42, -26),
  s(10, -23),
  s(-10, -25),
  s(-16, -15),
  s(-32, -19),
  s(-16, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(76, 379),
  s(204, 138),
  s(49, 54),
  s(17, 14),
  s(-10, -12),
  s(6, -8),
  s(0, 0),
]);

pub const BACKWARDS_PAWNS_PFT: Pft = Pft::new([
  s(0, 0),
  s(0, 0),
  s(0, 0),
  s(12, 5),
  s(-7, -2),
  s(-15, -12),
  s(-10, -11),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(30, 70);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(4, 51), s(6, 58), s(4, 61), s(10, 56), s(9, 59), s(12, 55), s(8, 51), s(17, 33), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(10, 15), s(18, 32), s(20, 44), s(22, 53), s(22, 59), s(23, 65), s(21, 65), s(14, 71), s(20, 64), s(27, 59), s(49, 54), s(-10, 92), s(44, 43), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(7, 42), s(10, 55), s(18, 58), s(16, 70), s(21, 83), s(21, 89), s(25, 90), s(33, 91), s(32, 96), s(31, 100), s(38, 102), s(42, 105), s(44, 100), s(31, 99), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(3, 346), s(6, 309), s(5, 330), s(13, 329), s(16, 340), s(18, 344), s(18, 366), s(20, 376), s(25, 378), s(27, 385), s(30, 398), s(30, 396), s(34, 397), s(37, 399), s(35, 411), s(38, 417), s(49, 399), s(58, 399), s(78, 388), s(57, 403), s(121, 365), s(66, 386), s(172, 331), s(186, 300), s(292, 250), s(209, 309), s(178, 292), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(20, 23), s(31, 33), s(41, 37), s(51, 40), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(6, 11), s(14, 15), s(20, 18), s(25, 19), s(26, 20), s(30, 17), s(33, 27), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 2), s(7, 12), s(15, 15), s(22, 18), s(18, 29), s(31, 28), s(35, 36), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(5, 1), s(5, 10), s(9, 1), s(7, 17), s(7, 28), s(5, 26), s(4, 35), s(0, 44), s(-4, 59), s(5, 53), s(-29, 89), s(-17, 84), s(-40, 142), s(7, 87), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-10, -23), s(-8, 0), s(0, 15), s(2, 11), s(7, 10), s(11, 6), s(6, 22), s(13, 8), s(18, 7), s(20, 7), s(28, 1), s(32, 0), s(28, 0), s(35, -4), s(45, -6), s(42, -8), s(42, -7), s(47, -11), s(48, -14), s(41, -15), s(71, -21), s(56, -17), s(37, -19), s(21, -18), s(13, -15), s(-62, -12), s(28, -16), s(-79, -5), 
],
// Bishop attack values
[
  s(2, 15), s(-2, 11), s(0, 16), s(4, 12), s(7, 16), s(15, 5), s(15, 2), s(17, 7), s(29, -3), s(23, 0), s(36, -8), s(30, -5), s(38, -5), s(39, -8), s(40, -5), s(33, -8), s(36, -7), s(38, -10), s(42, -8), s(41, -10), s(23, -6), s(25, -7), s(-8, -1), s(-15, -1), s(-36, 1), s(-26, -5), s(22, -21), s(-37, -3), 
],
// Rook attack values
[
  s(16, 4), s(2, -4), s(14, -11), s(21, -22), s(20, -17), s(25, -20), s(24, -12), s(17, -10), s(31, -16), s(33, -17), s(39, -18), s(35, -17), s(33, -15), s(32, -13), s(42, -15), s(37, -12), s(39, -12), s(53, -16), s(46, -13), s(44, -12), s(30, -8), s(33, -8), s(41, -11), s(38, -8), s(28, -3), s(65, -14), s(14, 0), s(34, -6), 
],
// Queen attack values
[
  s(-2, -14), s(0, -12), s(4, -20), s(10, -23), s(14, -16), s(13, -7), s(15, -10), s(17, 0), s(24, -12), s(29, -5), s(25, -1), s(32, -2), s(41, -8), s(39, -5), s(47, -10), s(65, -20), s(65, -20), s(83, -33), s(84, -31), s(95, -37), s(121, -51), s(119, -52), s(114, -41), s(144, -62), s(160, -62), s(200, -89), s(144, -51), s(95, -48), 
],
// Pawn attack values
[
  s(7, 13), s(8, -2), s(8, -10), s(8, -7), s(8, -8), s(6, -9), s(9, -9), s(10, -8), s(7, -8), s(9, -9), s(11, -11), s(12, -11), s(20, -14), s(20, -13), s(17, -13), s(23, -14), s(29, -17), s(28, -16), s(22, -16), s(26, -17), s(37, -19), s(63, -24), s(48, -20), s(31, -19), s(32, -17), s(48, -13), s(50, -9), s(15, -4), 
],
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(94, 32);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(91, 58);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(150, -7);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(102, 3);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(42, 40);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(88, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(63, -28);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 39);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(76, 30);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(84, 53);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(115, 0);

pub const TEMPO_BONUS: ScoreTuple = s(41, 29);
