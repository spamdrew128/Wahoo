#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(169, 288), s(205, 337), s(267, 366), s(316, 344), s(329, 359), s(218, 339), s(194, 339), s(220, 252), 
  s(290, 319), s(323, 335), s(348, 325), s(334, 339), s(355, 322), s(344, 323), s(309, 330), s(310, 293), 
  s(309, 317), s(353, 326), s(375, 350), s(371, 351), s(355, 350), s(395, 333), s(342, 320), s(332, 295), 
  s(340, 323), s(352, 344), s(367, 366), s(400, 367), s(373, 367), s(389, 361), s(349, 344), s(363, 312), 
  s(334, 330), s(349, 338), s(361, 367), s(375, 366), s(372, 370), s(370, 358), s(366, 340), s(341, 335), 
  s(323, 309), s(335, 331), s(352, 340), s(352, 356), s(368, 357), s(357, 332), s(353, 326), s(329, 325), 
  s(305, 288), s(315, 308), s(325, 322), s(344, 322), s(346, 323), s(339, 322), s(328, 303), s(325, 308), 
  s(269, 277), s(303, 309), s(304, 298), s(314, 308), s(320, 305), s(323, 293), s(301, 320), s(309, 279), 
]),
// Bishop PST
Pst::new([
  s(340, 382), s(318, 377), s(268, 384), s(246, 390), s(265, 388), s(258, 384), s(310, 386), s(327, 365), 
  s(346, 350), s(357, 364), s(358, 357), s(315, 363), s(335, 358), s(347, 368), s(323, 372), s(310, 356), 
  s(362, 364), s(388, 353), s(377, 362), s(378, 352), s(361, 359), s(383, 371), s(358, 369), s(367, 358), 
  s(354, 354), s(374, 360), s(380, 364), s(410, 376), s(385, 375), s(390, 370), s(363, 363), s(357, 358), 
  s(362, 343), s(372, 357), s(377, 371), s(397, 373), s(391, 371), s(369, 369), s(355, 362), s(368, 338), 
  s(366, 341), s(387, 355), s(390, 361), s(382, 366), s(380, 372), s(383, 363), s(380, 353), s(375, 339), 
  s(384, 339), s(385, 329), s(391, 336), s(373, 348), s(376, 351), s(388, 345), s(395, 341), s(379, 327), 
  s(357, 328), s(385, 348), s(359, 346), s(354, 341), s(362, 341), s(354, 353), s(371, 333), s(376, 318), 
]),
// Rook PST
Pst::new([
  s(563, 641), s(583, 635), s(553, 653), s(575, 641), s(592, 632), s(555, 643), s(558, 641), s(581, 630), 
  s(543, 638), s(545, 644), s(557, 649), s(571, 637), s(560, 634), s(563, 638), s(557, 630), s(560, 629), 
  s(526, 631), s(548, 632), s(543, 631), s(545, 632), s(562, 625), s(551, 623), s(604, 615), s(547, 616), 
  s(504, 634), s(532, 623), s(525, 641), s(531, 632), s(538, 622), s(524, 626), s(526, 624), s(501, 625), 
  s(495, 618), s(504, 622), s(512, 626), s(526, 620), s(527, 620), s(493, 628), s(519, 619), s(489, 618), 
  s(495, 607), s(503, 611), s(515, 601), s(515, 608), s(519, 607), s(516, 604), s(531, 592), s(501, 593), 
  s(484, 600), s(505, 600), s(516, 602), s(520, 600), s(523, 593), s(511, 599), s(532, 584), s(467, 601), 
  s(500, 603), s(504, 598), s(509, 601), s(517, 595), s(516, 592), s(507, 595), s(493, 600), s(492, 590), 
]),
// Queen PST
Pst::new([
  s(921, 1231), s(952, 1224), s(957, 1253), s(980, 1237), s(985, 1234), s(985, 1224), s(1056, 1141), s(981, 1208), 
  s(956, 1074), s(934, 1101), s(954, 1115), s(934, 1145), s(919, 1167), s(960, 1118), s(986, 1077), s(1014, 1072), 
  s(959, 1057), s(941, 1077), s(960, 1089), s(951, 1116), s(963, 1108), s(985, 1080), s(992, 1041), s(990, 1052), 
  s(947, 1069), s(944, 1076), s(952, 1077), s(947, 1101), s(963, 1093), s(968, 1076), s(971, 1079), s(968, 1059), 
  s(952, 1037), s(946, 1073), s(948, 1086), s(947, 1112), s(955, 1096), s(952, 1074), s(968, 1053), s(967, 1043), 
  s(952, 1033), s(961, 1046), s(956, 1071), s(953, 1077), s(951, 1088), s(970, 1050), s(978, 1035), s(969, 1025), 
  s(956, 1017), s(956, 1026), s(967, 1017), s(970, 1027), s(967, 1037), s(977, 996), s(973, 992), s(974, 971), 
  s(945, 1018), s(946, 1012), s(950, 1008), s(961, 995), s(956, 1003), s(942, 997), s(955, 973), s(943, 1006), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(154, 240), s(155, 230), s(155, 231), s(174, 213), s(137, 224), s(158, 213), s(94, 242), s(78, 257), 
  s(86, 166), s(80, 156), s(112, 148), s(112, 143), s(123, 123), s(163, 134), s(148, 153), s(114, 154), 
  s(68, 150), s(77, 131), s(86, 126), s(95, 107), s(110, 114), s(102, 115), s(84, 122), s(75, 125), 
  s(65, 123), s(68, 118), s(83, 113), s(100, 106), s(99, 107), s(96, 105), s(74, 103), s(73, 106), 
  s(68, 120), s(79, 113), s(85, 114), s(91, 120), s(93, 121), s(95, 113), s(91, 99), s(78, 103), 
  s(65, 128), s(75, 118), s(72, 126), s(81, 129), s(78, 137), s(107, 118), s(95, 103), s(71, 105), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-24, 3), s(-50, 73), s(23, 79), s(-70, 112), s(-32, 79), s(-92, 94), s(-48, 90), s(73, -8), 
  s(-63, 117), s(-41, 159), s(-102, 182), s(52, 166), s(-25, 162), s(-31, 173), s(-9, 154), s(-75, 133), 
  s(-127, 92), s(-16, 103), s(-38, 125), s(-66, 135), s(-26, 127), s(79, 109), s(43, 107), s(-36, 78), 
  s(-40, 20), s(-18, 50), s(-32, 60), s(-71, 66), s(-77, 62), s(-42, 52), s(-63, 54), s(-128, 30), 
  s(-83, -18), s(-22, 4), s(-42, 23), s(-63, 31), s(-60, 27), s(-33, 10), s(-74, 8), s(-149, 0), 
  s(-41, -35), s(-3, -19), s(-22, -6), s(-18, 0), s(-18, -2), s(-15, -13), s(-18, -18), s(-72, -29), 
  s(14, -62), s(4, -37), s(-10, -27), s(-36, -19), s(-33, -18), s(-20, -28), s(13, -40), s(7, -62), 
  s(31, -102), s(63, -83), s(41, -59), s(-38, -39), s(9, -54), s(-11, -47), s(39, -70), s(34, -104), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(54, 140), s(55, 130), s(55, 131), s(74, 113), s(37, 124), s(58, 113), s(-5, 142), s(-21, 157), 
  s(48, 133), s(60, 138), s(43, 113), s(41, 92), s(31, 115), s(11, 110), s(-34, 126), s(-49, 149), 
  s(37, 54), s(31, 61), s(32, 54), s(16, 63), s(2, 55), s(27, 51), s(-11, 77), s(-7, 77), 
  s(21, 22), s(8, 34), s(-9, 36), s(-3, 34), s(-18, 31), s(3, 27), s(10, 47), s(0, 43), 
  s(10, -4), s(-7, 22), s(-24, 20), s(-16, 14), s(-18, 7), s(5, 6), s(-8, 32), s(15, 14), 
  s(-2, 10), s(-3, 16), s(-10, 5), s(-9, 2), s(-2, -3), s(-6, 3), s(-3, 11), s(-1, 17), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-35, -181),
  s(1, -111),
  s(-4, -46),
  s(-12, -17),
  s(-10, 5),
  s(-11, 3),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(57, -29),
  s(12, -32),
  s(0, -28),
  s(-14, -16),
  s(-23, -19),
  s(-10, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(20, 372),
  s(166, 163),
  s(52, 50),
  s(18, 15),
  s(-4, -4),
  s(4, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 67);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(22, 56), s(25, 70), s(24, 73), s(26, 71), s(25, 75), s(25, 71), s(22, 68), s(20, 58), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(6, 36), s(14, 56), s(16, 67), s(20, 77), s(21, 84), s(22, 87), s(21, 89), s(16, 93), s(19, 90), s(20, 84), s(25, 85), s(-20, 113), s(20, 74), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 111), s(1, 129), s(0, 152), s(0, 161), s(1, 173), s(3, 178), s(3, 186), s(8, 189), s(9, 194), s(11, 196), s(14, 202), s(19, 205), s(29, 199), s(27, 194), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(49, 210), s(48, 222), s(53, 257), s(57, 269), s(59, 279), s(64, 280), s(65, 300), s(67, 306), s(70, 304), s(74, 308), s(74, 319), s(77, 312), s(80, 318), s(79, 322), s(84, 322), s(82, 327), s(92, 322), s(96, 321), s(117, 302), s(127, 300), s(173, 267), s(159, 264), s(186, 245), s(234, 229), s(287, 186), s(207, 229), s(204, 197), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(12, 27), s(21, 39), s(31, 45), s(39, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(2, 15), s(8, 20), s(12, 23), s(15, 28), s(15, 31), s(19, 30), s(22, 37), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 4), s(11, 8), s(19, 12), s(24, 20), s(28, 25), s(35, 25), s(39, 31), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 134), s(-12, 145), s(-13, 152), s(-12, 164), s(-13, 178), s(-14, 179), s(-15, 186), s(-14, 193), s(-16, 205), s(-14, 201), s(-19, 209), s(0, 192), s(-24, 230), s(17, 188), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 36);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(77, 59);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(123, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(102, -29);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 36);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 17);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(64, -39);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 33);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(70, 32);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(90, 28);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(83, 17);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-32, 85);

pub const TEMPO_BONUS: ScoreTuple = s(34, 23);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-3, 10), s(3, -5), s(8, -3), s(11, -5), s(9, -4), s(9, -5), s(9, -4), s(10, -5), s(11, -6), s(10, -3), s(9, -2), s(10, -4), s(7, 0), s(10, -3), s(8, -5), s(7, -2), s(6, -2), s(3, 0), s(4, -5), s(4, -7), s(7, -9), s(2, -9), s(3, -11), s(2, -15), s(-1, -15), s(-1, -22), s(5, -23), s(-23, -18), 
],
// Bishop attacks
[
  s(2, 7), s(6, -3), s(10, -5), s(9, -4), s(9, -1), s(11, -4), s(9, -4), s(9, -4), s(11, -6), s(10, -5), s(10, -6), s(8, -5), s(8, -6), s(7, -5), s(9, -8), s(6, -6), s(9, -8), s(6, -7), s(6, -8), s(3, -6), s(3, -5), s(4, -12), s(5, -8), s(2, -11), s(-2, -9), s(3, -17), s(4, -17), s(-5, -18), 
],
// Rook attacks
[
  s(5, 0), s(2, -1), s(5, -5), s(6, -6), s(5, -6), s(4, -5), s(5, -6), s(4, -4), s(5, -7), s(4, -6), s(5, -6), s(5, -7), s(3, -4), s(3, -4), s(3, -3), s(2, -2), s(1, -1), s(1, 0), s(1, -1), s(0, 0), s(0, 0), s(1, 0), s(-1, 0), s(-1, 0), s(-2, 1), s(-6, 1), s(-10, 4), s(1, -2), 
],
// Queen attacks
[
  s(-2, 4), s(1, -4), s(3, -7), s(4, -9), s(4, -6), s(3, -3), s(4, -5), s(4, -3), s(4, -5), s(5, -3), s(4, 0), s(5, 0), s(5, 1), s(7, 0), s(5, 2), s(7, -1), s(7, 0), s(10, -2), s(9, 0), s(12, -2), s(12, -3), s(7, 0), s(23, -7), s(12, -8), s(14, -1), s(11, -3), s(-6, 8), s(6, -7), 
],
// Pawn attacks
[
  s(0, 6), s(5, -2), s(4, -4), s(2, -4), s(1, -3), s(1, -3), s(0, -2), s(1, -3), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(0, -2), s(1, -2), s(1, -3), s(2, -3), s(3, -3), s(2, -3), s(4, -5), s(4, -5), s(5, -6), s(8, -8), s(9, -6), s(5, -5), s(23, -14), s(19, -14), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-8, 7), s(-1, 2), s(-4, 2), s(-4, 1), s(-4, 2), s(-3, 2), s(-4, 3), s(-3, 1), s(-4, 1), s(-4, 2), s(-4, 1), s(-3, 0), s(-6, 3), s(-5, 3), s(-4, 2), s(-6, 4), s(-6, 4), s(-2, 2), s(-3, 5), s(-3, 4), s(-5, 6), s(-2, 8), s(-5, 9), s(-2, 11), s(-7, 13), s(-9, 20), s(-4, 14), s(-7, 26), 
],
// Bishop defenses
[
  s(1, 0), s(-2, 0), s(-4, 2), s(-4, 2), s(-3, 2), s(-3, 2), s(-5, 3), s(-3, 2), s(-4, 2), s(-4, 3), s(-3, 1), s(-4, 1), s(-4, 3), s(-4, 2), s(-4, 2), s(-2, 0), s(-3, 1), s(-1, 1), s(-4, 3), s(-1, 1), s(0, 0), s(-2, 2), s(-5, 3), s(-1, 3), s(2, 3), s(-3, 6), s(0, 1), s(6, 11), 
],
// Rook defenses
[
  s(-17, 12), s(-4, 5), s(-5, 6), s(-5, 5), s(-4, 4), s(-5, 6), s(-3, 4), s(-4, 4), s(-4, 5), s(-3, 4), s(-3, 3), s(-3, 4), s(-1, 2), s(-3, 5), s(-2, 3), s(-2, 2), s(-1, 1), s(-1, 2), s(-2, 3), s(-1, 3), s(-4, 5), s(-1, 4), s(-2, 4), s(-3, 5), s(-2, 4), s(-6, 5), s(2, 1), s(-3, 3), 
],
// Queen defenses
[
  s(2, -7), s(-2, 3), s(-1, 2), s(-1, 2), s(-2, 2), s(-2, 3), s(-2, 4), s(-2, 5), s(-3, 6), s(-3, 5), s(-2, 5), s(-2, 4), s(-1, 2), s(-1, 2), s(0, 0), s(0, 1), s(0, 0), s(0, 1), s(4, -2), s(2, 0), s(2, 0), s(7, -1), s(0, 6), s(0, 6), s(12, 1), s(11, 1), s(9, 1), s(1, 1), 
],
// Pawn defenses
[
  s(-11, -3), s(-18, 3), s(-13, 2), s(-11, 2), s(-9, 1), s(-9, 0), s(-9, 0), s(-8, 1), s(-5, -1), s(-4, -2), s(-3, -2), s(-3, -1), s(-1, -4), s(-1, -4), s(0, -5), s(0, -6), s(0, -5), s(0, -7), s(1, -9), s(1, -9), s(5, -13), s(6, -14), s(9, -16), s(10, -18), s(14, -19), s(42, -29), s(15, -22), s(12, -23), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(93, 30),
  s(71, 43),
  s(60, 56),
  s(56, 64),
  s(54, 76),
  s(45, 101),
  s(52, 116),
  s(58, 96),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-175, -8), s(61, -30), s(74, -26), s(81, -30), s(83, -27), s(83, -30), s(83, -28), s(85, -28), s(83, -33), s(81, -28), s(80, -27), s(76, -27), s(75, -24), s(76, -28), s(74, -25), s(72, -20), s(68, -17), s(70, -24), s(67, -17), s(63, -14), s(65, -16), s(56, -6), s(56, -8), s(56, -8), s(57, -8), s(52, -3), s(54, -5), s(52, -5), s(47, 2), s(47, -1), s(47, 0), s(44, 0), s(42, 2), s(44, 3), s(42, 2), s(34, 11), s(36, 11), s(35, 9), s(35, 9), s(30, 16), s(31, 12), s(31, 16), s(28, 17), s(26, 19), s(26, 17), s(25, 20), s(20, 25), s(20, 22), s(21, 24), s(19, 25), s(17, 28), s(17, 26), s(15, 29), s(14, 30), s(10, 33), s(10, 37), s(9, 35), s(3, 42), s(4, 40), s(3, 41), s(0, 43), s(2, 43), s(1, 44), s(-3, 48), s(-1, 48), s(-3, 49), s(-6, 53), s(-7, 53), s(-10, 57), s(-6, 52), s(-11, 56), s(-14, 62), s(-13, 56), s(-11, 55), s(-21, 68), s(-21, 65), s(-19, 66), s(-21, 67), s(-20, 68), s(-23, 71), s(-25, 73), s(-25, 74), s(-30, 79), s(-32, 81), s(-27, 78), s(-32, 78), s(-30, 84), s(-35, 82), s(-34, 78), s(-36, 86), s(-38, 91), s(-42, 95), s(-42, 94), s(-41, 85), s(-40, 85), s(-43, 103), s(-44, 95), s(-45, 100), s(-50, 105), s(-43, 101), s(-49, 111), s(-50, 108), s(-42, 98), s(-47, 110), s(-49, 113), s(-54, 98), s(-47, 110), s(-46, 109), s(-52, 119), s(-54, 111), s(-51, 105), s(-45, 110), s(-48, 105), s(-45, 106), s(-44, 60), s(-44, 128), s(-60, 114), s(-61, 117), s(-53, 61), s(-47, 171), s(-40, 165), s(-51, 191), s(-49, 146), s(-71, 84), s(-45, 179), s(-36, 150), s(-42, -105), s(-90, 195), s(-41, 79), s(-110, 146), s(-58, 155), s(-78, 161), s(-22, 70), s(-140, 30), s(-109, -5), s(-130, -82), s(-77, 16), s(172, 107), s(-35, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(52, 33), s(27, -7), s(43, 1), s(40, 7), s(40, 16), s(39, 10), s(32, 26), s(34, 17), s(36, 20), s(28, 28), s(28, 30), s(33, 19), s(25, 30), s(31, 25), s(31, 23), s(19, 33), s(24, 28), s(33, 18), s(13, 33), s(21, 33), s(24, 20), s(19, 32), s(14, 34), s(28, 24), s(13, 31), s(18, 29), s(22, 31), s(17, 26), s(9, 36), s(24, 23), s(23, 29), s(10, 30), s(16, 33), s(15, 30), s(9, 35), s(14, 36), s(23, 24), s(-7, 34), s(4, 32), s(15, 21), s(11, 29), s(19, 24), s(8, 16), s(-2, 21), s(-4, 29), s(55, 41), s(-29, 44), s(6, 15), s(120, 97), s(78, -94), s(-5, -136), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const FILE_STRUCTURE: [ScoreTuple; 193] = [
  s(10, 54), s(32, 38), s(41, 38), s(26, 35), s(14, 43), s(32, 26), s(31, -5), s(1, 1), s(19, 31), s(21, -24), s(1, 1), s(1, 1), s(7, -10), s(1, 1), s(1, 1), s(1, 1), s(26, 44), s(37, 27), s(29, 42), s(1, 1), s(31, 28), s(35, 20), s(1, 1), s(1, 1), s(29, 16), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(33, 32), s(41, 18), s(1, 1), s(1, 1), s(37, 12), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(39, 18), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(13, 52), s(31, 41), s(40, 48), s(1, 1), s(16, 41), s(38, 30), s(1, 1), s(1, 1), s(28, 24), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(25, 37), s(38, 17), s(1, 1), s(1, 1), s(28, 27), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(37, 4), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(8, 58), s(30, 45), s(1, 1), s(1, 1), s(20, 44), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(21, 37), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(7, 66), 
];

pub const STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(49, 92);

pub const NON_STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(34, -37);
