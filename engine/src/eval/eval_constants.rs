#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(176, 273), s(203, 331), s(263, 359), s(307, 340), s(330, 357), s(215, 340), s(202, 335), s(223, 241), 
  s(299, 312), s(331, 327), s(345, 318), s(330, 332), s(356, 316), s(347, 322), s(298, 330), s(312, 292), 
  s(321, 306), s(362, 315), s(372, 340), s(369, 340), s(357, 343), s(401, 327), s(348, 314), s(338, 293), 
  s(350, 314), s(360, 334), s(376, 353), s(402, 351), s(378, 349), s(390, 348), s(356, 328), s(364, 301), 
  s(345, 320), s(360, 324), s(370, 353), s(386, 347), s(378, 348), s(374, 339), s(370, 321), s(347, 310), 
  s(335, 301), s(347, 321), s(364, 327), s(365, 338), s(381, 336), s(369, 312), s(368, 306), s(340, 307), 
  s(315, 276), s(326, 297), s(336, 310), s(355, 309), s(357, 309), s(353, 303), s(339, 287), s(336, 293), 
  s(273, 264), s(312, 283), s(313, 285), s(326, 294), s(331, 291), s(334, 278), s(313, 297), s(318, 265), 
]),
// Bishop PST
Pst::new([
  s(348, 365), s(324, 364), s(270, 373), s(254, 380), s(274, 378), s(271, 375), s(334, 373), s(344, 351), 
  s(357, 334), s(364, 349), s(364, 342), s(325, 351), s(346, 345), s(365, 354), s(333, 359), s(330, 340), 
  s(368, 348), s(393, 339), s(384, 347), s(390, 336), s(378, 342), s(402, 354), s(376, 354), s(386, 343), 
  s(359, 341), s(380, 345), s(386, 349), s(420, 359), s(395, 359), s(406, 353), s(373, 346), s(371, 341), 
  s(364, 328), s(373, 344), s(382, 353), s(401, 355), s(399, 352), s(375, 349), s(363, 343), s(373, 319), 
  s(366, 327), s(388, 339), s(392, 344), s(385, 347), s(383, 352), s(386, 344), s(381, 334), s(376, 319), 
  s(385, 318), s(385, 314), s(391, 318), s(374, 330), s(378, 331), s(391, 326), s(395, 322), s(380, 306), 
  s(356, 307), s(383, 329), s(359, 323), s(354, 321), s(361, 321), s(354, 332), s(371, 312), s(374, 299), 
]),
// Rook PST
Pst::new([
  s(570, 665), s(588, 660), s(559, 678), s(585, 667), s(608, 657), s(569, 664), s(587, 658), s(607, 649), 
  s(545, 663), s(549, 668), s(562, 673), s(579, 662), s(570, 658), s(571, 663), s(566, 655), s(571, 655), 
  s(528, 654), s(550, 654), s(548, 652), s(552, 653), s(573, 648), s(560, 645), s(611, 638), s(553, 641), 
  s(508, 655), s(536, 643), s(530, 660), s(536, 652), s(544, 643), s(527, 649), s(536, 645), s(511, 647), 
  s(499, 638), s(506, 641), s(517, 642), s(532, 636), s(534, 637), s(495, 648), s(528, 637), s(496, 637), 
  s(500, 625), s(509, 629), s(520, 617), s(521, 622), s(526, 622), s(521, 621), s(541, 608), s(509, 608), 
  s(490, 614), s(509, 617), s(521, 619), s(523, 617), s(528, 609), s(515, 615), s(540, 600), s(471, 616), 
  s(507, 615), s(510, 613), s(514, 616), s(520, 615), s(520, 611), s(511, 613), s(499, 617), s(496, 606), 
]),
// Queen PST
Pst::new([
  s(1005, 1221), s(1026, 1213), s(1023, 1238), s(1057, 1214), s(1042, 1228), s(1038, 1217), s(1132, 1128), s(1069, 1191), 
  s(1048, 1102), s(1023, 1121), s(1036, 1129), s(1011, 1163), s(991, 1191), s(1041, 1131), s(1072, 1090), s(1105, 1089), 
  s(1050, 1085), s(1031, 1092), s(1044, 1094), s(1033, 1124), s(1040, 1123), s(1058, 1094), s(1072, 1057), s(1065, 1075), 
  s(1040, 1094), s(1035, 1089), s(1039, 1088), s(1034, 1108), s(1047, 1102), s(1052, 1083), s(1056, 1091), s(1055, 1075), 
  s(1048, 1062), s(1041, 1092), s(1040, 1097), s(1040, 1117), s(1046, 1099), s(1040, 1082), s(1058, 1060), s(1058, 1058), 
  s(1051, 1056), s(1057, 1073), s(1052, 1089), s(1046, 1082), s(1043, 1095), s(1061, 1062), s(1070, 1053), s(1061, 1044), 
  s(1058, 1042), s(1056, 1051), s(1064, 1047), s(1066, 1050), s(1064, 1059), s(1074, 1020), s(1073, 1022), s(1079, 994), 
  s(1048, 1046), s(1046, 1042), s(1049, 1039), s(1059, 1025), s(1055, 1027), s(1042, 1024), s(1059, 994), s(1050, 1016), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(150, 278), s(143, 272), s(146, 269), s(173, 244), s(137, 251), s(152, 243), s(84, 276), s(75, 292), 
  s(88, 168), s(81, 161), s(115, 153), s(116, 148), s(127, 126), s(176, 135), s(152, 163), s(127, 155), 
  s(66, 153), s(75, 136), s(85, 133), s(96, 114), s(109, 119), s(108, 120), s(86, 127), s(85, 128), 
  s(63, 127), s(62, 125), s(81, 121), s(97, 113), s(95, 115), s(95, 115), s(71, 111), s(76, 110), 
  s(66, 124), s(75, 119), s(83, 122), s(88, 129), s(92, 131), s(94, 124), s(89, 108), s(81, 109), 
  s(64, 132), s(70, 126), s(70, 135), s(78, 136), s(77, 145), s(108, 126), s(90, 112), s(74, 110), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-32, -141), s(-13, -92), s(43, -87), s(-46, -46), s(1, -64), s(-31, -48), s(9, -44), s(47, -137), 
  s(-63, -58), s(-22, -20), s(-87, -6), s(94, -28), s(20, -16), s(-25, 17), s(-20, 2), s(-61, -27), 
  s(-130, -35), s(-16, -17), s(-46, 7), s(-53, 17), s(-7, 19), s(59, 20), s(14, 10), s(-74, -26), 
  s(-58, -48), s(-35, -8), s(-56, 12), s(-85, 28), s(-110, 36), s(-92, 27), s(-103, 13), s(-170, -21), 
  s(-82, -54), s(-34, -22), s(-72, 11), s(-100, 30), s(-106, 31), s(-87, 11), s(-104, -4), s(-162, -26), 
  s(-22, -30), s(15, -8), s(-27, 15), s(-33, 26), s(-31, 25), s(-30, 15), s(-6, -2), s(-59, -15), 
  s(43, -19), s(32, 10), s(9, 25), s(-26, 36), s(-22, 40), s(0, 29), s(42, 11), s(35, -14), 
  s(54, -50), s(85, -21), s(57, 4), s(-31, 24), s(17, 12), s(-1, 23), s(62, -6), s(54, -42), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(50, 178), s(43, 172), s(46, 169), s(73, 144), s(37, 151), s(52, 143), s(-15, 176), s(-24, 192), 
  s(26, 201), s(40, 200), s(26, 163), s(28, 127), s(18, 146), s(-3, 147), s(-52, 169), s(-65, 201), 
  s(24, 109), s(21, 104), s(23, 81), s(10, 75), s(-2, 69), s(18, 75), s(-26, 107), s(-16, 107), 
  s(10, 66), s(7, 59), s(-13, 46), s(-7, 41), s(-25, 42), s(-13, 45), s(-3, 68), s(-4, 64), 
  s(7, 20), s(-8, 30), s(-29, 27), s(-18, 18), s(-25, 17), s(-11, 19), s(-24, 49), s(10, 26), 
  s(-1, 16), s(-3, 22), s(-15, 14), s(-11, 9), s(-5, 3), s(-17, 15), s(-6, 24), s(-5, 23), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-26, -200),
  s(11, -136),
  s(1, -64),
  s(-6, -32),
  s(-6, -9),
  s(-16, -7),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(41, -22),
  s(10, -28),
  s(0, -26),
  s(-14, -16),
  s(-27, -19),
  s(-14, -20),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(91, 274),
  s(175, 162),
  s(53, 50),
  s(18, 16),
  s(-6, -5),
  s(4, -11),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 67);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(9, 34), s(10, 46), s(8, 47), s(10, 44), s(9, 47), s(10, 42), s(8, 37), s(11, 22), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(3, 17), s(10, 36), s(12, 45), s(15, 54), s(15, 61), s(15, 63), s(13, 65), s(8, 69), s(10, 64), s(12, 58), s(20, 56), s(-25, 85), s(17, 42), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(3, 62), s(5, 76), s(4, 98), s(5, 104), s(7, 116), s(8, 121), s(10, 127), s(15, 131), s(16, 135), s(17, 138), s(21, 143), s(26, 145), s(35, 140), s(28, 138), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(64, 152), s(64, 200), s(69, 237), s(74, 252), s(78, 261), s(82, 263), s(83, 285), s(86, 292), s(89, 292), s(93, 296), s(93, 307), s(96, 302), s(100, 305), s(99, 310), s(104, 310), s(102, 314), s(114, 306), s(119, 305), s(142, 284), s(153, 283), s(205, 246), s(196, 241), s(225, 219), s(252, 209), s(244, 207), s(168, 227), s(140, 215), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(14, 26), s(25, 38), s(35, 45), s(44, 50), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 14), s(11, 19), s(16, 23), s(20, 28), s(21, 31), s(24, 31), s(25, 39), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 3), s(10, 9), s(17, 14), s(22, 22), s(25, 28), s(32, 28), s(36, 34), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-10, 84), s(-9, 96), s(-10, 101), s(-11, 115), s(-12, 128), s(-13, 129), s(-14, 137), s(-13, 144), s(-15, 156), s(-12, 152), s(-17, 159), s(4, 137), s(-22, 177), s(14, 141), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(80, 36);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(77, 60);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(125, 3);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(101, -23);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(38, 36);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 17);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(65, -45);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(22, 34);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(71, 32);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(91, 28);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(84, 19);

pub const TEMPO_BONUS: ScoreTuple = s(34, 29);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-2, 2), s(-1, 0), s(4, 0), s(8, -2), s(5, -1), s(6, -2), s(7, -2), s(8, -3), s(7, -2), s(7, -1), s(5, 0), s(7, -2), s(4, 0), s(5, 0), s(4, 0), s(3, 0), s(3, 0), s(0, 2), s(1, -1), s(6, -6), s(0, 0), s(3, -5), s(0, -4), s(-3, -8), s(14, -22), s(-48, -51), s(-10, -31), s(-52, -36), 
],
// Bishop attacks
[
  s(6, 0), s(8, -2), s(15, -4), s(14, -4), s(13, -3), s(16, -5), s(14, -5), s(15, -6), s(17, -7), s(16, -7), s(15, -7), s(14, -6), s(13, -5), s(13, -6), s(14, -6), s(14, -8), s(16, -8), s(12, -6), s(12, -7), s(7, -4), s(10, -5), s(15, -10), s(19, -11), s(43, -22), s(69, -32), s(104, -58), s(12, -60), s(-24, -48), 
],
// Rook attacks
[
  s(12, -5), s(6, -3), s(11, -6), s(13, -9), s(11, -8), s(10, -7), s(11, -8), s(10, -7), s(12, -8), s(11, -8), s(10, -7), s(11, -8), s(8, -6), s(8, -6), s(7, -5), s(7, -4), s(6, -4), s(7, -4), s(7, -4), s(5, -3), s(5, -3), s(7, -3), s(8, -6), s(10, -5), s(13, -5), s(13, -5), s(-13, 15), s(4, -27), 
],
// Queen attacks
[
  s(1, 0), s(4, -6), s(6, -7), s(9, -9), s(7, -7), s(7, -6), s(8, -6), s(8, -5), s(8, -7), s(9, -5), s(8, -3), s(9, -3), s(9, -2), s(11, -4), s(9, -3), s(10, -2), s(9, -2), s(11, -1), s(9, 0), s(15, -4), s(17, -5), s(10, -1), s(14, -6), s(19, -31), s(13, 2), s(7, 0), s(15, 13), s(4, -24), 
],
// Pawn attacks
[
  s(0, 3), s(9, -2), s(7, -3), s(4, -3), s(3, -3), s(3, -2), s(2, -1), s(3, -3), s(2, -2), s(1, -1), s(1, -1), s(1, -1), s(2, -3), s(2, -3), s(3, -4), s(3, -4), s(4, -6), s(4, -6), s(5, -7), s(1, -5), s(3, -7), s(10, -12), s(0, -7), s(12, -18), s(13, -28), s(20, -56), s(58, -44), s(81, -101), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-5, 5), s(0, 2), s(-6, 2), s(-5, 1), s(-5, 1), s(-4, 1), s(-5, 2), s(-5, 0), s(-5, 1), s(-4, 0), s(-4, 0), s(-3, 0), s(-4, 0), s(-3, 0), s(-3, 0), s(-3, 0), s(-3, 0), s(0, -2), s(4, -2), s(3, -1), s(4, -1), s(11, -1), s(9, 0), s(14, 5), s(-2, 26), s(82, 40), s(54, 8), s(50, 59), 
],
// Bishop defenses
[
  s(0, 2), s(-2, 0), s(-6, 2), s(-7, 2), s(-5, 2), s(-5, 1), s(-7, 2), s(-6, 2), s(-5, 2), s(-5, 2), s(-4, 0), s(-4, 0), s(-4, 1), s(-5, 1), s(-2, 0), s(-2, 0), s(-2, 0), s(1, -2), s(0, -1), s(1, 0), s(5, -4), s(10, -4), s(4, -2), s(4, 2), s(-3, 13), s(98, 10), s(14, -10), s(67, 38), 
],
// Rook defenses
[
  s(-27, 13), s(-5, 4), s(-6, 5), s(-7, 4), s(-5, 3), s(-6, 4), s(-3, 3), s(-4, 3), s(-5, 3), s(-4, 3), s(-3, 2), s(-2, 2), s(-1, 1), s(-1, 1), s(0, 0), s(0, 0), s(0, 0), s(1, 0), s(1, 0), s(4, -2), s(5, -2), s(7, -3), s(11, -4), s(11, -2), s(19, 2), s(13, 3), s(9, 0), s(17, 2), 
],
// Queen defenses
[
  s(3, -5), s(-1, 2), s(-1, 1), s(-1, 1), s(-1, 1), s(-2, 2), s(-3, 3), s(-2, 3), s(-3, 3), s(-3, 4), s(-2, 2), s(-2, 2), s(-2, 1), s(-2, 2), s(-1, 1), s(0, 0), s(1, -2), s(2, -2), s(4, -6), s(2, -2), s(4, -4), s(7, -5), s(3, 0), s(3, 4), s(0, 0), s(2, 1), s(-3, -1), s(1, -8), 
],
// Pawn defenses
[
  s(-17, 0), s(-28, 6), s(-22, 5), s(-18, 4), s(-16, 4), s(-15, 3), s(-14, 3), s(-14, 4), s(-11, 2), s(-9, 1), s(-7, 1), s(-8, 2), s(-6, 1), s(-6, 1), s(-7, 2), s(-6, 2), s(-7, 4), s(-8, 5), s(-9, 5), s(-9, 5), s(-10, 6), s(-18, 11), s(-12, 9), s(-27, 13), s(-9, -8), s(27, -28), s(12, -28), s(30, -92), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(245, 72),
  s(227, 74),
  s(230, 54),
  s(238, 16),
  s(237, -16),
  s(238, -61),
  s(252, -86),
  s(260, -58),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 74] = [
  s(27, 41), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1),
];

