#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(190, 300), s(227, 350), s(295, 374), s(346, 354), s(357, 368), s(250, 348), s(217, 354), s(247, 262), 
  s(317, 338), s(350, 352), s(375, 340), s(362, 354), s(384, 337), s(381, 335), s(333, 348), s(337, 311), 
  s(339, 334), s(382, 343), s(404, 365), s(400, 365), s(383, 367), s(424, 347), s(372, 336), s(358, 315), 
  s(370, 342), s(382, 361), s(397, 381), s(430, 382), s(404, 382), s(420, 376), s(380, 360), s(392, 329), 
  s(365, 347), s(379, 354), s(392, 381), s(406, 380), s(402, 385), s(400, 373), s(397, 355), s(370, 350), 
  s(355, 326), s(366, 348), s(383, 355), s(383, 370), s(398, 371), s(387, 347), s(383, 341), s(358, 339), 
  s(336, 307), s(346, 326), s(356, 339), s(374, 339), s(375, 340), s(370, 337), s(355, 320), s(354, 326), 
  s(299, 296), s(333, 317), s(335, 317), s(345, 326), s(350, 325), s(351, 313), s(330, 330), s(338, 294), 
]),
// Bishop PST
Pst::new([
  s(362, 398), s(336, 393), s(288, 399), s(260, 405), s(283, 401), s(277, 401), s(335, 400), s(350, 378), 
  s(369, 369), s(381, 381), s(379, 373), s(333, 381), s(350, 376), s(372, 383), s(343, 389), s(333, 374), 
  s(385, 383), s(409, 373), s(399, 381), s(399, 369), s(382, 374), s(404, 388), s(380, 386), s(391, 375), 
  s(377, 374), s(398, 378), s(402, 382), s(434, 392), s(408, 391), s(413, 385), s(387, 378), s(380, 374), 
  s(385, 363), s(395, 377), s(402, 387), s(420, 389), s(415, 387), s(392, 386), s(377, 379), s(390, 354), 
  s(390, 362), s(411, 374), s(414, 379), s(406, 382), s(403, 389), s(405, 381), s(401, 371), s(397, 356), 
  s(410, 359), s(409, 350), s(416, 355), s(396, 367), s(399, 370), s(410, 366), s(417, 361), s(402, 343), 
  s(380, 351), s(409, 371), s(382, 367), s(378, 362), s(384, 363), s(375, 375), s(394, 353), s(399, 341), 
]),
// Rook PST
Pst::new([
  s(588, 691), s(606, 685), s(576, 702), s(596, 688), s(614, 681), s(570, 694), s(572, 697), s(615, 677), 
  s(564, 689), s(565, 694), s(576, 699), s(590, 686), s(577, 684), s(581, 687), s(575, 682), s(580, 682), 
  s(548, 681), s(567, 682), s(562, 680), s(564, 679), s(579, 675), s(564, 674), s(615, 666), s(566, 666), 
  s(526, 684), s(552, 673), s(543, 689), s(548, 681), s(556, 670), s(539, 676), s(544, 673), s(522, 674), 
  s(517, 667), s(524, 671), s(531, 674), s(546, 667), s(547, 666), s(509, 677), s(538, 668), s(510, 666), 
  s(518, 656), s(525, 661), s(535, 650), s(537, 654), s(541, 653), s(534, 652), s(553, 640), s(523, 640), 
  s(508, 650), s(528, 649), s(538, 651), s(542, 649), s(545, 641), s(531, 648), s(555, 633), s(489, 649), 
  s(523, 652), s(526, 649), s(531, 652), s(539, 646), s(538, 642), s(528, 646), s(515, 650), s(513, 639), 
]),
// Queen PST
Pst::new([
  s(990, 1235), s(1019, 1228), s(1022, 1259), s(1048, 1241), s(1040, 1253), s(1043, 1236), s(1112, 1162), s(1054, 1216), 
  s(1035, 1106), s(1013, 1133), s(1031, 1147), s(1007, 1183), s(986, 1211), s(1031, 1155), s(1059, 1112), s(1091, 1109), 
  s(1040, 1089), s(1023, 1104), s(1039, 1115), s(1028, 1144), s(1037, 1139), s(1053, 1118), s(1069, 1069), s(1067, 1084), 
  s(1030, 1097), s(1027, 1101), s(1032, 1102), s(1028, 1123), s(1044, 1116), s(1048, 1100), s(1052, 1106), s(1052, 1086), 
  s(1038, 1060), s(1030, 1098), s(1032, 1109), s(1031, 1133), s(1039, 1120), s(1033, 1100), s(1051, 1079), s(1050, 1073), 
  s(1041, 1054), s(1048, 1068), s(1042, 1092), s(1038, 1098), s(1036, 1110), s(1054, 1075), s(1064, 1065), s(1055, 1055), 
  s(1046, 1038), s(1045, 1046), s(1055, 1039), s(1057, 1049), s(1054, 1061), s(1063, 1021), s(1060, 1025), s(1067, 994), 
  s(1035, 1037), s(1035, 1033), s(1039, 1030), s(1049, 1016), s(1045, 1022), s(1028, 1023), s(1046, 993), s(1037, 1017), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(145, 278), s(143, 270), s(147, 267), s(171, 243), s(136, 249), s(156, 241), s(88, 274), s(74, 291), 
  s(89, 166), s(82, 160), s(116, 153), s(118, 145), s(131, 124), s(179, 137), s(160, 160), s(129, 155), 
  s(69, 152), s(77, 135), s(87, 130), s(99, 111), s(114, 118), s(111, 119), s(93, 126), s(87, 127), 
  s(66, 126), s(66, 123), s(85, 118), s(102, 111), s(101, 113), s(105, 111), s(81, 109), s(84, 109), 
  s(69, 122), s(78, 117), s(86, 119), s(93, 125), s(94, 128), s(102, 119), s(97, 104), s(88, 106), 
  s(66, 131), s(72, 124), s(73, 133), s(82, 134), s(79, 143), s(115, 124), s(99, 109), s(81, 108), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-50, 42), s(-53, 100), s(7, 103), s(-72, 142), s(-29, 126), s(-58, 136), s(-15, 135), s(58, 37), 
  s(-93, 133), s(-44, 169), s(-115, 183), s(64, 162), s(-26, 168), s(-50, 194), s(-15, 175), s(-81, 159), 
  s(-160, 62), s(-48, 76), s(-53, 89), s(-76, 96), s(-26, 95), s(49, 86), s(10, 87), s(-84, 56), 
  s(-76, -3), s(-41, 30), s(-49, 39), s(-87, 53), s(-104, 53), s(-56, 39), s(-81, 37), s(-163, 11), 
  s(-105, -33), s(-39, -7), s(-53, 15), s(-81, 31), s(-75, 29), s(-40, 5), s(-87, -2), s(-165, -15), 
  s(-41, -53), s(5, -33), s(-17, -13), s(-13, -3), s(-12, -5), s(-8, -18), s(-12, -34), s(-73, -46), 
  s(38, -68), s(27, -37), s(11, -25), s(-16, -15), s(-12, -13), s(1, -26), s(36, -43), s(29, -67), 
  s(55, -103), s(88, -77), s(62, -49), s(-18, -28), s(29, -41), s(6, -35), s(61, -63), s(55, -101), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(45, 178), s(43, 170), s(47, 167), s(71, 143), s(36, 149), s(56, 141), s(-11, 174), s(-25, 191), 
  s(24, 204), s(40, 202), s(25, 163), s(28, 129), s(18, 147), s(0, 145), s(-55, 170), s(-68, 202), 
  s(22, 111), s(21, 105), s(23, 82), s(10, 75), s(-2, 67), s(21, 73), s(-23, 106), s(-20, 110), 
  s(9, 66), s(7, 59), s(-14, 46), s(-6, 39), s(-23, 40), s(-5, 44), s(0, 66), s(-7, 64), 
  s(6, 20), s(-7, 29), s(-28, 26), s(-20, 17), s(-23, 17), s(-3, 17), s(-16, 46), s(12, 25), 
  s(-1, 16), s(-1, 21), s(-9, 10), s(-10, 8), s(-5, 4), s(-8, 11), s(0, 18), s(-2, 21), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-29, -194),
  s(9, -132),
  s(0, -59),
  s(-9, -23),
  s(-9, 1),
  s(-12, 2),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(48, -19),
  s(10, -27),
  s(-1, -26),
  s(-16, -16),
  s(-26, -19),
  s(-14, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(96, 277),
  s(167, 165),
  s(53, 51),
  s(18, 16),
  s(-5, -3),
  s(4, -10),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(24, 71);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(8, 51), s(10, 65), s(8, 69), s(9, 68), s(8, 72), s(8, 68), s(4, 66), s(2, 58), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(3, 24), s(9, 44), s(11, 56), s(14, 66), s(14, 74), s(15, 77), s(12, 80), s(7, 84), s(9, 80), s(10, 75), s(16, 75), s(-28, 105), s(5, 66), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(1, 75), s(2, 91), s(2, 114), s(2, 122), s(4, 133), s(6, 138), s(7, 145), s(11, 149), s(13, 153), s(14, 156), s(18, 160), s(23, 163), s(32, 158), s(29, 155), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(60, 143), s(59, 201), s(64, 243), s(69, 261), s(72, 273), s(77, 275), s(79, 296), s(82, 303), s(85, 302), s(89, 306), s(90, 317), s(92, 312), s(96, 316), s(95, 320), s(100, 322), s(98, 326), s(109, 319), s(113, 320), s(135, 301), s(142, 304), s(191, 271), s(177, 268), s(204, 251), s(239, 239), s(243, 232), s(178, 247), s(153, 239), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(14, 22), s(24, 32), s(34, 38), s(43, 42), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 11), s(11, 16), s(16, 18), s(20, 23), s(22, 25), s(26, 23), s(29, 30), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 2), s(11, 8), s(19, 12), s(25, 19), s(29, 24), s(37, 25), s(41, 30), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-12, 97), s(-11, 109), s(-12, 114), s(-13, 128), s(-14, 142), s(-15, 144), s(-16, 152), s(-16, 160), s(-18, 172), s(-17, 171), s(-23, 180), s(-4, 165), s(-35, 212), s(8, 178), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 38);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(78, 62);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(126, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(103, -29);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 38);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(81, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(64, -39);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 32);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(71, 33);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(92, 26);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(86, 12);

pub const TEMPO_BONUS: ScoreTuple = s(34, 30);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(1, 2), s(4, -7), s(8, -4), s(12, -8), s(10, -7), s(11, -8), s(11, -8), s(12, -9), s(12, -10), s(11, -7), s(10, -6), s(11, -11), s(9, -8), s(11, -9), s(9, -10), s(8, -11), s(7, -7), s(6, -7), s(3, -8), s(5, -11), s(6, -12), s(2, -10), s(0, -13), s(-1, -13), s(0, -18), s(-13, -14), s(-12, -8), s(-44, -11), 
],
// Bishop attacks
[
  s(6, 2), s(6, -4), s(11, -6), s(10, -5), s(10, -3), s(12, -6), s(11, -7), s(10, -6), s(12, -9), s(11, -8), s(10, -8), s(9, -6), s(8, -7), s(8, -7), s(8, -7), s(5, -5), s(6, -5), s(5, -6), s(5, -7), s(2, -5), s(3, -5), s(2, -11), s(3, -6), s(1, -12), s(-7, -7), s(0, -16), s(9, -28), s(-6, -17), 
],
// Rook attacks
[
  s(3, 0), s(2, -2), s(6, -6), s(8, -10), s(7, -10), s(6, -9), s(7, -10), s(6, -8), s(7, -11), s(6, -10), s(6, -11), s(5, -12), s(4, -8), s(4, -7), s(3, -6), s(3, -3), s(2, -2), s(2, -1), s(2, -1), s(2, 0), s(1, 0), s(2, 0), s(0, 0), s(0, 0), s(1, 0), s(0, 0), s(-7, 4), s(3, -2), 
],
// Queen attacks
[
  s(0, 0), s(1, -5), s(4, -9), s(6, -13), s(6, -9), s(6, -8), s(7, -11), s(7, -9), s(6, -10), s(8, -11), s(7, -8), s(9, -12), s(9, -11), s(10, -11), s(9, -10), s(10, -11), s(10, -12), s(12, -10), s(11, -7), s(19, -15), s(18, -13), s(14, -11), s(23, -14), s(28, -24), s(11, 0), s(21, -13), s(12, -3), s(19, -20), 
],
// Pawn attacks
[
  s(-3, 9), s(5, -1), s(4, -4), s(2, -3), s(1, -3), s(1, -4), s(1, -2), s(1, -4), s(0, -3), s(1, -4), s(0, -4), s(0, -5), s(1, -8), s(1, -9), s(1, -9), s(1, -13), s(1, -12), s(2, -19), s(2, -19), s(0, -13), s(3, -18), s(2, -16), s(3, -14), s(7, -18), s(10, -13), s(-2, -7), s(14, -10), s(7, -11), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-7, 6), s(0, 2), s(-3, 1), s(-3, 0), s(-4, 2), s(-3, 2), s(-4, 3), s(-3, 1), s(-4, 1), s(-5, 3), s(-4, 2), s(-4, 2), s(-5, 5), s(-5, 6), s(-4, 6), s(-5, 8), s(-5, 8), s(-4, 10), s(-1, 11), s(-3, 10), s(-5, 12), s(-2, 13), s(-5, 14), s(-3, 17), s(-5, 16), s(-9, 25), s(-1, 15), s(-2, 28), 
],
// Bishop defenses
[
  s(-3, 6), s(-1, 0), s(-3, 1), s(-4, 2), s(-3, 2), s(-3, 2), s(-5, 3), s(-4, 2), s(-4, 3), s(-4, 3), s(-3, 1), s(-3, 1), s(-4, 4), s(-4, 3), s(-3, 2), s(-2, 2), s(-1, 1), s(-1, 5), s(-3, 6), s(-1, 4), s(-1, 4), s(-3, 7), s(-5, 6), s(-4, 9), s(0, 7), s(-5, 11), s(4, 2), s(1, 15), 
],
// Rook defenses
[
  s(-10, 11), s(-2, 4), s(-4, 6), s(-5, 5), s(-3, 4), s(-4, 6), s(-2, 4), s(-3, 4), s(-4, 5), s(-3, 4), s(-2, 3), s(-2, 4), s(-1, 3), s(-2, 5), s(-1, 3), s(0, 3), s(0, 3), s(0, 4), s(0, 5), s(-1, 5), s(-2, 7), s(-1, 6), s(-1, 6), s(-4, 8), s(-5, 7), s(-5, 7), s(3, 3), s(-2, 5), 
],
// Queen defenses
[
  s(4, -14), s(-2, 4), s(-1, 3), s(-1, 3), s(-2, 3), s(-2, 4), s(-3, 6), s(-2, 6), s(-3, 7), s(-3, 7), s(-2, 5), s(-2, 5), s(-2, 5), s(-2, 6), s(-1, 4), s(0, 5), s(0, 5), s(0, 5), s(0, 4), s(0, 6), s(1, 6), s(2, 5), s(-2, 11), s(-4, 13), s(12, -1), s(-6, 13), s(-6, 15), s(-9, 13), 
],
// Pawn defenses
[
  s(-12, -3), s(-21, 5), s(-17, 4), s(-14, 4), s(-12, 2), s(-11, 2), s(-11, 1), s(-10, 2), s(-7, 0), s(-6, -1), s(-4, -2), s(-4, -2), s(-1, -6), s(-1, -7), s(0, -10), s(1, -15), s(2, -15), s(2, -22), s(2, -25), s(4, -22), s(4, -25), s(8, -28), s(11, -27), s(13, -30), s(8, -21), s(32, -36), s(8, -27), s(7, -23), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(72, 37),
  s(48, 49),
  s(33, 52),
  s(28, 63),
  s(26, 72),
  s(21, 98),
  s(41, 130),
  s(50, 125),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-130, 4), s(70, -19), s(93, -14), s(99, -20), s(106, -20), s(102, -20), s(104, -21), s(107, -21), s(107, -41), s(103, -22), s(103, -23), s(98, -25), s(98, -20), s(99, -25), s(98, -23), s(96, -20), s(95, -20), s(94, -23), s(92, -16), s(90, -19), s(91, -16), s(85, -9), s(84, -11), s(83, -9), s(85, -11), s(80, -5), s(81, -8), s(79, -6), s(75, 0), s(74, -2), s(74, -1), s(71, 0), s(68, 1), s(72, 0), s(69, 0), s(63, 8), s(64, 9), s(62, 7), s(63, 6), s(58, 13), s(58, 9), s(58, 14), s(54, 15), s(53, 17), s(53, 15), s(51, 18), s(47, 22), s(47, 19), s(47, 22), s(45, 23), s(43, 24), s(43, 23), s(41, 25), s(39, 28), s(36, 30), s(36, 33), s(34, 32), s(28, 39), s(30, 37), s(27, 39), s(24, 40), s(27, 39), s(26, 41), s(21, 45), s(23, 44), s(21, 45), s(17, 49), s(16, 49), s(13, 53), s(16, 49), s(11, 53), s(8, 58), s(9, 51), s(11, 51), s(1, 63), s(1, 60), s(3, 61), s(1, 62), s(1, 63), s(-1, 65), s(-3, 69), s(-2, 68), s(-8, 73), s(-10, 74), s(-5, 72), s(-11, 71), s(-9, 77), s(-14, 75), s(-13, 69), s(-16, 78), s(-18, 84), s(-21, 86), s(-21, 85), s(-22, 75), s(-19, 72), s(-22, 93), s(-25, 84), s(-26, 89), s(-30, 94), s(-26, 91), s(-30, 98), s(-32, 94), s(-22, 84), s(-30, 97), s(-32, 100), s(-40, 81), s(-32, 96), s(-27, 93), s(-38, 106), s(-38, 95), s(-39, 89), s(-32, 95), s(-34, 86), s(-36, 89), s(-32, 23), s(-32, 95), s(-50, 44), s(-54, 34), s(-45, 6), s(-39, 59), s(-24, 35), s(-43, 65), s(-42, 25), s(-52, -1), s(-40, 50), s(-24, 25), s(-32, -10), s(-77, 27), s(-22, 3), s(-78, 15), s(-64, 7), s(-50, 8), s(-8, 2), s(-63, 1), s(-20, 0), s(-53, 0), s(-13, 1), s(24, 3), s(0, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(58, 38), s(35, 19), s(61, 20), s(60, 26), s(62, 34), s(59, 28), s(56, 46), s(56, 32), s(56, 37), s(51, 45), s(52, 45), s(57, 29), s(48, 48), s(54, 41), s(53, 39), s(40, 53), s(47, 45), s(55, 34), s(35, 52), s(43, 54), s(44, 41), s(38, 55), s(34, 55), s(48, 47), s(31, 59), s(37, 53), s(44, 52), s(34, 56), s(27, 65), s(43, 50), s(42, 55), s(27, 59), s(35, 61), s(35, 50), s(26, 65), s(33, 65), s(44, 48), s(10, 58), s(21, 63), s(33, 50), s(27, 57), s(25, 60), s(20, 46), s(12, 51), s(8, 57), s(62, 80), s(-29, 75), s(23, 39), s(1, 2), s(77, -4), s(0, -1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];
