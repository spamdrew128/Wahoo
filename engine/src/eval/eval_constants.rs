#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [[Pst; NUM_PIECES as usize]; 2] = [
[
// Knight PST
Pst::new([
  s(220, 255), s(221, 327), s(221, 352), s(344, 345), s(298, 357), s(259, 358), s(185, 347), s(168, 290), 
  s(288, 304), s(322, 324), s(349, 317), s(346, 329), s(345, 332), s(342, 330), s(316, 342), s(301, 315), 
  s(328, 307), s(339, 328), s(398, 332), s(356, 351), s(370, 348), s(375, 347), s(355, 319), s(317, 308), 
  s(360, 316), s(350, 349), s(389, 360), s(377, 367), s(395, 368), s(367, 365), s(350, 340), s(342, 322), 
  s(344, 334), s(366, 339), s(372, 359), s(373, 370), s(373, 368), s(358, 367), s(351, 338), s(332, 332), 
  s(331, 325), s(353, 329), s(359, 335), s(368, 356), s(352, 358), s(347, 337), s(333, 330), s(321, 310), 
  s(329, 308), s(328, 309), s(343, 321), s(347, 327), s(343, 321), s(324, 322), s(318, 303), s(306, 289), 
  s(311, 283), s(305, 313), s(324, 299), s(321, 310), s(316, 305), s(301, 295), s(302, 313), s(258, 277), 
]),
// Bishop PST
Pst::new([
  s(332, 365), s(299, 389), s(278, 382), s(259, 388), s(248, 391), s(244, 389), s(324, 376), s(341, 385), 
  s(305, 357), s(309, 380), s(346, 370), s(332, 360), s(316, 364), s(363, 356), s(370, 359), s(348, 353), 
  s(363, 365), s(368, 367), s(383, 370), s(359, 367), s(381, 347), s(381, 365), s(385, 356), s(369, 359), 
  s(357, 357), s(366, 360), s(392, 368), s(388, 377), s(409, 376), s(379, 366), s(372, 365), s(352, 357), 
  s(371, 336), s(356, 364), s(372, 369), s(394, 374), s(395, 372), s(375, 373), s(370, 358), s(359, 347), 
  s(376, 343), s(385, 350), s(386, 362), s(383, 371), s(380, 369), s(387, 364), s(384, 359), s(364, 340), 
  s(381, 333), s(401, 340), s(395, 343), s(377, 352), s(372, 349), s(389, 338), s(381, 332), s(386, 336), 
  s(377, 323), s(377, 337), s(354, 355), s(364, 343), s(354, 342), s(359, 347), s(384, 349), s(357, 328), 
]),
// Rook PST
Pst::new([
  s(584, 629), s(528, 652), s(554, 652), s(597, 630), s(568, 647), s(555, 650), s(598, 632), s(562, 645), 
  s(560, 629), s(560, 635), s(574, 640), s(556, 638), s(576, 636), s(555, 647), s(547, 642), s(542, 641), 
  s(549, 618), s(604, 619), s(568, 621), s(569, 626), s(546, 632), s(543, 633), s(553, 630), s(529, 631), 
  s(506, 628), s(527, 627), s(528, 634), s(542, 628), s(537, 627), s(531, 636), s(535, 623), s(506, 634), 
  s(493, 619), s(531, 617), s(500, 631), s(532, 622), s(525, 622), s(511, 627), s(502, 625), s(493, 621), 
  s(505, 599), s(534, 603), s(521, 606), s(524, 608), s(514, 610), s(514, 603), s(506, 607), s(495, 606), 
  s(468, 605), s(546, 584), s(517, 601), s(525, 598), s(522, 598), s(517, 602), s(503, 601), s(484, 600), 
  s(490, 589), s(485, 609), s(510, 601), s(520, 596), s(517, 594), s(509, 600), s(506, 597), s(501, 603), 
]),
// Queen PST
Pst::new([
  s(979, 1203), s(1042, 1159), s(991, 1235), s(981, 1247), s(994, 1235), s(970, 1249), s(963, 1222), s(922, 1248), 
  s(1010, 1067), s(962, 1098), s(965, 1137), s(920, 1173), s(937, 1149), s(963, 1100), s(946, 1098), s(959, 1083), 
  s(981, 1060), s(988, 1058), s(973, 1100), s(970, 1108), s(950, 1121), s(971, 1080), s(955, 1062), s(970, 1055), 
  s(967, 1064), s(966, 1085), s(965, 1083), s(959, 1094), s(955, 1105), s(961, 1072), s(950, 1076), s(956, 1064), 
  s(965, 1044), s(967, 1061), s(953, 1074), s(957, 1107), s(949, 1103), s(950, 1088), s(950, 1067), s(952, 1042), 
  s(964, 1030), s(974, 1045), s(971, 1051), s(951, 1091), s(954, 1081), s(958, 1071), s(963, 1048), s(955, 1034), 
  s(954, 987), s(966, 997), s(975, 999), s(969, 1036), s(969, 1035), s(968, 1025), s(958, 1033), s(961, 1018), 
  s(947, 985), s(946, 967), s(937, 1011), s(951, 1015), s(960, 996), s(951, 1008), s(945, 1022), s(944, 1024), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(104, 261), s(158, 233), s(181, 239), s(178, 217), s(145, 218), s(148, 205), s(111, 237), s(130, 233), 
  s(121, 162), s(143, 163), s(157, 143), s(124, 132), s(119, 128), s(126, 137), s(92, 149), s(86, 154), 
  s(85, 135), s(92, 125), s(108, 119), s(108, 112), s(99, 112), s(86, 122), s(75, 127), s(65, 136), 
  s(85, 110), s(83, 106), s(105, 104), s(101, 107), s(99, 107), s(83, 114), s(66, 114), s(61, 116), 
  s(93, 104), s(107, 96), s(104, 110), s(96, 122), s(93, 122), s(83, 116), s(74, 113), s(61, 116), 
  s(88, 103), s(118, 97), s(121, 115), s(82, 139), s(83, 130), s(71, 129), s(70, 119), s(61, 126), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-7, 12), s(-82, 96), s(-63, 103), s(-91, 115), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-98, 150), s(-55, 180), s(-106, 205), s(-24, 193), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-113, 95), s(-12, 114), s(-14, 128), s(-85, 145), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-110, 23), s(-57, 49), s(-51, 52), s(-94, 64), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-136, -9), s(-62, 2), s(-38, 10), s(-70, 26), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(-59, -33), s(-5, -23), s(-8, -14), s(-13, -2), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(13, -62), s(19, -41), s(-11, -29), s(-28, -19), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(37, -106), s(38, -70), s(8, -52), s(8, -55), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]),
],
[
// Knight PST
Pst::new([
  s(168, 290), s(185, 347), s(259, 358), s(298, 357), s(344, 345), s(221, 352), s(221, 327), s(220, 255), 
  s(301, 315), s(316, 342), s(342, 330), s(345, 332), s(346, 329), s(349, 317), s(322, 324), s(288, 304), 
  s(317, 308), s(355, 319), s(375, 347), s(370, 348), s(356, 351), s(398, 332), s(339, 328), s(328, 307), 
  s(342, 322), s(350, 340), s(367, 365), s(395, 368), s(377, 367), s(389, 360), s(350, 349), s(360, 316), 
  s(332, 332), s(351, 338), s(358, 367), s(373, 368), s(373, 370), s(372, 359), s(366, 339), s(344, 334), 
  s(321, 310), s(333, 330), s(347, 337), s(352, 358), s(368, 356), s(359, 335), s(353, 329), s(331, 325), 
  s(306, 289), s(318, 303), s(324, 322), s(343, 321), s(347, 327), s(343, 321), s(328, 309), s(329, 308), 
  s(258, 277), s(302, 313), s(301, 295), s(316, 305), s(321, 310), s(324, 299), s(305, 313), s(311, 283), 
]),
// Bishop PST
Pst::new([
  s(341, 385), s(324, 376), s(244, 389), s(248, 391), s(259, 388), s(278, 382), s(299, 389), s(332, 365), 
  s(348, 353), s(370, 359), s(363, 356), s(316, 364), s(332, 360), s(346, 370), s(309, 380), s(305, 357), 
  s(369, 359), s(385, 356), s(381, 365), s(381, 347), s(359, 367), s(383, 370), s(368, 367), s(363, 365), 
  s(352, 357), s(372, 365), s(379, 366), s(409, 376), s(388, 377), s(392, 368), s(366, 360), s(357, 357), 
  s(359, 347), s(370, 358), s(375, 373), s(395, 372), s(394, 374), s(372, 369), s(356, 364), s(371, 336), 
  s(364, 340), s(384, 359), s(387, 364), s(380, 369), s(383, 371), s(386, 362), s(385, 350), s(376, 343), 
  s(386, 336), s(381, 332), s(389, 338), s(372, 349), s(377, 352), s(395, 343), s(401, 340), s(381, 333), 
  s(357, 328), s(384, 349), s(359, 347), s(354, 342), s(364, 343), s(354, 355), s(377, 337), s(377, 323), 
]),
// Rook PST
Pst::new([
  s(562, 645), s(598, 632), s(555, 650), s(568, 647), s(597, 630), s(554, 652), s(528, 652), s(584, 629), 
  s(542, 641), s(547, 642), s(555, 647), s(576, 636), s(556, 638), s(574, 640), s(560, 635), s(560, 629), 
  s(529, 631), s(553, 630), s(543, 633), s(546, 632), s(569, 626), s(568, 621), s(604, 619), s(549, 618), 
  s(506, 634), s(535, 623), s(531, 636), s(537, 627), s(542, 628), s(528, 634), s(527, 627), s(506, 628), 
  s(493, 621), s(502, 625), s(511, 627), s(525, 622), s(532, 622), s(500, 631), s(531, 617), s(493, 619), 
  s(495, 606), s(506, 607), s(514, 603), s(514, 610), s(524, 608), s(521, 606), s(534, 603), s(505, 599), 
  s(484, 600), s(503, 601), s(517, 602), s(522, 598), s(525, 598), s(517, 601), s(546, 584), s(468, 605), 
  s(501, 603), s(506, 597), s(509, 600), s(517, 594), s(520, 596), s(510, 601), s(485, 609), s(490, 589), 
]),
// Queen PST
Pst::new([
  s(922, 1248), s(963, 1222), s(970, 1249), s(994, 1235), s(981, 1247), s(991, 1235), s(1042, 1159), s(979, 1203), 
  s(959, 1083), s(946, 1098), s(963, 1100), s(937, 1149), s(920, 1173), s(965, 1137), s(962, 1098), s(1010, 1067), 
  s(970, 1055), s(955, 1062), s(971, 1080), s(950, 1121), s(970, 1108), s(973, 1100), s(988, 1058), s(981, 1060), 
  s(956, 1064), s(950, 1076), s(961, 1072), s(955, 1105), s(959, 1094), s(965, 1083), s(966, 1085), s(967, 1064), 
  s(952, 1042), s(950, 1067), s(950, 1088), s(949, 1103), s(957, 1107), s(953, 1074), s(967, 1061), s(965, 1044), 
  s(955, 1034), s(963, 1048), s(958, 1071), s(954, 1081), s(951, 1091), s(971, 1051), s(974, 1045), s(964, 1030), 
  s(961, 1018), s(958, 1033), s(968, 1025), s(969, 1035), s(969, 1036), s(975, 999), s(966, 997), s(954, 987), 
  s(944, 1024), s(945, 1022), s(951, 1008), s(960, 996), s(951, 1015), s(937, 1011), s(946, 967), s(947, 985), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(130, 233), s(111, 237), s(148, 205), s(145, 218), s(178, 217), s(181, 239), s(158, 233), s(104, 261), 
  s(86, 154), s(92, 149), s(126, 137), s(119, 128), s(124, 132), s(157, 143), s(143, 163), s(121, 162), 
  s(65, 136), s(75, 127), s(86, 122), s(99, 112), s(108, 112), s(108, 119), s(92, 125), s(85, 135), 
  s(61, 116), s(66, 114), s(83, 114), s(99, 107), s(101, 107), s(105, 104), s(83, 106), s(85, 110), 
  s(61, 116), s(74, 113), s(83, 116), s(93, 122), s(96, 122), s(104, 110), s(107, 96), s(93, 104), 
  s(61, 126), s(70, 119), s(71, 129), s(83, 130), s(82, 139), s(121, 115), s(118, 97), s(88, 103), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-91, 115), s(-63, 103), s(-82, 96), s(-7, 12), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-24, 193), s(-106, 205), s(-55, 180), s(-98, 150), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-85, 145), s(-14, 128), s(-12, 114), s(-113, 95), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-94, 64), s(-51, 52), s(-57, 49), s(-110, 23), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-70, 26), s(-38, 10), s(-62, 2), s(-136, -9), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-13, -2), s(-8, -14), s(-5, -23), s(-59, -33), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-28, -19), s(-11, -29), s(19, -41), s(13, -62), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(8, -55), s(8, -52), s(38, -70), s(37, -106), 
]),
],
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(84, 138), s(98, 123), s(64, 144), s(106, 106), s(12, 132), s(58, 97), s(-47, 149), s(-51, 165), 
  s(45, 142), s(45, 139), s(26, 121), s(35, 106), s(33, 107), s(31, 101), s(-14, 119), s(-44, 143), 
  s(35, 70), s(29, 68), s(29, 59), s(12, 58), s(8, 57), s(35, 45), s(-6, 72), s(-10, 67), 
  s(21, 34), s(8, 42), s(-9, 38), s(-2, 33), s(-14, 30), s(7, 24), s(16, 40), s(0, 36), 
  s(12, 4), s(-5, 27), s(-23, 19), s(-19, 13), s(-12, 6), s(10, 5), s(1, 27), s(12, 9), 
  s(0, 20), s(-3, 21), s(-14, 5), s(-8, 0), s(0, -3), s(4, 0), s(5, 6), s(-3, 12), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-46, -178),
  s(0, -110),
  s(-5, -46),
  s(-14, -17),
  s(-11, 5),
  s(-8, 0),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(63, -29),
  s(12, -31),
  s(-1, -27),
  s(-15, -16),
  s(-23, -20),
  s(-12, -20),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(25, 373),
  s(180, 158),
  s(52, 50),
  s(18, 15),
  s(-4, -4),
  s(3, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(27, 67);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(23, 55), s(27, 70), s(27, 74), s(30, 73), s(30, 78), s(31, 74), s(29, 71), s(27, 62), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(7, 36), s(15, 56), s(18, 67), s(22, 77), s(23, 84), s(25, 88), s(23, 89), s(19, 94), s(21, 90), s(23, 85), s(28, 85), s(-19, 114), s(23, 74), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(1, 110), s(1, 129), s(2, 151), s(1, 160), s(3, 172), s(4, 178), s(5, 186), s(10, 189), s(11, 194), s(13, 197), s(16, 202), s(21, 205), s(32, 200), s(33, 195), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(51, 220), s(50, 233), s(53, 263), s(57, 275), s(58, 283), s(62, 285), s(62, 305), s(64, 310), s(67, 309), s(70, 312), s(70, 323), s(72, 317), s(76, 322), s(74, 326), s(79, 326), s(77, 331), s(86, 326), s(90, 325), s(111, 307), s(116, 308), s(166, 274), s(147, 274), s(176, 254), s(220, 241), s(273, 199), s(202, 233), s(201, 200), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(11, 27), s(19, 38), s(28, 45), s(36, 49), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(2, 15), s(8, 20), s(12, 23), s(15, 27), s(15, 30), s(19, 29), s(21, 37), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 4), s(11, 9), s(19, 13), s(24, 20), s(28, 25), s(35, 26), s(39, 32), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 137), s(-12, 148), s(-12, 154), s(-11, 166), s(-12, 180), s(-12, 181), s(-12, 188), s(-12, 196), s(-13, 207), s(-11, 203), s(-16, 211), s(2, 195), s(-20, 232), s(19, 194), 
];

pub const PAWN_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(98, 87), s(76, 30)];
pub const PAWN_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(94, 69), s(74, 58)];
pub const PAWN_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(166, 133), s(109, 4)];
pub const PAWN_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(235, 116), s(98, -34)];
pub const KNIGHT_THREAT_ON_BISHOP: [ScoreTuple; 2] = [s(36, 31), s(39, 38)];
pub const KNIGHT_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(64, 68), s(83, 15)];
pub const KNIGHT_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(113, 236), s(64, -40)];
pub const BISHOP_THREAT_ON_KNIGHT: [ScoreTuple; 2] = [s(18, 36), s(27, 30)];
pub const BISHOP_THREAT_ON_ROOK: [ScoreTuple; 2] = [s(85, 91), s(66, 33)];
pub const BISHOP_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(121, 224), s(90, 22)];
pub const ROOK_THREAT_ON_QUEEN: [ScoreTuple; 2] = [s(115, 399), s(84, 5)];

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-26, 81);

pub const TEMPO_BONUS: ScoreTuple = s(34, 23);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-4, 10), s(5, -7), s(9, -4), s(12, -7), s(11, -5), s(11, -6), s(10, -5), s(11, -6), s(12, -6), s(11, -3), s(9, -2), s(10, -5), s(7, -1), s(10, -3), s(8, -4), s(7, -2), s(5, -1), s(2, 0), s(3, -4), s(5, -7), s(8, -9), s(2, -8), s(1, -9), s(1, -14), s(0, -15), s(0, -21), s(3, -18), s(-64, -10), 
],
// Bishop attacks
[
  s(3, 7), s(8, -4), s(11, -5), s(10, -4), s(10, -2), s(11, -5), s(9, -5), s(10, -4), s(12, -6), s(10, -5), s(10, -6), s(9, -5), s(8, -5), s(7, -4), s(9, -7), s(6, -6), s(8, -7), s(6, -6), s(5, -7), s(3, -5), s(2, -4), s(4, -11), s(5, -7), s(2, -10), s(-2, -8), s(4, -16), s(4, -13), s(-8, -16), 
],
// Rook attacks
[
  s(5, 2), s(3, -2), s(5, -5), s(6, -7), s(5, -7), s(4, -5), s(5, -6), s(4, -4), s(5, -6), s(4, -5), s(4, -5), s(4, -7), s(2, -3), s(2, -3), s(2, -2), s(1, -1), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(-1, 0), s(0, -1), s(-3, 0), s(-2, 0), s(-3, 0), s(-9, 1), s(-12, 3), s(0, -2), 
],
// Queen attacks
[
  s(-1, 4), s(1, -4), s(3, -7), s(5, -9), s(4, -6), s(4, -3), s(4, -5), s(5, -3), s(5, -6), s(6, -3), s(5, 0), s(6, -1), s(6, 0), s(8, -1), s(6, 0), s(9, -4), s(8, -3), s(11, -4), s(10, -4), s(15, -6), s(15, -6), s(10, -3), s(27, -13), s(16, -12), s(18, -6), s(14, -6), s(-17, 12), s(15, -21), 
],
// Pawn attacks
[
  s(0, 6), s(6, -2), s(4, -5), s(2, -4), s(1, -4), s(2, -4), s(1, -2), s(1, -4), s(0, -3), s(0, -2), s(0, -3), s(0, -3), s(0, -2), s(1, -3), s(0, -2), s(1, -3), s(2, -3), s(2, -4), s(3, -4), s(3, -4), s(5, -6), s(6, -6), s(7, -7), s(9, -8), s(12, -8), s(2, -5), s(28, -15), s(13, -10), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-5, 4), s(-1, 3), s(-4, 3), s(-3, 2), s(-4, 3), s(-3, 3), s(-3, 3), s(-3, 1), s(-3, 2), s(-4, 2), s(-3, 2), s(-3, 0), s(-5, 3), s(-5, 3), s(-3, 2), s(-5, 4), s(-5, 4), s(-2, 1), s(-1, 5), s(-3, 5), s(-5, 6), s(-1, 7), s(-5, 8), s(-3, 11), s(-7, 12), s(-9, 19), s(-10, 14), s(1, 22), 
],
// Bishop defenses
[
  s(0, 1), s(-2, 0), s(-4, 2), s(-5, 2), s(-3, 2), s(-3, 2), s(-5, 3), s(-3, 2), s(-4, 2), s(-4, 3), s(-3, 1), s(-3, 1), s(-3, 2), s(-4, 2), s(-3, 2), s(-2, 0), s(-2, 1), s(0, 0), s(-2, 1), s(0, 0), s(0, 0), s(-2, 2), s(-4, 2), s(0, 2), s(2, 3), s(-1, 5), s(-1, 1), s(5, 9), 
],
// Rook defenses
[
  s(-21, 12), s(-4, 4), s(-5, 6), s(-5, 5), s(-4, 4), s(-5, 6), s(-3, 4), s(-4, 4), s(-4, 5), s(-4, 4), s(-3, 3), s(-3, 4), s(-1, 2), s(-3, 5), s(-2, 3), s(-1, 2), s(0, 2), s(-1, 2), s(-1, 3), s(-1, 3), s(-4, 5), s(-2, 4), s(-2, 4), s(-4, 5), s(-4, 4), s(-6, 4), s(4, 1), s(-3, 3), 
],
// Queen defenses
[
  s(2, -9), s(-2, 2), s(-2, 1), s(-2, 1), s(-3, 2), s(-2, 2), s(-3, 4), s(-3, 5), s(-4, 6), s(-3, 6), s(-3, 4), s(-3, 4), s(-2, 3), s(-1, 3), s(0, 1), s(-1, 4), s(0, 1), s(0, 2), s(1, 1), s(2, 0), s(3, 0), s(9, -2), s(-2, 8), s(0, 7), s(6, 3), s(13, 0), s(6, 5), s(1, 4), 
],
// Pawn defenses
[
  s(-10, -4), s(-16, 3), s(-12, 1), s(-10, 2), s(-8, 0), s(-8, 0), s(-8, 0), s(-6, 0), s(-4, -1), s(-4, -2), s(-2, -3), s(-2, -2), s(0, -5), s(0, -5), s(0, -6), s(1, -7), s(1, -6), s(1, -8), s(3, -11), s(2, -9), s(6, -13), s(7, -14), s(12, -16), s(14, -18), s(16, -18), s(49, -29), s(8, -20), s(21, -24), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(88, 30),
  s(65, 45),
  s(55, 57),
  s(48, 64),
  s(42, 75),
  s(31, 104),
  s(39, 122),
  s(48, 100),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(-168, -8), s(55, -28), s(71, -23), s(74, -27), s(83, -26), s(82, -29), s(81, -27), s(83, -27), s(84, -33), s(81, -28), s(80, -27), s(76, -27), s(76, -24), s(76, -28), s(74, -24), s(72, -21), s(69, -18), s(70, -25), s(68, -18), s(64, -15), s(66, -17), s(56, -6), s(57, -9), s(57, -9), s(57, -9), s(52, -3), s(54, -6), s(51, -5), s(46, 2), s(47, -1), s(46, 1), s(44, 0), s(41, 2), s(43, 3), s(41, 3), s(33, 12), s(34, 12), s(34, 10), s(34, 10), s(29, 17), s(29, 13), s(29, 17), s(26, 18), s(24, 21), s(24, 19), s(23, 22), s(18, 26), s(19, 23), s(19, 26), s(17, 27), s(15, 29), s(15, 27), s(13, 30), s(12, 31), s(8, 35), s(8, 39), s(6, 37), s(0, 43), s(1, 42), s(0, 43), s(-2, 44), s(0, 44), s(0, 46), s(-6, 50), s(-4, 50), s(-5, 50), s(-10, 55), s(-10, 54), s(-13, 58), s(-10, 54), s(-14, 58), s(-18, 64), s(-17, 58), s(-15, 57), s(-25, 69), s(-25, 67), s(-23, 67), s(-25, 69), s(-24, 69), s(-28, 72), s(-29, 74), s(-29, 76), s(-35, 80), s(-37, 81), s(-32, 80), s(-37, 79), s(-35, 85), s(-40, 83), s(-38, 78), s(-42, 87), s(-44, 91), s(-47, 95), s(-48, 95), s(-47, 85), s(-45, 85), s(-48, 104), s(-51, 95), s(-50, 100), s(-56, 104), s(-50, 101), s(-56, 111), s(-56, 107), s(-47, 100), s(-54, 111), s(-55, 113), s(-63, 99), s(-54, 112), s(-53, 112), s(-58, 120), s(-63, 113), s(-59, 106), s(-52, 112), s(-55, 107), s(-55, 110), s(-51, 66), s(-55, 151), s(-73, 120), s(-73, 120), s(-65, 67), s(-55, 174), s(-46, 166), s(-63, 191), s(-68, 148), s(-80, 89), s(-53, 180), s(-44, 159), s(-47, -84), s(-96, 210), s(-40, 85), s(-126, 146), s(-91, 157), s(-66, 186), s(-20, 69), s(-135, 33), s(-104, -21), s(-121, -83), s(-73, 17), s(175, 105), s(-29, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(49, 37), s(24, -5), s(42, 2), s(38, 9), s(39, 17), s(39, 11), s(32, 27), s(34, 18), s(36, 19), s(28, 28), s(27, 30), s(34, 18), s(24, 31), s(31, 25), s(30, 23), s(18, 34), s(23, 28), s(33, 17), s(11, 34), s(20, 33), s(24, 20), s(17, 33), s(12, 35), s(28, 25), s(11, 33), s(15, 30), s(21, 33), s(15, 28), s(7, 37), s(23, 23), s(20, 30), s(5, 32), s(12, 35), s(13, 29), s(3, 37), s(9, 39), s(21, 24), s(-8, 32), s(-2, 35), s(11, 22), s(4, 30), s(10, 28), s(-6, 22), s(-8, 21), s(-18, 30), s(50, 43), s(-167, 48), s(5, 13), s(77, 100), s(76, -94), s(-5, -136), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const FILE_STRUCTURE: [ScoreTuple; 193] = [
  s(13, 52), s(31, 37), s(37, 40), s(21, 37), s(17, 42), s(31, 26), s(29, 0), s(1, 1), s(20, 30), s(22, -23), s(1, 1), s(1, 1), s(10, -13), s(1, 1), s(1, 1), s(1, 1), s(24, 44), s(33, 28), s(21, 47), s(1, 1), s(30, 28), s(30, 25), s(1, 1), s(1, 1), s(27, 18), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(28, 33), s(33, 25), s(1, 1), s(1, 1), s(32, 16), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(29, 23), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(16, 51), s(30, 41), s(34, 52), s(1, 1), s(17, 41), s(36, 33), s(1, 1), s(1, 1), s(28, 26), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(24, 37), s(32, 22), s(1, 1), s(1, 1), s(26, 29), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(29, 11), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(10, 57), s(27, 47), s(1, 1), s(1, 1), s(20, 44), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(19, 38), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(7, 68), 
];

pub const STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(49, 92);

pub const NON_STM_QUEEN_CONTACT_CHECKS: ScoreTuple = s(33, -34);

pub const STM_ROOK_CONTACT_CHECKS: ScoreTuple = s(40, 3);

pub const NON_STM_ROOK_CONTACT_CHECKS: ScoreTuple = s(21, -2);
