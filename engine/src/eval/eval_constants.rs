#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(246, 292), s(334, 325), s(324, 387), s(383, 353), s(482, 341), s(295, 354), s(347, 307), s(311, 250), 
  s(332, 331), s(371, 359), s(465, 322), s(412, 357), s(432, 333), s(448, 324), s(420, 331), s(377, 299), 
  s(356, 330), s(441, 336), s(449, 369), s(460, 361), s(445, 358), s(535, 335), s(444, 324), s(406, 306), 
  s(420, 336), s(441, 359), s(440, 387), s(488, 381), s(456, 385), s(492, 370), s(441, 361), s(450, 320), 
  s(409, 346), s(433, 349), s(445, 382), s(457, 384), s(456, 382), s(452, 377), s(465, 353), s(419, 343), 
  s(404, 328), s(412, 357), s(435, 357), s(436, 370), s(450, 375), s(439, 350), s(440, 336), s(403, 337), 
  s(385, 300), s(385, 325), s(405, 335), s(427, 337), s(424, 340), s(424, 329), s(418, 305), s(404, 305), 
  s(297, 290), s(380, 299), s(371, 310), s(383, 327), s(394, 318), s(387, 313), s(380, 311), s(393, 263), 
]),
// Bishop PST
Pst::new([
  s(410, 394), s(400, 387), s(314, 405), s(276, 408), s(340, 399), s(336, 398), s(411, 390), s(407, 384), 
  s(412, 383), s(425, 390), s(408, 381), s(384, 378), s(424, 378), s(457, 376), s(413, 389), s(379, 377), 
  s(435, 378), s(470, 373), s(470, 377), s(463, 368), s(475, 365), s(504, 373), s(469, 378), s(471, 367), 
  s(427, 377), s(453, 379), s(455, 392), s(502, 391), s(467, 397), s(484, 382), s(449, 374), s(441, 380), 
  s(436, 368), s(450, 381), s(459, 390), s(475, 396), s(480, 384), s(446, 389), s(444, 371), s(430, 365), 
  s(441, 366), s(461, 377), s(461, 389), s(459, 386), s(456, 393), s(468, 378), s(445, 375), s(435, 365), 
  s(455, 349), s(459, 352), s(460, 358), s(445, 369), s(450, 369), s(462, 362), s(470, 350), s(440, 343), 
  s(415, 353), s(442, 367), s(423, 364), s(417, 367), s(431, 364), s(415, 373), s(427, 357), s(423, 346), 
]),
// Rook PST
Pst::new([
  s(668, 711), s(695, 701), s(641, 725), s(694, 706), s(680, 710), s(627, 719), s(667, 706), s(690, 699), 
  s(638, 716), s(644, 718), s(670, 714), s(691, 706), s(700, 690), s(688, 698), s(645, 712), s(647, 708), 
  s(608, 706), s(643, 703), s(641, 706), s(657, 698), s(661, 689), s(661, 685), s(703, 679), s(644, 682), 
  s(579, 709), s(627, 694), s(618, 710), s(640, 693), s(639, 688), s(631, 695), s(630, 684), s(606, 693), 
  s(568, 701), s(581, 703), s(601, 701), s(615, 694), s(640, 677), s(600, 685), s(628, 674), s(580, 685), 
  s(570, 684), s(588, 691), s(601, 681), s(610, 675), s(608, 680), s(616, 666), s(613, 670), s(578, 666), 
  s(555, 687), s(590, 677), s(595, 679), s(607, 680), s(615, 669), s(605, 668), s(610, 662), s(524, 683), 
  s(580, 680), s(590, 680), s(602, 677), s(610, 672), s(610, 667), s(592, 670), s(563, 680), s(575, 656), 
]),
// Queen PST
Pst::new([
  s(1093, 1233), s(1099, 1259), s(1083, 1290), s(1103, 1282), s(1185, 1237), s(1140, 1269), s(1211, 1206), s(1173, 1251), 
  s(1118, 1130), s(1091, 1182), s(1113, 1205), s(1093, 1238), s(1024, 1294), s(1129, 1191), s(1156, 1173), s(1207, 1130), 
  s(1136, 1115), s(1127, 1139), s(1147, 1137), s(1115, 1202), s(1161, 1178), s(1168, 1162), s(1161, 1123), s(1142, 1166), 
  s(1105, 1153), s(1129, 1143), s(1106, 1159), s(1110, 1188), s(1127, 1175), s(1143, 1159), s(1136, 1177), s(1140, 1143), 
  s(1137, 1103), s(1110, 1156), s(1132, 1146), s(1120, 1189), s(1137, 1159), s(1124, 1148), s(1148, 1140), s(1130, 1145), 
  s(1130, 1096), s(1148, 1088), s(1142, 1126), s(1142, 1125), s(1142, 1148), s(1148, 1115), s(1154, 1119), s(1142, 1121), 
  s(1134, 1067), s(1146, 1076), s(1157, 1071), s(1161, 1070), s(1164, 1083), s(1170, 1068), s(1153, 1056), s(1169, 1031), 
  s(1147, 1055), s(1136, 1056), s(1147, 1056), s(1156, 1051), s(1150, 1063), s(1120, 1061), s(1137, 1039), s(1130, 1017), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(158, 297), s(149, 294), s(138, 287), s(167, 262), s(135, 277), s(172, 252), s(92, 293), s(69, 311), 
  s(95, 166), s(101, 157), s(131, 151), s(136, 140), s(191, 128), s(206, 130), s(190, 148), s(142, 155), 
  s(83, 145), s(99, 132), s(105, 130), s(126, 108), s(134, 119), s(130, 121), s(115, 125), s(95, 130), 
  s(79, 125), s(76, 124), s(102, 117), s(128, 107), s(125, 110), s(123, 109), s(95, 107), s(89, 111), 
  s(85, 118), s(93, 116), s(105, 115), s(112, 123), s(117, 125), s(121, 118), s(122, 97), s(102, 103), 
  s(75, 128), s(90, 115), s(83, 131), s(100, 126), s(96, 138), s(132, 120), s(120, 100), s(90, 104), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-77, -107), s(68, -55), s(115, -38), s(-21, -3), s(-89, 17), s(-93, 31), s(63, -1), s(56, -61), 
  s(93, -36), s(23, 47), s(-74, 60), s(95, 33), s(-11, 62), s(-55, 88), s(10, 59), s(-6, 9), 
  s(2, 6), s(38, 45), s(79, 49), s(-2, 56), s(41, 61), s(117, 74), s(154, 57), s(43, -2), 
  s(46, -20), s(4, 48), s(-8, 57), s(-66, 75), s(-102, 79), s(-57, 67), s(-17, 50), s(-70, 0), 
  s(-121, -4), s(-3, 13), s(-48, 47), s(-116, 70), s(-129, 71), s(-75, 43), s(-64, 21), s(-97, -12), 
  s(20, -35), s(-4, 4), s(-43, 32), s(-75, 43), s(-51, 39), s(-35, 22), s(3, 0), s(-15, -29), 
  s(54, -58), s(36, -18), s(-25, 12), s(-67, 26), s(-54, 25), s(-25, 8), s(35, -22), s(36, -54), 
  s(35, -100), s(70, -68), s(34, -37), s(-86, 2), s(-5, -31), s(-36, -12), s(49, -55), s(47, -97), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(58, 197), s(49, 194), s(38, 187), s(67, 162), s(35, 177), s(72, 152), s(-7, 193), s(-30, 211), 
  s(48, 207), s(29, 213), s(13, 178), s(15, 145), s(-32, 147), s(-4, 159), s(-68, 187), s(-61, 203), 
  s(26, 117), s(8, 107), s(17, 85), s(1, 80), s(-3, 65), s(33, 67), s(-26, 113), s(-17, 109), 
  s(5, 67), s(-6, 61), s(-26, 46), s(-22, 43), s(-38, 45), s(-37, 50), s(1, 66), s(5, 60), 
  s(7, 23), s(-3, 29), s(-28, 24), s(-41, 28), s(-29, 14), s(1, 11), s(-24, 41), s(19, 24), 
  s(-1, 16), s(9, 21), s(1, 7), s(-29, 19), s(-24, 12), s(-18, 15), s(-13, 29), s(-13, 26), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(45, -254),
  s(22, -149),
  s(0, -61),
  s(10, -35),
  s(-5, 0),
  s(-1, -10),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(37, -22),
  s(11, -25),
  s(-4, -25),
  s(-17, -14),
  s(-33, -16),
  s(-16, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(98, 312),
  s(219, 126),
  s(49, 51),
  s(18, 12),
  s(-7, -8),
  s(6, -9),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(31, 68);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(5, 51), s(5, 58), s(1, 63), s(6, 58), s(5, 62), s(6, 58), s(1, 56), s(6, 41), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(4, 21), s(9, 39), s(9, 51), s(10, 60), s(9, 67), s(9, 72), s(6, 72), s(-1, 78), s(1, 71), s(6, 64), s(18, 63), s(-41, 99), s(1, 54), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(3, 65), s(6, 81), s(12, 87), s(10, 97), s(15, 111), s(15, 117), s(17, 119), s(26, 119), s(25, 123), s(25, 125), s(30, 127), s(34, 130), s(35, 125), s(16, 128), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(17, 328), s(22, 318), s(24, 328), s(33, 321), s(38, 325), s(40, 329), s(42, 346), s(45, 352), s(51, 351), s(54, 357), s(57, 368), s(57, 365), s(61, 366), s(64, 367), s(62, 377), s(66, 382), s(79, 363), s(85, 365), s(108, 351), s(89, 365), s(152, 329), s(116, 337), s(214, 287), s(225, 253), s(251, 255), s(188, 285), s(185, 282), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(20, 24), s(32, 35), s(41, 40), s(53, 42), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(8, 11), s(17, 15), s(25, 19), s(30, 21), s(32, 21), s(36, 17), s(39, 26), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 2), s(7, 11), s(17, 13), s(27, 15), s(26, 24), s(38, 23), s(42, 31), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-4, 71), s(-4, 85), s(-1, 80), s(-4, 96), s(-5, 109), s(-8, 110), s(-9, 117), s(-13, 128), s(-18, 144), s(-7, 137), s(-40, 172), s(-28, 165), s(-51, 224), s(7, 155), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(93, 34);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(90, 59);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(147, -3);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(99, 5);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(41, 40);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(85, 21);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(62, -32);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 38);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(77, 29);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(81, 53);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(113, -2);

pub const TEMPO_BONUS: ScoreTuple = s(40, 29);

// KING SAFETY FEATURES
pub const ENEMY_VIRT_MOBILITY: [ScoreTuple; 28] = [
  s(2, -23), s(7, 59), s(38, 67), s(53, 77), s(65, 75), s(69, 65), s(73, 72), s(80, 93), s(86, 67), s(92, 69), s(96, 62), s(99, 64), s(104, 57), s(103, 63), s(107, 66), s(107, 66), s(106, 70), s(107, 79), s(102, 84), s(97, 92), s(99, 94), s(102, 94), s(96, 103), s(77, 110), s(89, 116), s(67, 116), s(88, 120), s(-78, 125), 
];

pub const ATTACKS: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(16, -23), s(13, -15), s(8, -5), s(14, -9), s(1, -31), 
];

pub const DEFENSES: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(-7, 12), s(-7, 4), s(-3, 4), s(-1, 5), s(-10, -18), 
];

pub const INNER_PAWN_SHIELD: ScoreTuple = s(-1, 17);
pub const OUTER_PAWN_SHIELD: ScoreTuple = s(8, -2);

pub const BIAS: ScoreTuple = s(0, 0);
