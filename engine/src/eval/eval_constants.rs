#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(199, 255), s(248, 300), s(281, 334), s(317, 312), s(341, 326), s(263, 299), s(265, 294), s(234, 235), 
  s(266, 302), s(300, 311), s(327, 300), s(322, 310), s(339, 292), s(352, 291), s(302, 300), s(307, 271), 
  s(284, 300), s(322, 305), s(343, 329), s(349, 324), s(351, 317), s(382, 306), s(348, 287), s(330, 271), 
  s(311, 301), s(325, 319), s(339, 340), s(376, 336), s(356, 334), s(372, 329), s(338, 312), s(351, 285), 
  s(305, 311), s(321, 313), s(334, 341), s(354, 335), s(352, 338), s(349, 329), s(351, 308), s(322, 305), 
  s(294, 294), s(306, 310), s(324, 318), s(327, 331), s(348, 327), s(333, 307), s(334, 300), s(304, 304), 
  s(272, 279), s(282, 292), s(293, 303), s(318, 300), s(319, 301), s(318, 299), s(300, 284), s(298, 290), 
  s(229, 263), s(268, 275), s(265, 284), s(281, 291), s(288, 288), s(293, 279), s(272, 284), s(269, 274), 
]),
// Bishop PST
Pst::new([
  s(310, 345), s(297, 339), s(264, 343), s(249, 348), s(270, 343), s(265, 340), s(299, 341), s(301, 325), 
  s(316, 311), s(322, 324), s(322, 317), s(289, 322), s(318, 314), s(329, 322), s(306, 325), s(302, 308), 
  s(323, 326), s(346, 315), s(335, 324), s(344, 312), s(339, 313), s(366, 323), s(350, 318), s(355, 312), 
  s(312, 319), s(333, 322), s(340, 325), s(370, 334), s(351, 332), s(362, 324), s(330, 320), s(332, 313), 
  s(316, 308), s(327, 321), s(337, 330), s(357, 331), s(358, 328), s(329, 327), s(326, 318), s(331, 298), 
  s(319, 309), s(341, 316), s(345, 323), s(340, 327), s(343, 329), s(344, 322), s(337, 314), s(338, 299), 
  s(336, 305), s(337, 299), s(343, 301), s(328, 312), s(334, 313), s(348, 307), s(355, 304), s(333, 292), 
  s(307, 294), s(337, 310), s(312, 312), s(306, 305), s(313, 303), s(307, 318), s(328, 296), s(330, 284), 
]),
// Rook PST
Pst::new([
  s(531, 593), s(541, 590), s(525, 602), s(543, 591), s(558, 584), s(532, 586), s(535, 586), s(559, 579), 
  s(518, 572), s(530, 574), s(541, 577), s(558, 565), s(547, 562), s(565, 561), s(555, 558), s(557, 558), 
  s(500, 572), s(525, 570), s(525, 567), s(529, 565), s(557, 556), s(557, 547), s(588, 549), s(550, 547), 
  s(479, 575), s(508, 563), s(507, 574), s(516, 564), s(526, 553), s(527, 549), s(530, 549), s(507, 553), 
  s(468, 561), s(477, 563), s(492, 562), s(505, 555), s(510, 552), s(483, 552), s(514, 546), s(484, 547), 
  s(468, 553), s(475, 554), s(489, 543), s(490, 548), s(500, 543), s(502, 532), s(521, 522), s(491, 526), 
  s(456, 547), s(474, 547), s(486, 546), s(490, 543), s(498, 533), s(500, 530), s(522, 519), s(451, 540), 
  s(471, 549), s(474, 546), s(480, 546), s(491, 538), s(496, 531), s(489, 541), s(481, 540), s(471, 532), 
]),
// Queen PST
Pst::new([
  s(960, 1037), s(988, 1040), s(1013, 1046), s(1019, 1044), s(1021, 1046), s(1016, 1038), s(1020, 1024), s(1012, 1036), 
  s(935, 974), s(913, 991), s(942, 995), s(939, 1006), s(934, 1014), s(954, 991), s(962, 980), s(992, 989), 
  s(931, 968), s(920, 981), s(938, 991), s(937, 1009), s(950, 998), s(974, 985), s(977, 966), s(969, 977), 
  s(922, 973), s(919, 985), s(926, 988), s(926, 1002), s(946, 996), s(952, 988), s(955, 994), s(948, 985), 
  s(921, 958), s(917, 985), s(923, 990), s(927, 1007), s(936, 1000), s(926, 992), s(943, 972), s(938, 976), 
  s(915, 957), s(930, 963), s(929, 978), s(928, 985), s(930, 996), s(942, 968), s(947, 965), s(938, 957), 
  s(920, 938), s(924, 942), s(934, 938), s(941, 946), s(938, 955), s(950, 923), s(950, 923), s(948, 901), 
  s(908, 937), s(908, 937), s(914, 932), s(923, 929), s(920, 939), s(908, 934), s(924, 915), s(904, 927), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(168, 181), s(170, 177), s(162, 180), s(172, 167), s(146, 174), s(163, 168), s(129, 187), s(118, 193), 
  s(88, 152), s(82, 156), s(114, 145), s(119, 139), s(117, 131), s(161, 122), s(148, 150), s(119, 145), 
  s(65, 131), s(71, 116), s(82, 112), s(93, 94), s(107, 98), s(104, 98), s(90, 107), s(85, 111), 
  s(62, 107), s(58, 107), s(79, 100), s(94, 94), s(97, 93), s(93, 95), s(76, 92), s(78, 92), 
  s(66, 107), s(72, 102), s(83, 103), s(88, 108), s(100, 109), s(98, 104), s(107, 91), s(89, 93), 
  s(63, 115), s(67, 108), s(70, 114), s(84, 115), s(86, 125), s(114, 107), s(111, 93), s(79, 96), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-14, -56), s(-2, -14), s(15, -8), s(-5, 14), s(9, 1), s(10, 16), s(19, 24), s(9, -39), 
  s(-10, 6), s(7, 37), s(-34, 44), s(33, 42), s(12, 46), s(18, 66), s(26, 56), s(0, 29), 
  s(-32, 22), s(24, 37), s(-4, 51), s(-11, 56), s(15, 62), s(55, 69), s(53, 61), s(12, 27), 
  s(-17, 13), s(-5, 38), s(-26, 50), s(-55, 57), s(-53, 61), s(-27, 58), s(-31, 53), s(-68, 27), 
  s(-32, -10), s(-30, 16), s(-68, 41), s(-93, 53), s(-91, 54), s(-71, 43), s(-84, 32), s(-94, 11), 
  s(-9, -20), s(-3, -2), s(-60, 19), s(-72, 31), s(-73, 31), s(-72, 25), s(-39, 9), s(-55, -4), 
  s(48, -35), s(4, -13), s(-11, -3), s(-51, 7), s(-51, 11), s(-31, 3), s(17, -14), s(27, -34), 
  s(40, -72), s(64, -60), s(31, -40), s(-69, -16), s(-10, -32), s(-37, -20), s(40, -52), s(43, -82), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(68, 81), s(70, 77), s(62, 80), s(72, 67), s(46, 74), s(63, 68), s(29, 87), s(18, 93), 
  s(63, 88), s(67, 88), s(45, 71), s(40, 54), s(47, 64), s(40, 74), s(11, 76), s(5, 90), 
  s(32, 51), s(27, 59), s(26, 51), s(13, 57), s(2, 53), s(22, 51), s(-14, 72), s(-5, 66), 
  s(14, 24), s(9, 34), s(-15, 36), s(-4, 33), s(-20, 35), s(1, 31), s(4, 49), s(-1, 42), 
  s(7, 0), s(-7, 25), s(-27, 24), s(-16, 14), s(-16, 12), s(3, 10), s(-1, 35), s(24, 13), 
  s(-1, 8), s(0, 18), s(-11, 11), s(-7, 1), s(1, -5), s(-2, 4), s(15, 13), s(1, 13), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-60, -111),
  s(-11, -89),
  s(-2, -49),
  s(-8, -26),
  s(-10, -5),
  s(-18, -1),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(13, 34),
  s(-7, -12),
  s(-1, -24),
  s(-13, -13),
  s(-26, -17),
  s(-17, -15),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(54, 109),
  s(95, 110),
  s(51, 42),
  s(20, 15),
  s(-4, -5),
  s(5, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(39, 56);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(24, 3), s(25, 15), s(24, 16), s(25, 15), s(24, 17), s(26, 10), s(25, 4), s(31, -13), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(16, 0), s(23, 15), s(27, 22), s(31, 29), s(32, 34), s(34, 36), s(34, 36), s(31, 37), s(36, 31), s(40, 24), s(52, 20), s(19, 40), s(38, 9), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(5, 29), s(8, 38), s(8, 56), s(8, 66), s(11, 71), s(11, 75), s(11, 82), s(17, 81), s(18, 84), s(20, 85), s(23, 89), s(28, 90), s(33, 85), s(24, 85), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(42, -6), s(40, -7), s(42, 19), s(43, 41), s(43, 58), s(45, 66), s(44, 93), s(45, 102), s(46, 106), s(47, 112), s(47, 124), s(47, 124), s(50, 129), s(49, 134), s(55, 136), s(55, 140), s(65, 136), s(73, 135), s(88, 128), s(98, 128), s(111, 122), s(101, 114), s(101, 113), s(98, 110), s(89, 102), s(50, 71), s(36, 58), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(18, 24), s(30, 33), s(41, 38), s(53, 40), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 18), s(13, 22), s(19, 26), s(24, 29), s(25, 31), s(31, 28), s(37, 34), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(3, 18), s(10, 19), s(17, 23), s(24, 30), s(28, 34), s(35, 35), s(40, 41), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(7, 90), s(9, 103), s(9, 114), s(12, 116), s(14, 121), s(15, 121), s(17, 122), s(20, 124), s(23, 129), s(28, 123), s(29, 126), s(53, 107), s(53, 114), s(71, 98), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 21);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(76, 46);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(101, 14);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(95, -14);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 30);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(77, 12);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(66, -48);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 26);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(67, 24);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(87, 30);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(89, -10);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-28, 75);

pub const TEMPO_BONUS: ScoreTuple = s(35, 17);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-1306, -10), s(-240, -11), s(-626, -11), s(-1200, -12), s(-2, -3), s(-4017, 2), s(-340, -8), s(439, -8), ],
  [s(-1128, -10), s(-378, 7), s(-1211, 12), s(-653, -11), s(-3, 1), s(-3278, 12), s(-411, 12), s(527, 11), ],
  [s(-950, -9), s(-45, 0), s(-662, 7), s(-1479, -3), s(-5, -7), s(-2229, 7), s(-597, 1), s(285, 0), ],
  [s(-1528, -11), s(-350, -10), s(-1786, -10), s(-73, 8), s(-40, -3), s(-2840, 5), s(-738, -9), s(-130, -10), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(1513, -6), s(-64, -9), s(453, -4), s(821, 2), s(6, -7), s(949, 8), s(-463, -6), s(199, -6), ],
  [s(568, -6), s(-181, -7), s(719, -1), s(325, -11), s(2, 0), s(1354, 12), s(-502, -10), s(252, -4), ],
  [s(-23, 0), s(-343, 11), s(-78, -11), s(-1105, 9), s(-18, -7), s(303, 8), s(-510, -10), s(632, 5), ],
  [s(188, 12), s(-240, 0), s(-558, -4), s(154, -12), s(-6, -10), s(123, -9), s(-571, 10), s(118, 9), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(29, -8), s(-36, -11), s(-53, 2), s(475, 11), s(-3, 8), s(-1392, -11), s(-362, 2), s(208, 8), ],
  [s(1381, 0), s(-106, -6), s(385, -1), s(-722, 0), s(-8, -5), s(2067, -11), s(-355, -3), s(247, 3), ],
  [s(1858, -5), s(-108, -4), s(-232, -1), s(504, 10), s(-8, -11), s(1830, 10), s(-299, -5), s(366, 6), ],
  [s(-1323, -7), s(-125, 0), s(-12, -6), s(-812, -8), s(2, -4), s(-30, 10), s(-315, -10), s(306, 11), ],
  [s(-119, 0), s(-156, 0), s(-39, -7), s(-644, 3), s(1, -7), s(-438, 5), s(-77, 0), s(133, 0), ],
  [s(1036, 1), s(-85, -10), s(548, -1), s(-830, -7), s(-5, -12), s(2128, -8), s(-99, -5), s(46, 9), ],
  [s(512, 4), s(-9, -8), s(330, 12), s(-3, -4), s(5, 0), s(1433, 1), s(-30, 4), s(-2, 1), ],
  [s(141, 1), s(0, 7), s(5, -11), s(-162, 4), s(-9, 7), s(183, -8), s(-35, 11), s(-43, 9), ],
]);

pub const TROPISM: [ScoreTuple; 8] = 
  [s(524, 0), s(-523, -6), s(244, 0), s(413, -7), s(-45, 0), s(152, 2), s(-673, 11), s(27, 9), ];

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(877, -2), s(11, 11), s(-35, -3), s(-538, 4), s(8, -5), s(1834, -8), s(-16, 2), s(12, 0), ],
  [s(1276, -10), s(-11, 7), s(165, -7), s(-46, 0), s(9, 11), s(3483, 2), s(-10, 12), s(37, 0), ],
  [s(1099, 12), s(15, 3), s(468, 2), s(-759, 6), s(-9, 11), s(2223, 3), s(-22, -4), s(45, 4), ],
  [s(420, 0), s(-27, -8), s(198, -5), s(-1053, -9), s(-1, -2), s(-572, 9), s(-4, 1), s(45, -3), ],
  [s(184, 0), s(-26, 5), s(60, 11), s(238, 8), s(-2, 12), s(673, 1), s(-32, -12), s(56, 5), ],
  [s(-150, 0), s(-9, 7), s(119, -12), s(-580, -6), s(2, 3), s(-204, 3), s(-49, 8), s(77, -10), ],
  [s(862, -10), s(-32, 4), s(460, 7), s(-577, 1), s(-5, 7), s(-1073, 3), s(-50, -6), s(110, 0), ],
  [s(182, 7), s(-29, -5), s(827, 1), s(265, 2), s(-4, -7), s(-522, 9), s(-47, -9), s(70, -7), ],
  [s(923, 1), s(-28, 12), s(-213, -6), s(97, -2), s(1, 0), s(-1138, 9), s(-75, 0), s(153, -1), ],
  [s(200, -11), s(-40, 5), s(380, 0), s(56, 9), s(-12, 0), s(666, -7), s(-180, 6), s(142, 9), ],
  [s(963, 12), s(-68, -7), s(309, -5), s(179, -9), s(0, -10), s(2569, -7), s(-131, -9), s(211, 9), ],
  [s(1760, 8), s(-51, -8), s(581, 1), s(39, 8), s(10, -10), s(-259, 4), s(-202, -11), s(205, 0), ],
  [s(256, -1), s(-90, 6), s(955, 2), s(-166, 1), s(-5, -10), s(205, 6), s(-173, -6), s(90, 10), ],
  [s(1697, -7), s(-93, 0), s(216, 0), s(260, 5), s(1, 6), s(3564, 2), s(-250, -9), s(280, 7), ],
  [s(51, -2), s(-106, -12), s(166, -3), s(273, 12), s(-6, 1), s(1149, 7), s(-274, 4), s(247, -8), ],
  [s(694, 9), s(-86, -6), s(110, 7), s(-300, 10), s(-12, -10), s(1123, 8), s(-315, 8), s(247, 10), ],
  [s(647, -7), s(-77, -1), s(-160, -9), s(200, -6), s(8, -1), s(2622, 8), s(-317, -11), s(183, -1), ],
  [s(1733, -5), s(-68, 3), s(148, 1), s(-341, 10), s(9, 0), s(1764, -12), s(-284, -5), s(211, 8), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(2226, -6), s(-75, -12), s(873, -11), s(369, -8), s(6, -6), s(3361, -12), s(-126, -9), s(202, -11), ],
  [s(1949, -1), s(-42, -7), s(272, 5), s(653, 8), s(0, 8), s(6394, -8), s(-131, -4), s(165, -1), ],
  [s(1064, 9), s(-8, -3), s(-458, 1), s(640, 6), s(8, 3), s(1914, -12), s(-281, 4), s(180, -10), ],
  [s(679, 3), s(-71, 10), s(68, -11), s(-1498, -7), s(-1, -1), s(934, -6), s(-160, -9), s(243, 0), ],
  [s(491, -6), s(-44, 7), s(1329, -9), s(510, -3), s(-7, 10), s(2305, 9), s(-164, -9), s(91, -3), ],
  [s(-29, 8), s(-93, -1), s(120, -10), s(427, -2), s(-10, -7), s(1125, 2), s(-259, -8), s(197, 3), ],
  [s(191, 6), s(-109, -3), s(598, 6), s(-1298, 9), s(5, 12), s(1188, -9), s(-176, 11), s(203, 0), ],
  [s(-128, 7), s(-88, -12), s(-833, 0), s(488, -4), s(0, -11), s(2236, 2), s(-126, 2), s(131, -11), ],
  [s(878, -3), s(-107, 3), s(579, 11), s(-418, 1), s(-8, -12), s(1700, 6), s(-136, 0), s(212, -9), ],
  [s(250, 0), s(-74, 7), s(463, 2), s(-570, -2), s(9, 0), s(2030, -10), s(-137, 2), s(51, -6), ],
  [s(179, -2), s(-69, 6), s(163, 6), s(-1743, -8), s(9, -2), s(2253, -8), s(-28, -7), s(53, -12), ],
  [s(-200, 0), s(-77, -6), s(634, 4), s(-844, 7), s(6, 2), s(1983, 9), s(-32, -8), s(130, -5), ],
  [s(1097, -1), s(-58, 0), s(498, 10), s(-1216, 7), s(7, 9), s(2811, -9), s(15, 4), s(46, -8), ],
  [s(663, 3), s(-39, -1), s(215, 10), s(364, -11), s(-6, 11), s(3724, 8), s(24, -4), s(-12, 11), ],
  [s(961, 0), s(-35, -5), s(786, -6), s(-218, -4), s(10, 3), s(4493, -6), s(-8, 6), s(67, 7), ],
  [s(1074, -7), s(-21, 8), s(555, -4), s(-784, 4), s(-8, -2), s(6034, -11), s(78, 8), s(46, 5), ],
  [s(578, 12), s(-35, -3), s(474, -8), s(-673, -4), s(0, -9), s(2588, -1), s(61, 12), s(4, -12), ],
  [s(1056, -8), s(-24, 0), s(237, 6), s(-670, -1), s(-8, 6), s(4247, 0), s(18, -12), s(61, -12), ],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(1228, -6), s(-414, 6), s(308, -9), s(-407, 11), s(-20, -5), s(1624, -1), s(-487, -10), s(630, 0), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(188, 10), s(405, -3), s(-141, -4), s(-1093, -5), s(-31, -6), s(3162, 5), s(-382, -11), s(248, -11), ];

pub const OUTPUT_BIAS: ScoreTuple = s(-9, 0);

pub const SAFETY_WEIGHT: ScoreTuple = s(-111, 0);

