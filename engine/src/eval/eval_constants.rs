#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(196, 255), s(248, 300), s(278, 335), s(312, 317), s(331, 331), s(255, 303), s(261, 295), s(229, 236), 
  s(266, 302), s(303, 313), s(329, 302), s(317, 316), s(334, 298), s(348, 297), s(299, 304), s(289, 278), 
  s(283, 300), s(326, 306), s(349, 329), s(347, 329), s(338, 326), s(374, 312), s(328, 295), s(309, 280), 
  s(314, 302), s(327, 320), s(344, 342), s(378, 339), s(353, 339), s(372, 334), s(331, 318), s(342, 293), 
  s(307, 312), s(325, 314), s(337, 342), s(352, 338), s(351, 341), s(349, 331), s(347, 313), s(320, 307), 
  s(296, 295), s(309, 310), s(326, 319), s(327, 332), s(347, 329), s(333, 309), s(330, 303), s(302, 304), 
  s(276, 280), s(284, 294), s(297, 303), s(320, 300), s(320, 301), s(317, 300), s(306, 284), s(303, 288), 
  s(237, 264), s(272, 276), s(271, 283), s(283, 292), s(291, 287), s(297, 279), s(272, 287), s(277, 273), 
]),
// Bishop PST
Pst::new([
  s(306, 351), s(293, 345), s(257, 350), s(242, 355), s(266, 351), s(260, 348), s(303, 347), s(296, 332), 
  s(314, 316), s(322, 329), s(323, 323), s(288, 328), s(310, 322), s(327, 329), s(299, 335), s(294, 317), 
  s(324, 329), s(349, 318), s(340, 328), s(345, 317), s(331, 323), s(360, 331), s(335, 330), s(342, 322), 
  s(314, 322), s(336, 326), s(342, 330), s(372, 339), s(349, 339), s(361, 331), s(328, 327), s(327, 320), 
  s(321, 312), s(331, 325), s(338, 335), s(358, 336), s(356, 334), s(330, 333), s(323, 325), s(330, 304), 
  s(322, 313), s(344, 320), s(348, 327), s(340, 331), s(342, 334), s(344, 327), s(339, 318), s(336, 304), 
  s(338, 310), s(339, 303), s(347, 304), s(331, 315), s(335, 317), s(351, 311), s(356, 308), s(337, 296), 
  s(310, 296), s(338, 314), s(313, 314), s(309, 307), s(318, 305), s(312, 320), s(326, 300), s(339, 283), 
]),
// Rook PST
Pst::new([
  s(540, 599), s(552, 597), s(533, 611), s(549, 602), s(562, 595), s(537, 599), s(549, 598), s(569, 588), 
  s(525, 581), s(536, 583), s(549, 587), s(563, 577), s(555, 572), s(570, 574), s(562, 570), s(561, 570), 
  s(506, 577), s(531, 577), s(529, 575), s(536, 574), s(559, 566), s(555, 561), s(584, 563), s(539, 562), 
  s(485, 580), s(515, 569), s(515, 582), s(524, 573), s(532, 564), s(534, 561), s(528, 562), s(504, 566), 
  s(474, 566), s(484, 569), s(498, 570), s(513, 564), s(517, 562), s(494, 563), s(518, 558), s(487, 557), 
  s(475, 557), s(483, 559), s(497, 550), s(498, 555), s(507, 552), s(511, 544), s(526, 534), s(496, 536), 
  s(462, 551), s(482, 551), s(495, 551), s(500, 549), s(505, 541), s(508, 540), s(534, 526), s(458, 547), 
  s(478, 553), s(482, 550), s(489, 550), s(499, 544), s(503, 539), s(496, 548), s(483, 547), s(481, 535), 
]),
// Queen PST
Pst::new([
  s(949, 1036), s(978, 1034), s(1001, 1040), s(1011, 1040), s(1010, 1041), s(1002, 1031), s(1017, 1017), s(1004, 1028), 
  s(929, 970), s(909, 991), s(939, 989), s(933, 1003), s(925, 1009), s(948, 974), s(967, 966), s(991, 974), 
  s(925, 969), s(916, 982), s(933, 993), s(934, 999), s(938, 984), s(958, 963), s(955, 946), s(948, 959), 
  s(915, 981), s(914, 988), s(924, 985), s(926, 994), s(943, 980), s(952, 956), s(950, 964), s(944, 950), 
  s(914, 964), s(911, 984), s(918, 987), s(923, 1005), s(934, 989), s(928, 955), s(942, 937), s(935, 944), 
  s(910, 958), s(923, 966), s(923, 982), s(923, 983), s(926, 986), s(942, 941), s(948, 934), s(934, 933), 
  s(914, 941), s(917, 951), s(928, 946), s(935, 946), s(933, 949), s(948, 913), s(945, 915), s(939, 893), 
  s(902, 944), s(902, 943), s(908, 937), s(917, 935), s(915, 947), s(906, 931), s(917, 909), s(903, 924), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(166, 184), s(169, 179), s(162, 181), s(170, 171), s(144, 180), s(166, 176), s(144, 192), s(150, 190), 
  s(88, 155), s(81, 159), s(112, 149), s(114, 141), s(107, 136), s(145, 138), s(119, 158), s(96, 154), 
  s(68, 133), s(74, 117), s(85, 111), s(89, 96), s(108, 96), s(87, 105), s(88, 107), s(77, 113), 
  s(64, 108), s(63, 105), s(81, 99), s(94, 93), s(97, 90), s(85, 93), s(77, 88), s(69, 92), 
  s(67, 107), s(76, 100), s(85, 101), s(89, 106), s(99, 107), s(91, 100), s(102, 87), s(80, 93), 
  s(63, 116), s(70, 107), s(71, 114), s(75, 121), s(80, 129), s(93, 107), s(101, 94), s(72, 102), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-18, -58), s(-8, -12), s(14, -2), s(-9, 20), s(2, 5), s(-2, 16), s(9, 17), s(6, -45), 
  s(-6, 5), s(6, 37), s(-28, 47), s(37, 48), s(10, 51), s(12, 69), s(22, 55), s(-6, 27), 
  s(-28, 22), s(25, 37), s(-3, 55), s(-8, 63), s(21, 68), s(59, 74), s(54, 62), s(7, 31), 
  s(-5, 8), s(5, 34), s(-18, 49), s(-46, 56), s(-47, 62), s(-27, 60), s(-33, 53), s(-69, 27), 
  s(-23, -12), s(-29, 15), s(-59, 39), s(-80, 49), s(-82, 52), s(-71, 44), s(-83, 34), s(-93, 14), 
  s(8, -22), s(0, 0), s(-43, 17), s(-43, 26), s(-44, 27), s(-57, 27), s(-31, 12), s(-40, -5), 
  s(54, -35), s(9, -12), s(-4, -4), s(-30, 2), s(-31, 9), s(-22, 5), s(13, -8), s(21, -30), 
  s(26, -72), s(37, -52), s(21, -39), s(-51, -25), s(4, -39), s(-35, -19), s(19, -41), s(28, -75), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(66, 84), s(69, 79), s(62, 81), s(70, 71), s(44, 80), s(66, 76), s(44, 92), s(50, 90), 
  s(62, 91), s(63, 90), s(45, 72), s(45, 58), s(53, 70), s(34, 74), s(4, 80), s(-15, 93), 
  s(22, 56), s(20, 62), s(23, 53), s(18, 57), s(1, 57), s(21, 52), s(-18, 74), s(-13, 70), 
  s(7, 28), s(5, 37), s(-13, 37), s(-1, 33), s(-17, 35), s(0, 32), s(10, 50), s(-1, 45), 
  s(3, 3), s(-8, 27), s(-28, 26), s(-15, 15), s(-14, 12), s(0, 14), s(-1, 38), s(19, 19), 
  s(-3, 11), s(-2, 21), s(-12, 14), s(-5, 1), s(5, -5), s(-6, 12), s(4, 22), s(0, 18), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-55, -104),
  s(-23, -74),
  s(-5, -46),
  s(-10, -26),
  s(-4, -9),
  s(-9, -7),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(15, 33),
  s(-11, -11),
  s(-1, -25),
  s(-14, -14),
  s(-24, -18),
  s(-14, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(57, 112),
  s(96, 111),
  s(51, 42),
  s(20, 15),
  s(-5, -5),
  s(4, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(40, 56);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(27, 9), s(28, 21), s(26, 23), s(27, 21), s(26, 24), s(26, 18), s(25, 12), s(28, -4), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(17, 4), s(24, 19), s(27, 25), s(30, 33), s(31, 38), s(32, 40), s(31, 40), s(27, 42), s(30, 37), s(32, 31), s(41, 28), s(2, 50), s(19, 19), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(7, 33), s(10, 43), s(10, 61), s(9, 70), s(12, 76), s(13, 80), s(14, 86), s(19, 86), s(20, 90), s(21, 93), s(24, 97), s(28, 99), s(32, 96), s(22, 96), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(43, 0), s(41, 4), s(42, 36), s(44, 59), s(44, 76), s(46, 83), s(46, 107), s(47, 115), s(47, 119), s(49, 124), s(49, 134), s(50, 131), s(53, 133), s(52, 136), s(57, 136), s(55, 138), s(65, 131), s(70, 129), s(86, 116), s(91, 114), s(104, 104), s(92, 94), s(86, 90), s(82, 86), s(71, 78), s(33, 46), s(20, 33), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(16, 23), s(27, 33), s(38, 38), s(48, 41), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 18), s(11, 24), s(16, 28), s(20, 32), s(20, 34), s(25, 33), s(30, 39), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(3, 21), s(7, 23), s(14, 28), s(20, 35), s(24, 39), s(29, 40), s(32, 45), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(4, 99), s(7, 107), s(7, 113), s(10, 115), s(12, 119), s(14, 117), s(16, 117), s(19, 118), s(22, 120), s(26, 113), s(26, 113), s(49, 89), s(45, 99), s(61, 82), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 23);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(76, 49);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(103, 13);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(93, -5);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 31);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(79, 12);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(65, -49);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 27);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(70, 24);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(87, 33);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(87, 0);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-17, 70);

pub const TEMPO_BONUS: ScoreTuple = s(35, 18);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(1516, 336), s(746, -540), s(226, -186), s(-478, -642), s(-203, -221), s(-736, -482), s(-193, -591), s(232, -124), ],
  [s(1180, 275), s(752, -492), s(-48, -34), s(-451, -796), s(-473, -189), s(-826, -528), s(-359, -261), s(-164, -396), ],
  [s(1040, 64), s(194, -527), s(111, -692), s(-543, -661), s(-473, -252), s(51, -542), s(-471, -289), s(-329, -399), ],
  [s(1054, -56), s(78, -567), s(-264, -439), s(-554, -705), s(-537, 1850), s(365, -560), s(-517, 1599), s(-245, -166), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-688, -878), s(-134, -645), s(-408, -397), s(-696, -635), s(-858, -24), s(173, -508), s(-602, -112), s(-969, -212), ],
  [s(-697, -654), s(-162, -877), s(-645, -249), s(-896, -525), s(-839, 85), s(254, -533), s(-650, -115), s(-1443, 24), ],
  [s(-322, -815), s(-242, -722), s(-382, -555), s(-775, -684), s(-934, 63), s(106, -580), s(-659, -50), s(-999, -205), ],
  [s(-155, -657), s(-209, -763), s(-304, -446), s(-767, -600), s(-921, 30), s(32, -672), s(-483, 392), s(-733, -34), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(-9, 5), s(-1, -11), s(5, 9), s(-8, 2), s(5, -7), s(-8, -3), s(-10, -9), s(11, -2), ],
  [s(-12, 2), s(6, 6), s(9, 5), s(-5, -2), s(-4, -2), s(2, 0), s(-8, 6), s(8, 5), ],
  [s(4, 3), s(-4, -1), s(-2, 5), s(1, 6), s(8, 12), s(-5, -9), s(-1, -4), s(9, 0), ],
  [s(10, 7), s(3, 12), s(10, -7), s(-11, 0), s(4, 4), s(-7, -9), s(-2, -8), s(-12, 7), ],
  [s(3, 7), s(-12, -6), s(10, -10), s(7, 0), s(5, -9), s(2, -5), s(6, 0), s(1, 3), ],
  [s(-5, -4), s(-6, -7), s(-8, -8), s(8, 11), s(-3, -6), s(5, -9), s(0, 8), s(9, 6), ],
  [s(11, 6), s(-2, 8), s(10, -8), s(2, -3), s(-3, 0), s(1, 1), s(-2, 9), s(-8, -1), ],
  [s(-2, 0), s(7, 1), s(-6, 4), s(3, 3), s(-7, -9), s(10, 10), s(12, 2), s(10, -6), ],
]);

pub const TROPISM: [ScoreTuple; 8] = 
  [s(3, -3), s(5, -8), s(7, 10), s(-8, -9), s(-4, -4), s(-5, 2), s(-9, 12), s(4, -9), ];

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(28, -1048), s(3763, -238), s(1069, 2), s(-67, 52), s(-73, -4325), s(893, -44), s(-15, -978), s(658, -15), ],
  [s(988, -840), s(1896, -180), s(-90, 18), s(-116, 18), s(-104, -4421), s(3118, -40), s(-22, 3473), s(185, -5), ],
  [s(-1492, -1057), s(3765, -178), s(-792, 23), s(-61, 19), s(-64, -2938), s(5662, -28), s(-18, 420), s(-81, -1), ],
  [s(2476, -560), s(200, -372), s(1153, 61), s(-173, -32), s(-102, -3544), s(-1507, -157), s(-37, -1039), s(726, -24), ],
  [s(1787, 212), s(466, -370), s(1192, 0), s(-222, 28), s(-168, -3388), s(-4984, -117), s(-65, -1248), s(755, -22), ],
  [s(1693, -789), s(1686, -369), s(191, 30), s(-159, 54), s(-157, -2596), s(-3322, -138), s(-30, -1389), s(720, -24), ],
  [s(1915, 1020), s(-639, -432), s(364, -128), s(-266, -257), s(-98, -1409), s(-372, -191), s(9, 348), s(-290, -28), ],
  [s(786, 1055), s(1087, -447), s(56, -89), s(-309, -327), s(-240, -885), s(-190, -242), s(-83, 41), s(-323, -38), ],
  [s(1425, 1272), s(183, -453), s(-257, -86), s(-291, -264), s(-247, -1145), s(-426, -226), s(-100, 42), s(-520, -45), ],
  [s(691, 344), s(538, -575), s(-77, -277), s(-494, -473), s(-419, -213), s(-388, -335), s(-89, 699), s(-335, -40), ],
  [s(-594, 311), s(850, -583), s(-468, -281), s(-515, -459), s(-569, -104), s(306, -324), s(-300, 505), s(-691, -40), ],
  [s(193, 587), s(420, -552), s(350, -242), s(-488, -448), s(-548, -205), s(-567, -334), s(-220, 758), s(-941, -46), ],
  [s(-41, -815), s(970, -597), s(-257, -297), s(-585, -471), s(-660, 362), s(68, -328), s(-411, 197), s(-709, -39), ],
  [s(-1369, 71), s(742, -611), s(-929, -239), s(-638, -530), s(-728, 304), s(849, -425), s(-382, -80), s(-1030, -54), ],
  [s(-484, -887), s(644, -634), s(-865, -325), s(-625, -534), s(-745, 268), s(-66, -442), s(-431, 452), s(-1291, -45), ],
  [s(-369, -1132), s(465, -590), s(-1436, -274), s(-634, -590), s(-786, 454), s(285, -462), s(-461, -106), s(-1251, -95), ],
  [s(-949, -860), s(603, -604), s(-1043, -253), s(-603, -593), s(-792, 342), s(764, -476), s(-443, -17), s(-1090, -87), ],
  [s(-652, -1016), s(-21, -636), s(-1370, -299), s(-659, -571), s(-790, 238), s(467, -456), s(-455, 606), s(-1081, -85), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-891, -680), s(1247, -701), s(-1639, -338), s(-756, -542), s(-796, 269), s(1439, -448), s(-534, 1430), s(-1396, -91), ],
  [s(-2029, -398), s(1567, -684), s(-1527, -405), s(-689, -523), s(-712, 575), s(2010, -419), s(-451, 1028), s(-1446, -66), ],
  [s(-1652, -395), s(579, -596), s(-1307, -264), s(-646, -597), s(-797, 826), s(1412, -464), s(-436, -305), s(-943, -113), ],
  [s(-609, 645), s(466, -520), s(-373, -106), s(-400, -470), s(-280, -5), s(910, -395), s(-97, 0), s(-442, -94), ],
  [s(-642, -846), s(871, -622), s(-874, -248), s(-643, -570), s(-646, 132), s(1923, -437), s(-417, 499), s(-898, -93), ],
  [s(-674, -306), s(1357, -565), s(-1218, -348), s(-553, -570), s(-711, 309), s(657, -460), s(-381, 349), s(-937, -101), ],
  [s(-440, -329), s(757, -506), s(-860, -85), s(-433, -449), s(-340, -335), s(348, -398), s(-214, -670), s(-566, -40), ],
  [s(-785, -262), s(939, -505), s(-969, -139), s(-434, -442), s(-310, -249), s(930, -365), s(-200, -631), s(-447, -67), ],
  [s(-344, -1049), s(1140, -544), s(-508, -211), s(-480, -477), s(-462, -195), s(329, -360), s(-221, -16), s(-471, -73), ],
  [s(9, -624), s(732, -170), s(-297, -174), s(-307, -394), s(-351, -898), s(334, -223), s(-190, -1596), s(-483, 5), ],
  [s(-393, -777), s(2276, -195), s(-306, -176), s(-318, -364), s(-345, -790), s(-983, -206), s(-122, -1059), s(-899, 17), ],
  [s(195, -726), s(1105, -115), s(242, -209), s(-279, -365), s(-322, -765), s(-286, -160), s(-107, -531), s(1178, 58), ],
  [s(-218, 406), s(-3575, 218), s(-1771, -167), s(14, -337), s(-51, -1898), s(1139, 37), s(-11, -1120), s(-1337, 61), ],
  [s(-1764, 563), s(-5225, 314), s(-1894, -148), s(48, -300), s(-1, -1540), s(2306, 32), s(-9, -1749), s(-1314, 38), ],
  [s(-458, 805), s(-623, 263), s(-1564, -173), s(18, -296), s(-42, -1835), s(686, 54), s(-10, -80), s(-1343, 1), ],
  [s(-1357, 1097), s(-464, 365), s(-1922, -68), s(99, -153), s(96, -1874), s(4456, 88), s(21, -964), s(-1294, 3), ],
  [s(-2303, 559), s(-4679, 158), s(-1770, -54), s(61, -152), s(58, -1979), s(2821, 76), s(14, -574), s(-1167, 12), ],
  [s(-3112, 571), s(-3182, 271), s(-1781, -67), s(74, -150), s(76, -2551), s(1564, 71), s(22, -2741), s(-1228, 25), ],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(1545, -2036), s(1455, -724), s(-1236, -443), s(-744, -644), s(-914, 3686), s(-580, -640), s(-732, -2544), s(-720, -266), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(443, 220), s(-195, 618), s(-49, -688), s(476, -528), s(354, 351), s(-239, 522), s(98, -479), s(-195, 548), ];

pub const OUTPUT_BIAS: ScoreTuple = s(0, 0);

/*
fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
desc: startpos
output: S(-155.9094032418189, 136.52510051282923) - S(-155.9094032418189, 136.52510051282923)
= S(0, 0)

fen: r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1
desc: kiwipete
output: S(-79.0833442072707, 58.57910927725007) - S(-107.37931833755343, 98.10941379548393)
= S(28.29597413028273, -39.53030451823386)

fen: r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7
desc: fried liver attack
output: S(-83.14888141614432, 150.796845051856) - S(-83.1708576142997, 98.95898990364142)
= S(0.021976198155385873, 51.83785514821457)

fen: 1r2r1k1/pbp1qpp1/1p1p4/4nPR1/4P3/P1N4P/1PPQB3/1K1R4 w - - 1 24
desc: wahoo vs akimbo
output: S(-21.01567433083305, 34.679194847840414) - S(-139.25496164089762, 128.38842710992847)
= S(118.23928731006457, -93.70923226208805)

fen: 2kr3r/ppp1qppp/2b2n2/4p3/4P3/P1P2Q2/P1B2PPP/R1B2RK1 w - - 7 14
output: S(-109.8125891527194, 94.91731768097836) - S(-147.09430441914952, 114.43322504111164)
= S(37.281715266430126, -19.515907360133284)

fen: rnbq1b1r/ppPknQ1p/3pp3/1B6/5pp1/BP2P3/P1PK1PPP/RN4NR b - - 4 11
output: S(-89.73631575135241, 51.76558660466486) - S(-165.084834702585, 65.07690287841156)
= S(75.34851895123259, -13.311316273746698)

fen: 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1
output: S(-14.150699665879364, 64.41144198753653) - S(9.320983173963882, 59.085950944654854)
= S(-23.471682839843247, 5.32549104288168)

fen: 8/3kp1p1/8/1p6/4PP2/5K2/1P6/8 w - - 0 1
output: S(-30.835246380781403, 92.32925757902555) - S(-64.087859301942, 81.35443438909519)
= S(33.252612921160605, 10.974823189930362)

fen: 2k1n3/3bp1p1/8/1p6/4PP2/5K2/1P2R3/8 w - - 0 1
output: S(-36.37277103782499, 82.35955787261477) - S(-1.2773100065247576, 72.55500710934454)
= S(-35.09546103130023, 9.804550763270228)

fen: 8/8/3bk2p/1r2p1pP/p1p3P1/P1B1K3/1PP5/5R2 b - - 25 52
output: S(94.36829051575361, 51.12610880351114) - S(-24.785916903382002, 80.46912639997021)
= S(119.15420741913562, -29.34301759645907)

*/
