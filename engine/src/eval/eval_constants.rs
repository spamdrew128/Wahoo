#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(209, 252), s(255, 296), s(283, 329), s(317, 314), s(342, 328), s(271, 297), s(272, 292), s(239, 239), 
  s(263, 302), s(297, 311), s(326, 298), s(327, 312), s(344, 295), s(361, 291), s(310, 301), s(323, 271), 
  s(281, 298), s(314, 301), s(337, 323), s(350, 323), s(363, 320), s(385, 307), s(360, 287), s(354, 272), 
  s(306, 300), s(320, 314), s(334, 337), s(372, 337), s(355, 337), s(370, 332), s(339, 318), s(356, 291), 
  s(301, 309), s(315, 312), s(329, 336), s(352, 334), s(351, 339), s(347, 330), s(354, 312), s(322, 309), 
  s(290, 292), s(301, 305), s(320, 312), s(322, 331), s(346, 329), s(332, 306), s(334, 302), s(302, 304), 
  s(268, 278), s(278, 290), s(289, 298), s(315, 297), s(316, 298), s(315, 297), s(295, 284), s(294, 290), 
  s(229, 260), s(262, 269), s(260, 280), s(276, 288), s(281, 285), s(287, 276), s(267, 277), s(264, 273), 
]),
// Bishop PST
Pst::new([
  s(306, 344), s(298, 338), s(270, 340), s(259, 344), s(281, 341), s(270, 338), s(305, 339), s(302, 325), 
  s(313, 310), s(318, 321), s(320, 316), s(289, 321), s(325, 314), s(337, 321), s(325, 324), s(306, 310), 
  s(318, 322), s(340, 313), s(328, 321), s(340, 312), s(349, 315), s(369, 325), s(367, 320), s(361, 317), 
  s(305, 315), s(327, 318), s(334, 323), s(364, 332), s(348, 332), s(357, 325), s(327, 324), s(331, 316), 
  s(309, 304), s(320, 318), s(333, 327), s(352, 328), s(355, 326), s(323, 326), s(323, 319), s(327, 300), 
  s(314, 306), s(335, 313), s(340, 320), s(335, 325), s(338, 327), s(339, 319), s(330, 312), s(334, 299), 
  s(329, 303), s(331, 296), s(335, 300), s(322, 310), s(329, 310), s(340, 303), s(349, 300), s(324, 290), 
  s(299, 292), s(329, 309), s(304, 308), s(297, 302), s(303, 299), s(299, 312), s(319, 292), s(323, 281), 
]),
// Rook PST
Pst::new([
  s(529, 583), s(540, 582), s(528, 593), s(544, 584), s(557, 578), s(538, 580), s(535, 581), s(556, 572), 
  s(515, 562), s(529, 564), s(539, 568), s(556, 557), s(546, 554), s(569, 553), s(558, 549), s(559, 548), 
  s(496, 560), s(522, 560), s(523, 558), s(527, 557), s(557, 547), s(564, 541), s(587, 542), s(558, 535), 
  s(476, 560), s(505, 551), s(505, 564), s(514, 555), s(526, 545), s(533, 545), s(538, 539), s(517, 540), 
  s(465, 546), s(474, 550), s(489, 552), s(501, 548), s(507, 546), s(490, 548), s(518, 537), s(489, 535), 
  s(464, 538), s(470, 542), s(483, 533), s(485, 539), s(496, 534), s(503, 527), s(524, 513), s(491, 514), 
  s(453, 531), s(469, 533), s(480, 534), s(484, 532), s(493, 522), s(500, 521), s(519, 509), s(450, 527), 
  s(467, 533), s(470, 531), s(476, 532), s(487, 524), s(493, 517), s(487, 530), s(482, 527), s(470, 517), 
]),
// Queen PST
Pst::new([
  s(951, 1012), s(977, 1015), s(998, 1022), s(1007, 1023), s(1009, 1023), s(1003, 1017), s(1004, 1005), s(1002, 1014), 
  s(925, 963), s(903, 981), s(935, 983), s(936, 990), s(939, 995), s(964, 974), s(963, 966), s(986, 980), 
  s(924, 955), s(910, 972), s(931, 980), s(934, 994), s(957, 981), s(981, 974), s(988, 954), s(984, 969), 
  s(913, 960), s(910, 972), s(917, 975), s(920, 987), s(943, 980), s(950, 975), s(956, 980), s(948, 976), 
  s(912, 946), s(908, 973), s(915, 978), s(920, 994), s(928, 986), s(923, 979), s(937, 962), s(938, 967), 
  s(904, 944), s(920, 951), s(919, 966), s(919, 971), s(922, 981), s(934, 957), s(939, 955), s(933, 947), 
  s(909, 925), s(914, 929), s(924, 923), s(931, 931), s(929, 941), s(941, 909), s(939, 908), s(939, 891), 
  s(898, 925), s(898, 923), s(904, 918), s(913, 914), s(910, 924), s(898, 919), s(911, 904), s(892, 915), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(161, 174), s(163, 170), s(156, 173), s(162, 161), s(141, 167), s(156, 161), s(127, 178), s(117, 184), 
  s(91, 150), s(86, 154), s(115, 144), s(121, 137), s(120, 131), s(158, 122), s(147, 148), s(119, 144), 
  s(64, 128), s(70, 114), s(81, 110), s(91, 92), s(106, 97), s(104, 97), s(91, 106), s(86, 109), 
  s(63, 104), s(56, 105), s(78, 97), s(94, 91), s(97, 91), s(93, 91), s(78, 90), s(79, 89), 
  s(67, 104), s(71, 99), s(82, 100), s(88, 106), s(101, 106), s(98, 99), s(109, 88), s(89, 90), 
  s(65, 112), s(67, 105), s(72, 112), s(85, 112), s(88, 123), s(116, 103), s(116, 90), s(81, 93), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-12, -43), s(0, 0), s(14, 9), s(-1, 30), s(8, 14), s(12, 25), s(20, 31), s(7, -29), 
  s(-2, 12), s(15, 44), s(-21, 52), s(32, 53), s(17, 54), s(25, 68), s(31, 58), s(4, 31), 
  s(-24, 25), s(26, 43), s(4, 58), s(-2, 62), s(21, 67), s(55, 71), s(53, 63), s(13, 30), 
  s(-20, 15), s(-2, 40), s(-20, 51), s(-45, 57), s(-43, 59), s(-19, 56), s(-23, 51), s(-61, 27), 
  s(-31, -13), s(-29, 16), s(-67, 40), s(-90, 50), s(-87, 50), s(-69, 40), s(-80, 29), s(-86, 6), 
  s(-10, -23), s(0, -7), s(-63, 14), s(-86, 27), s(-87, 27), s(-78, 20), s(-41, 4), s(-59, -7), 
  s(52, -36), s(6, -15), s(-11, -5), s(-54, 6), s(-55, 10), s(-33, 2), s(20, -16), s(32, -34), 
  s(36, -69), s(66, -61), s(34, -43), s(-72, -20), s(-10, -36), s(-40, -21), s(41, -52), s(44, -79), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(61, 74), s(63, 70), s(56, 73), s(62, 61), s(41, 67), s(56, 61), s(27, 78), s(17, 84), 
  s(58, 80), s(59, 80), s(40, 64), s(36, 48), s(43, 56), s(45, 65), s(19, 68), s(16, 80), 
  s(27, 52), s(23, 59), s(23, 50), s(13, 55), s(3, 51), s(23, 49), s(-9, 68), s(0, 62), 
  s(7, 26), s(6, 34), s(-16, 35), s(-5, 32), s(-21, 33), s(1, 28), s(0, 47), s(2, 40), 
  s(2, 1), s(-8, 24), s(-28, 21), s(-16, 13), s(-15, 9), s(1, 6), s(-2, 31), s(30, 9), 
  s(-3, 8), s(0, 16), s(-11, 9), s(-7, 1), s(2, -8), s(7, -1), s(28, 8), s(6, 9), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-59, -97),
  s(-13, -81),
  s(-3, -47),
  s(-8, -26),
  s(-13, -7),
  s(-26, -2),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(19, 39),
  s(-11, -7),
  s(0, -23),
  s(-13, -12),
  s(-26, -17),
  s(-18, -14),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(46, 94),
  s(84, 98),
  s(51, 41),
  s(21, 14),
  s(-3, -5),
  s(4, -9),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(41, 53);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(21, -2), s(22, 9), s(21, 12), s(23, 12), s(22, 16), s(24, 12), s(26, 8), s(34, -5), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(16, -5), s(23, 9), s(26, 16), s(30, 25), s(31, 31), s(34, 34), s(34, 36), s(32, 38), s(39, 34), s(46, 27), s(59, 26), s(34, 43), s(46, 18), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(3, 15), s(5, 23), s(5, 42), s(5, 51), s(8, 56), s(8, 61), s(8, 69), s(15, 68), s(17, 71), s(19, 73), s(23, 76), s(28, 78), s(33, 77), s(24, 76), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(34, -10), s(31, -16), s(33, 2), s(34, 21), s(34, 38), s(35, 47), s(34, 75), s(34, 84), s(35, 88), s(38, 94), s(37, 106), s(39, 105), s(43, 109), s(42, 114), s(49, 115), s(50, 118), s(61, 113), s(70, 112), s(83, 107), s(90, 109), s(99, 104), s(90, 97), s(88, 95), s(83, 92), s(73, 84), s(38, 54), s(27, 42), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(20, 21), s(33, 32), s(43, 39), s(56, 43), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 17), s(16, 22), s(22, 26), s(28, 30), s(30, 34), s(37, 33), s(43, 40), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(3, 22), s(10, 24), s(18, 29), s(25, 36), s(30, 39), s(36, 41), s(39, 45), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(10, 71), s(13, 86), s(13, 97), s(18, 99), s(20, 104), s(21, 104), s(23, 106), s(27, 108), s(30, 112), s(35, 106), s(35, 109), s(59, 92), s(58, 98), s(64, 84), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(78, 20);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(74, 45);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(91, 19);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(90, -3);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(38, 28);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(75, 12);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(64, -40);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 26);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(64, 25);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(84, 37);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(82, -4);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-22, 69);

pub const TEMPO_BONUS: ScoreTuple = s(35, 16);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(455, 2734), s(156, -4159), s(-311, 262), s(-55, -1737), s(-62, 809), s(-390, -461), s(-413, 2155), s(-154, -1240), ],
  [s(679, 1736), s(122, -5514), s(-549, 795), s(103, -1348), s(-146, 399), s(-479, -48), s(-494, 3021), s(-222, -3413), ],
  [s(576, 2901), s(35, 1227), s(-651, -1235), s(-61, -1061), s(-86, 2537), s(-600, 1047), s(-642, -976), s(-455, -752), ],
  [s(500, 9232), s(-329, -3447), s(-644, -1664), s(129, -204), s(-88, 4167), s(-624, -815), s(-602, -3166), s(-496, -326), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(542, 4951), s(380, -711), s(-335, -1048), s(48, -1723), s(49, 605), s(-324, -1751), s(-408, -101), s(-157, 2490), ],
  [s(254, 1771), s(342, -3891), s(-472, -579), s(-188, -107), s(4, 1407), s(-380, -1340), s(-217, 1408), s(-217, 991), ],
  [s(488, 6555), s(60, -3353), s(-550, -65), s(-67, -1252), s(-62, 943), s(-548, -192), s(-671, 1792), s(-466, 1910), ],
  [s(592, 2935), s(272, 630), s(-525, -951), s(12, -971), s(-99, 919), s(-557, -1006), s(-498, 202), s(-286, 1252), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(420, -1646), s(201, 206), s(-353, -1436), s(106, 950), s(-76, 953), s(-309, 505), s(-398, -562), s(-203, -3477), ],
  [s(508, -845), s(-29, 5291), s(-351, -635), s(-133, -1111), s(13, -940), s(-287, 103), s(-418, 755), s(-195, -2791), ],
  [s(172, 448), s(-90, 1917), s(-7, -51), s(-107, -1697), s(-2, 622), s(13, 508), s(-238, 1765), s(-24, -2993), ],
  [s(-161, -29), s(324, -1512), s(65, 1388), s(-117, -1749), s(43, -21), s(119, 456), s(90, 2349), s(-35, 476), ],
  [s(-166, 1610), s(-141, -1770), s(36, 1359), s(68, -296), s(26, -760), s(105, -997), s(263, 1883), s(-2, 3040), ],
  [s(-129, 3057), s(-93, -3000), s(142, -536), s(20, -1924), s(65, -1022), s(187, -992), s(-33, 999), s(78, 3463), ],
  [s(-114, 3910), s(-15, 666), s(-91, -237), s(64, -1707), s(-91, -1398), s(54, -1701), s(155, -697), s(64, 4024), ],
  [s(-63, -968), s(81, 3063), s(132, -620), s(57, -137), s(-28, -956), s(77, -607), s(-80, -2232), s(86, 1722), ],
]);

pub const TROPISM: [ScoreTuple; 8] = 
  [s(714, 7480), s(-958, 187), s(-577, -425), s(604, -146), s(58, 1246), s(-366, -1839), s(-608, -102), s(-438, 93), ];

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(322, 211), s(118, -1615), s(-339, -1095), s(-99, 124), s(-42, 2763), s(-89, 101), s(-313, -72), s(-71, -1681), ],
  [s(275, 1629), s(-19, 553), s(-247, -857), s(-25, -927), s(94, 1037), s(-202, -59), s(-214, -109), s(-192, 1492), ],
  [s(93, -1208), s(116, 2577), s(-192, -1165), s(22, -168), s(23, -299), s(-263, 512), s(-330, 630), s(21, 287), ],
  [s(173, 964), s(2, 3724), s(-207, -1635), s(-51, 142), s(-59, -1714), s(-37, -672), s(-89, -1319), s(63, 1207), ],
  [s(128, -3241), s(-8, 6947), s(-189, -509), s(-28, -1227), s(54, -2077), s(-116, 800), s(-163, 2243), s(-102, -1733), ],
  [s(209, 156), s(178, 2532), s(-220, -1484), s(98, -957), s(-128, -503), s(-175, -50), s(-225, 126), s(41, 310), ],
  [s(-20, -1604), s(22, -2502), s(-69, 685), s(-109, -1135), s(-22, 780), s(-77, 1275), s(-11, 2345), s(-39, -3754), ],
  [s(74, -2853), s(-69, 5360), s(-164, -666), s(52, -966), s(-40, -2240), s(-113, 295), s(-184, 2046), s(-163, -5063), ],
  [s(200, -2276), s(87, 467), s(-189, 206), s(-58, -1276), s(63, -911), s(-214, 1831), s(-186, 1852), s(-92, -1581), ],
  [s(190, 2014), s(-4, -329), s(-53, 67), s(-53, -1358), s(-106, 733), s(-108, -741), s(-108, 1805), s(-60, -857), ],
  [s(20, -2164), s(-105, -652), s(-208, 598), s(98, -1614), s(59, -2120), s(-170, 884), s(-20, 2246), s(-82, -2965), ],
  [s(133, -1142), s(195, 3981), s(-87, 396), s(-129, -1246), s(-20, -1779), s(-117, 1882), s(-42, 2302), s(-7, -2337), ],
  [s(149, -242), s(95, -1337), s(-155, -1416), s(-90, 817), s(125, -404), s(16, 1176), s(-68, 658), s(-87, -262), ],
  [s(338, -695), s(-3, 2212), s(-256, -1242), s(-116, -1002), s(-123, -450), s(-147, -118), s(-137, 1436), s(-49, -236), ],
  [s(246, -1472), s(177, -1851), s(-48, -938), s(119, -1162), s(-48, 421), s(-37, -410), s(-156, 1518), s(29, -1652), ],
  [s(327, 786), s(67, -1154), s(-166, -527), s(14, -226), s(-117, 2867), s(-230, -210), s(-179, -535), s(-151, -1099), ],
  [s(295, 3729), s(184, -3363), s(-162, -827), s(38, -1041), s(65, 1971), s(-159, -821), s(-200, 620), s(0, 422), ],
  [s(204, 203), s(215, 446), s(-69, -950), s(-133, -994), s(-17, 379), s(-30, -141), s(-145, 1848), s(-47, -285), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-8, -2731), s(206, 3970), s(-95, 2158), s(17, -1317), s(12, -4028), s(-62, -1016), s(-1, 3485), s(100, -3492), ],
  [s(63, -2747), s(0, 7873), s(-24, 863), s(-50, -1060), s(125, -3551), s(67, 959), s(-192, 3016), s(22, -3138), ],
  [s(279, -2080), s(256, 368), s(-247, -221), s(105, -1303), s(-88, 227), s(-227, 472), s(-300, 2709), s(-129, -4129), ],
  [s(53, 72), s(-120, 1401), s(-4, 1796), s(58, -1901), s(88, -1087), s(-78, -228), s(34, 3491), s(-81, -3866), ],
  [s(206, -1933), s(-56, 3628), s(0, 879), s(-77, -1474), s(92, -1491), s(22, -886), s(-59, 3619), s(-104, -4475), ],
  [s(191, -518), s(-20, 3151), s(-120, 473), s(-104, -1619), s(105, -280), s(-10, 386), s(-145, 3120), s(2, -4532), ],
  [s(111, -263), s(294, -626), s(-292, 1050), s(31, -1890), s(-48, -235), s(-218, 1465), s(-129, 3324), s(-132, -5921), ],
  [s(135, -2497), s(115, 1189), s(-67, -372), s(5, -1472), s(128, -227), s(-116, 515), s(-190, 3085), s(-62, -3974), ],
  [s(103, 377), s(130, 2061), s(-164, 1597), s(0, -1592), s(135, -415), s(13, -680), s(-66, 3036), s(-52, -3786), ],
  [s(241, -955), s(96, -281), s(-106, 1704), s(-13, -1962), s(-12, -21), s(-46, -1372), s(-44, 4043), s(66, -4006), ],
  [s(161, -1168), s(44, -1096), s(-182, -504), s(-18, -1589), s(25, 763), s(-66, 2027), s(-244, 2495), s(8, -3791), ],
  [s(175, -736), s(-87, -695), s(-215, 1557), s(-86, -1534), s(21, 367), s(-170, 1573), s(-153, 3119), s(-134, -6134), ],
  [s(169, 1055), s(64, 745), s(-1, 2443), s(41, -1975), s(-42, -179), s(-16, -568), s(-49, 3261), s(0, -3209), ],
  [s(129, -538), s(0, 3861), s(-116, 1742), s(69, -1607), s(-43, -2161), s(-175, -603), s(-120, 3645), s(-68, -3303), ],
  [s(185, -2377), s(94, 5422), s(-141, -518), s(-120, -1212), s(110, -2924), s(-102, -745), s(-85, 2417), s(-27, -2269), ],
  [s(164, -4420), s(172, 6271), s(-193, -586), s(40, -1007), s(8, -2650), s(-152, -249), s(-142, 3286), s(-12, -3472), ],
  [s(-15, -4427), s(-8, 6321), s(-9, -1104), s(101, -642), s(-71, -3313), s(21, 107), s(29, 1786), s(-72, -2323), ],
  [s(152, -1155), s(83, 3349), s(-276, -294), s(-72, -1012), s(-86, -885), s(-269, -142), s(-268, 1552), s(-177, -1324), ],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(556, 548), s(173, -417), s(-543, -578), s(-117, -1612), s(-3, -256), s(-550, -2395), s(-582, 2080), s(-155, 1728), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(-632, -1153), s(232, 679), s(-464, 316), s(-25, 278), s(176, -646), s(-513, 78), s(-464, 2183), s(-301, -2396), ];

pub const OUTPUT_BIAS: ScoreTuple = s(-5, 4);

pub const SAFETY_WEIGHT: ScoreTuple = s(-7, -43);

