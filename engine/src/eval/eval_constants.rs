#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(248, 292), s(332, 327), s(321, 388), s(383, 353), s(478, 342), s(294, 353), s(347, 307), s(315, 251), 
  s(331, 335), s(371, 362), s(464, 325), s(412, 358), s(432, 335), s(448, 326), s(420, 331), s(374, 301), 
  s(351, 333), s(440, 340), s(450, 370), s(459, 362), s(440, 360), s(535, 337), s(446, 324), s(407, 305), 
  s(418, 339), s(441, 362), s(439, 390), s(487, 382), s(453, 384), s(490, 370), s(439, 359), s(448, 320), 
  s(407, 349), s(432, 351), s(444, 384), s(455, 384), s(455, 382), s(451, 377), s(466, 353), s(418, 343), 
  s(405, 330), s(410, 361), s(434, 358), s(435, 371), s(449, 374), s(439, 348), s(439, 334), s(403, 337), 
  s(386, 302), s(385, 327), s(404, 338), s(426, 339), s(423, 342), s(424, 331), s(417, 307), s(404, 306), 
  s(298, 293), s(381, 308), s(376, 312), s(387, 329), s(398, 320), s(391, 314), s(380, 317), s(392, 262), 
]),
// Bishop PST
Pst::new([
  s(413, 399), s(397, 392), s(308, 409), s(266, 413), s(332, 405), s(328, 402), s(408, 394), s(406, 388), 
  s(405, 391), s(421, 396), s(404, 386), s(381, 384), s(417, 382), s(452, 382), s(404, 395), s(373, 383), 
  s(430, 385), s(466, 379), s(466, 383), s(457, 373), s(467, 371), s(498, 377), s(459, 384), s(465, 371), 
  s(423, 383), s(448, 386), s(449, 399), s(497, 395), s(461, 401), s(478, 388), s(444, 379), s(436, 386), 
  s(433, 374), s(446, 386), s(453, 396), s(470, 401), s(471, 390), s(442, 393), s(436, 378), s(428, 370), 
  s(438, 370), s(457, 382), s(457, 394), s(453, 391), s(452, 398), s(462, 384), s(443, 380), s(433, 370), 
  s(454, 353), s(456, 357), s(455, 364), s(441, 375), s(443, 375), s(460, 368), s(467, 355), s(439, 348), 
  s(416, 356), s(442, 371), s(424, 373), s(419, 372), s(435, 368), s(413, 381), s(430, 361), s(422, 350), 
]),
// Rook PST
Pst::new([
  s(663, 704), s(689, 694), s(638, 717), s(690, 698), s(680, 700), s(624, 712), s(663, 698), s(688, 692), 
  s(626, 710), s(632, 712), s(658, 707), s(678, 699), s(690, 681), s(670, 693), s(634, 705), s(634, 703), 
  s(599, 700), s(633, 698), s(630, 701), s(647, 693), s(654, 682), s(651, 678), s(693, 673), s(635, 676), 
  s(572, 702), s(621, 687), s(611, 703), s(628, 688), s(629, 682), s(620, 688), s(625, 676), s(598, 686), 
  s(563, 693), s(577, 695), s(592, 694), s(605, 687), s(632, 669), s(591, 678), s(624, 666), s(573, 678), 
  s(566, 675), s(581, 683), s(593, 673), s(602, 668), s(600, 673), s(612, 657), s(609, 662), s(574, 658), 
  s(551, 679), s(583, 669), s(587, 672), s(600, 672), s(609, 661), s(598, 659), s(604, 654), s(521, 675), 
  s(574, 672), s(580, 672), s(586, 670), s(594, 663), s(595, 658), s(584, 661), s(557, 671), s(571, 651), 
]),
// Queen PST
Pst::new([
  s(1094, 1237), s(1105, 1259), s(1091, 1290), s(1111, 1284), s(1190, 1238), s(1141, 1273), s(1206, 1212), s(1174, 1255), 
  s(1115, 1123), s(1087, 1173), s(1111, 1195), s(1092, 1227), s(1019, 1285), s(1121, 1184), s(1151, 1163), s(1200, 1124), 
  s(1134, 1109), s(1123, 1133), s(1142, 1132), s(1110, 1196), s(1155, 1174), s(1158, 1159), s(1156, 1112), s(1139, 1153), 
  s(1101, 1147), s(1125, 1137), s(1100, 1153), s(1103, 1179), s(1120, 1167), s(1137, 1148), s(1132, 1169), s(1137, 1133), 
  s(1132, 1100), s(1106, 1149), s(1126, 1142), s(1113, 1180), s(1129, 1151), s(1116, 1141), s(1145, 1127), s(1126, 1137), 
  s(1126, 1091), s(1143, 1083), s(1134, 1121), s(1133, 1118), s(1133, 1143), s(1142, 1103), s(1151, 1109), s(1140, 1112), 
  s(1127, 1062), s(1140, 1071), s(1151, 1064), s(1151, 1072), s(1153, 1084), s(1161, 1060), s(1148, 1045), s(1162, 1030), 
  s(1139, 1049), s(1123, 1052), s(1134, 1050), s(1149, 1028), s(1138, 1058), s(1110, 1057), s(1127, 1035), s(1123, 1008), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(158, 296), s(149, 292), s(140, 284), s(170, 258), s(136, 272), s(175, 247), s(90, 289), s(68, 310), 
  s(97, 165), s(101, 156), s(129, 149), s(137, 139), s(188, 126), s(203, 126), s(186, 144), s(142, 151), 
  s(84, 145), s(98, 131), s(105, 129), s(125, 107), s(132, 115), s(128, 117), s(112, 122), s(94, 129), 
  s(80, 124), s(76, 122), s(101, 115), s(127, 105), s(123, 106), s(122, 106), s(93, 103), s(87, 108), 
  s(87, 118), s(92, 116), s(105, 116), s(110, 124), s(117, 126), s(121, 118), s(123, 98), s(103, 104), 
  s(79, 127), s(91, 115), s(84, 131), s(101, 127), s(98, 141), s(135, 120), s(125, 101), s(92, 103), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-60, -23), s(62, 40), s(123, 57), s(-15, 93), s(-80, 113), s(-85, 126), s(51, 91), s(53, 26), 
  s(111, 91), s(82, 183), s(-31, 201), s(156, 175), s(29, 205), s(-6, 228), s(51, 198), s(44, 128), 
  s(110, 39), s(144, 86), s(191, 91), s(103, 99), s(145, 106), s(217, 112), s(241, 103), s(148, 23), 
  s(156, -30), s(120, 38), s(112, 45), s(53, 62), s(16, 65), s(58, 53), s(94, 38), s(27, -11), 
  s(-121, -22), s(7, -7), s(-29, 26), s(-88, 46), s(-104, 48), s(-56, 21), s(-52, 1), s(-92, -32), 
  s(-31, -60), s(-50, -23), s(-85, 4), s(-114, 16), s(-92, 13), s(-75, -1), s(-43, -24), s(-63, -52), 
  s(0, -86), s(-21, -46), s(-77, -15), s(-118, -1), s(-105, -2), s(-74, -18), s(-18, -48), s(-11, -81), 
  s(3, -132), s(40, -99), s(9, -67), s(-114, -27), s(-36, -57), s(-64, -39), s(17, -87), s(12, -126), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(58, 196), s(49, 192), s(40, 184), s(70, 158), s(36, 172), s(75, 147), s(-9, 189), s(-31, 210), 
  s(45, 206), s(30, 209), s(16, 175), s(16, 141), s(-27, 141), s(0, 156), s(-67, 183), s(-61, 203), 
  s(27, 116), s(11, 104), s(20, 82), s(4, 78), s(-1, 64), s(33, 65), s(-25, 111), s(-17, 109), 
  s(7, 66), s(-3, 59), s(-23, 44), s(-20, 42), s(-37, 45), s(-37, 48), s(-1, 66), s(7, 59), 
  s(8, 23), s(-3, 28), s(-27, 23), s(-39, 28), s(-27, 13), s(4, 10), s(-22, 39), s(19, 23), 
  s(0, 16), s(8, 21), s(0, 6), s(-29, 19), s(-19, 9), s(-19, 15), s(-13, 28), s(-12, 25), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(40, -254),
  s(20, -149),
  s(-2, -60),
  s(7, -34),
  s(-8, 2),
  s(-5, -6),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(37, -24),
  s(12, -27),
  s(-4, -27),
  s(-18, -15),
  s(-33, -17),
  s(-16, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(93, 307),
  s(220, 123),
  s(49, 50),
  s(19, 14),
  s(-5, -8),
  s(6, -10),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(31, 69);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(6, 52), s(6, 58), s(3, 62), s(8, 57), s(7, 62), s(7, 58), s(1, 57), s(4, 43), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(5, 19), s(12, 35), s(13, 47), s(16, 55), s(16, 62), s(16, 66), s(14, 66), s(6, 72), s(10, 65), s(14, 59), s(31, 57), s(-26, 91), s(8, 52), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(4, 66), s(6, 83), s(10, 99), s(10, 110), s(14, 119), s(15, 125), s(20, 126), s(27, 129), s(33, 131), s(33, 133), s(43, 133), s(40, 139), s(54, 130), s(38, 131), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(32, 273), s(35, 273), s(36, 305), s(44, 309), s(48, 308), s(51, 315), s(51, 343), s(54, 348), s(60, 347), s(63, 351), s(67, 362), s(62, 361), s(72, 363), s(74, 367), s(71, 375), s(70, 383), s(85, 362), s(92, 363), s(103, 356), s(106, 358), s(161, 326), s(134, 329), s(214, 289), s(254, 245), s(279, 246), s(201, 285), s(191, 287), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(19, 23), s(31, 34), s(41, 38), s(52, 40), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 10), s(15, 14), s(21, 19), s(25, 21), s(26, 22), s(29, 19), s(33, 27), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(6, 1), s(10, 9), s(19, 12), s(27, 14), s(26, 24), s(39, 23), s(40, 33), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-10, 87), s(-8, 97), s(-7, 93), s(-9, 108), s(-11, 122), s(-13, 120), s(-14, 128), s(-18, 138), s(-22, 157), s(-20, 151), s(-49, 187), s(-33, 176), s(-51, 236), s(15, 162), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(93, 34);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(91, 60);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(147, -3);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(100, 3);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(42, 40);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(85, 21);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(61, -27);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 38);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(74, 32);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(80, 52);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(111, -7);

pub const TEMPO_BONUS: ScoreTuple = s(40, 29);

// KING SAFETY FEATURES
pub const ATTACKS: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(16, -22), s(14, -14), s(8, -4), s(14, -9), s(3, -28), 
];

pub const DEFENSES: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(-7, 13), s(-8, 5), s(-2, 4), s(0, 6), s(-7, -23), 
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(40, 9),
  s(14, 22),
  s(20, 24),
  s(47, 36),
  s(81, 45),
  s(87, 71),
  s(73, 103),
  s(63, 85),
]);

