#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(180, 297), s(211, 346), s(295, 372), s(352, 347), s(395, 361), s(275, 339), s(226, 345), s(251, 254), 
  s(296, 333), s(331, 347), s(362, 332), s(366, 343), s(384, 328), s(402, 323), s(338, 337), s(358, 301), 
  s(320, 328), s(354, 335), s(377, 361), s(391, 360), s(410, 353), s(447, 334), s(400, 319), s(395, 300), 
  s(344, 337), s(359, 353), s(374, 375), s(413, 375), s(392, 374), s(412, 369), s(375, 354), s(395, 323), 
  s(339, 344), s(353, 345), s(367, 376), s(388, 372), s(388, 378), s(384, 367), s(392, 346), s(357, 344), 
  s(327, 323), s(338, 341), s(359, 348), s(361, 365), s(383, 364), s(368, 340), s(371, 335), s(338, 337), 
  s(309, 302), s(317, 320), s(327, 333), s(351, 332), s(353, 333), s(354, 329), s(335, 312), s(332, 320), 
  s(253, 291), s(302, 316), s(301, 311), s(317, 320), s(323, 320), s(326, 310), s(305, 325), s(306, 295), 
]),
// Bishop PST
Pst::new([
  s(353, 395), s(334, 389), s(291, 395), s(269, 401), s(300, 397), s(298, 390), s(336, 394), s(348, 374), 
  s(360, 363), s(362, 375), s(365, 367), s(326, 375), s(367, 366), s(383, 373), s(368, 375), s(347, 362), 
  s(364, 377), s(390, 364), s(375, 375), s(389, 362), s(400, 364), s(425, 374), s(421, 370), s(409, 369), 
  s(351, 369), s(375, 371), s(383, 375), s(416, 387), s(396, 385), s(407, 378), s(374, 374), s(375, 368), 
  s(357, 357), s(368, 370), s(382, 380), s(401, 382), s(403, 380), s(372, 378), s(368, 371), s(374, 349), 
  s(361, 357), s(383, 366), s(388, 372), s(383, 377), s(386, 381), s(387, 373), s(378, 365), s(381, 350), 
  s(380, 351), s(380, 343), s(386, 349), s(370, 361), s(376, 362), s(391, 356), s(398, 352), s(374, 340), 
  s(349, 343), s(379, 364), s(354, 361), s(348, 356), s(355, 355), s(346, 369), s(372, 345), s(375, 331), 
]),
// Rook PST
Pst::new([
  s(542, 679), s(557, 676), s(526, 694), s(560, 679), s(585, 668), s(559, 672), s(553, 675), s(590, 661), 
  s(518, 681), s(529, 684), s(540, 689), s(567, 674), s(555, 670), s(588, 666), s(576, 661), s(577, 661), 
  s(499, 677), s(527, 676), s(528, 673), s(532, 674), s(567, 661), s(584, 650), s(637, 643), s(578, 645), 
  s(481, 678), s(511, 666), s(509, 680), s(519, 671), s(531, 658), s(541, 655), s(549, 652), s(524, 654), 
  s(469, 663), s(480, 665), s(495, 665), s(506, 659), s(513, 657), s(493, 659), s(526, 650), s(493, 651), 
  s(469, 652), s(477, 655), s(490, 643), s(491, 649), s(503, 646), s(508, 637), s(532, 625), s(497, 627), 
  s(457, 645), s(475, 646), s(488, 647), s(492, 644), s(500, 635), s(506, 633), s(527, 620), s(454, 642), 
  s(473, 645), s(477, 643), s(482, 646), s(493, 639), s(499, 632), s(494, 641), s(489, 639), s(477, 627), 
]),
// Queen PST
Pst::new([
  s(973, 1219), s(985, 1236), s(1007, 1258), s(1052, 1237), s(1055, 1238), s(1085, 1213), s(1130, 1149), s(1053, 1218), 
  s(1010, 1090), s(984, 1121), s(1007, 1143), s(988, 1180), s(986, 1205), s(1045, 1147), s(1046, 1118), s(1083, 1118), 
  s(1014, 1071), s(997, 1090), s(1014, 1106), s(1008, 1147), s(1039, 1136), s(1090, 1109), s(1110, 1068), s(1089, 1099), 
  s(1003, 1076), s(1001, 1081), s(1007, 1090), s(1007, 1113), s(1025, 1123), s(1035, 1125), s(1042, 1128), s(1036, 1118), 
  s(1007, 1044), s(1001, 1079), s(1005, 1088), s(1007, 1115), s(1013, 1109), s(1010, 1113), s(1027, 1090), s(1030, 1092), 
  s(1003, 1037), s(1016, 1046), s(1013, 1068), s(1010, 1078), s(1012, 1093), s(1028, 1069), s(1034, 1063), s(1030, 1049), 
  s(1010, 1012), s(1012, 1020), s(1022, 1016), s(1028, 1026), s(1026, 1036), s(1037, 1010), s(1038, 1000), s(1044, 974), 
  s(998, 1010), s(1000, 1008), s(1006, 1003), s(1015, 995), s(1011, 1011), s(994, 1021), s(1018, 985), s(992, 1010), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(164, 241), s(161, 235), s(154, 239), s(177, 219), s(135, 228), s(157, 219), s(99, 248), s(89, 260), 
  s(85, 166), s(80, 160), s(117, 148), s(117, 146), s(130, 122), s(179, 131), s(169, 158), s(136, 151), 
  s(64, 152), s(72, 134), s(86, 131), s(96, 111), s(112, 115), s(111, 115), s(98, 122), s(93, 128), 
  s(64, 124), s(60, 122), s(83, 117), s(100, 109), s(102, 109), s(101, 111), s(85, 106), s(87, 107), 
  s(68, 123), s(73, 118), s(87, 119), s(92, 126), s(106, 126), s(107, 121), s(117, 104), s(98, 107), 
  s(69, 129), s(70, 123), s(76, 132), s(84, 136), s(91, 144), s(126, 124), s(125, 109), s(90, 107), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-1, -75), s(16, -20), s(62, -18), s(-26, 19), s(14, 0), s(16, 19), s(50, 25), s(71, -65), 
  s(-41, 15), s(-11, 48), s(-116, 65), s(52, 44), s(-6, 57), s(-13, 85), s(22, 68), s(-21, 40), 
  s(-104, 40), s(6, 49), s(-54, 67), s(-78, 75), s(-32, 82), s(71, 80), s(82, 69), s(1, 37), 
  s(-75, 22), s(-55, 49), s(-103, 64), s(-155, 74), s(-160, 82), s(-112, 78), s(-93, 70), s(-136, 40), 
  s(-80, -5), s(-58, 21), s(-130, 50), s(-176, 65), s(-172, 67), s(-115, 52), s(-112, 40), s(-140, 21), 
  s(-19, -21), s(0, -3), s(-76, 21), s(-103, 34), s(-101, 36), s(-88, 30), s(-39, 11), s(-62, -2), 
  s(66, -45), s(16, -18), s(-4, -7), s(-50, 3), s(-50, 9), s(-25, 0), s(30, -17), s(43, -39), 
  s(61, -98), s(88, -72), s(54, -53), s(-65, -29), s(7, -51), s(-23, -30), s(61, -62), s(65, -99), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(64, 141), s(61, 135), s(54, 139), s(77, 119), s(35, 128), s(57, 119), s(0, 148), s(-10, 160), 
  s(66, 134), s(73, 140), s(50, 118), s(40, 94), s(24, 124), s(15, 117), s(-37, 130), s(-39, 154), 
  s(60, 53), s(51, 62), s(35, 56), s(14, 65), s(2, 60), s(28, 58), s(-16, 85), s(0, 76), 
  s(41, 21), s(19, 37), s(-15, 41), s(-6, 38), s(-22, 39), s(4, 34), s(0, 56), s(7, 45), 
  s(23, -2), s(-7, 26), s(-32, 27), s(-19, 17), s(-16, 14), s(6, 11), s(0, 38), s(33, 13), 
  s(1, 12), s(-1, 23), s(-15, 17), s(-8, 5), s(1, 0), s(6, 6), s(28, 13), s(1, 18), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-3, -198),
  s(12, -121),
  s(0, -56),
  s(-8, -28),
  s(-14, -5),
  s(-28, -2),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(30, -22),
  s(10, -30),
  s(-1, -28),
  s(-15, -15),
  s(-28, -21),
  s(-19, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(81, 258),
  s(157, 169),
  s(51, 51),
  s(20, 18),
  s(-4, -5),
  s(3, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(26, 72);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(11, 48), s(13, 61), s(12, 63), s(15, 62), s(14, 66), s(16, 60), s(17, 55), s(28, 36), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(5, 24), s(12, 41), s(14, 51), s(18, 61), s(19, 69), s(21, 73), s(21, 74), s(18, 78), s(25, 72), s(32, 65), s(48, 62), s(17, 88), s(64, 44), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(1, 83), s(2, 98), s(2, 119), s(3, 126), s(5, 135), s(6, 140), s(7, 146), s(13, 149), s(15, 154), s(17, 157), s(22, 162), s(26, 164), s(36, 159), s(27, 159), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(57, 127), s(57, 183), s(61, 223), s(66, 238), s(69, 248), s(73, 251), s(74, 273), s(77, 278), s(80, 276), s(84, 279), s(85, 290), s(88, 286), s(92, 290), s(92, 295), s(97, 300), s(96, 306), s(105, 303), s(112, 303), s(136, 290), s(145, 294), s(202, 259), s(196, 257), s(232, 236), s(262, 231), s(258, 221), s(192, 246), s(156, 226), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(15, 25), s(27, 37), s(38, 43), s(50, 47), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 14), s(14, 19), s(20, 22), s(26, 27), s(28, 29), s(34, 28), s(40, 34), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(8, 0), s(16, 3), s(25, 8), s(32, 15), s(37, 19), s(43, 20), s(48, 26), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 102), s(-12, 115), s(-12, 120), s(-11, 136), s(-11, 149), s(-12, 150), s(-13, 161), s(-12, 169), s(-14, 183), s(-12, 184), s(-22, 200), s(1, 182), s(-28, 230), s(22, 198), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(81, 28);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(80, 55);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(119, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(106, -33);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 37);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(78, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(64, -34);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 31);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(65, 34);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(93, 23);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(86, 6);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-57, 90);

pub const TEMPO_BONUS: ScoreTuple = s(37, 24);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-797, 39), s(1413, -290), s(-9, 811), s(640, -659), s(1385, 3), s(-1561, -829), s(-1600, 495), s(-489, 7), ],
  [s(-735, 101), s(1500, -393), s(1, 1036), s(623, -800), s(1385, 27), s(-1592, -1082), s(-1646, 638), s(-475, 37), ],
  [s(-788, 51), s(1703, -438), s(-8, 1100), s(588, -835), s(1550, 40), s(-1700, -1109), s(-1743, 689), s(-474, 40), ],
  [s(-718, 70), s(1883, -422), s(1, 1040), s(181, -850), s(1731, 34), s(-1666, -1138), s(-1723, 794), s(-489, 44), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-519, 10), s(122, 173), s(-1, 99), s(-665, 239), s(651, 0), s(64, 366), s(54, -165), s(-448, 52), ],
  [s(-681, -82), s(-25, 352), s(-6, -717), s(-668, 895), s(515, -41), s(223, 1095), s(247, -615), s(-489, -43), ],
  [s(-512, -8), s(1444, -177), s(5, 406), s(-669, -488), s(1486, -6), s(-1055, -301), s(-1115, 545), s(-476, -2), ],
  [s(-758, -35), s(1447, 330), s(0, -368), s(-681, 733), s(1486, -25), s(-1040, 910), s(-1099, -311), s(-445, -27), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(-762, 17), s(245, -349), s(-4, 1029), s(-655, -817), s(632, -8), s(-16, -1033), s(-22, 626), s(-474, 19), ],
  [s(-496, -6), s(947, 151), s(9, 70), s(-587, 57), s(1046, 0), s(-757, 68), s(-761, 176), s(-427, -3), ],
  [s(-570, -5), s(1187, 81), s(10, 25), s(-172, -38), s(1240, 3), s(-1105, 263), s(-1135, 88), s(-327, -4), ],
  [s(-606, 4), s(1259, 121), s(2, -516), s(116, 414), s(1224, 5), s(-1185, 673), s(-1184, -306), s(-220, -3), ],
  [s(474, -4), s(107, 180), s(-9, -664), s(-114, 505), s(54, 8), s(-41, 741), s(-48, -378), s(27, 4), ],
  [s(696, 8), s(-1020, 152), s(-6, -613), s(-212, 511), s(-980, -2), s(1143, 635), s(1093, -377), s(169, -3), ],
  [s(514, -9), s(-821, 25), s(6, -341), s(-164, 334), s(-704, 4), s(474, 391), s(577, -267), s(79, -13), ],
  [s(-223, 0), s(-44, 8), s(-7, 2), s(-115, 20), s(145, 9), s(58, 3), s(45, -38), s(25, -2), ],
]);

pub const TROPISM: [ScoreTuple; 8] = 
  [s(-610, -408), s(-40, 330), s(-11, 223), s(-659, -145), s(486, -311), s(457, 292), s(446, 544), s(-446, -231), ];

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-666, 11), s(709, -98), s(-4, 647), s(469, -551), s(1313, 1), s(-983, -627), s(-1014, 421), s(-452, 0), ],
  [s(-643, 17), s(710, -62), s(-6, 531), s(-81, -449), s(1334, -2), s(-803, -486), s(-833, 383), s(-438, -3), ],
  [s(-540, 3), s(437, -65), s(-12, 520), s(-222, -462), s(1274, 6), s(-512, -483), s(-534, 390), s(-418, 4), ],
  [s(-734, 3), s(1088, -141), s(-6, 663), s(413, -601), s(1263, 10), s(-1251, -650), s(-1240, 452), s(-367, -9), ],
  [s(-506, -3), s(408, -113), s(4, 662), s(182, -551), s(1171, 2), s(-529, -640), s(-556, 433), s(-360, 1), ],
  [s(-717, 11), s(837, -133), s(11, 700), s(264, -589), s(1329, -5), s(-1039, -654), s(-1070, 465), s(-431, 7), ],
  [s(-636, -1), s(747, -30), s(4, 324), s(502, -261), s(1212, 9), s(-1065, -150), s(-1076, 204), s(-388, -6), ],
  [s(-695, 7), s(75, 15), s(3, 217), s(-439, -217), s(683, 8), s(-47, -117), s(-65, 160), s(-330, 6), ],
  [s(-585, 6), s(1081, -44), s(-9, 423), s(311, -371), s(1231, -2), s(-1218, -316), s(-1227, 262), s(-381, -7), ],
  [s(-666, -3), s(638, 47), s(-10, -133), s(-494, 275), s(508, 9), s(-500, 375), s(-492, -198), s(-362, -12), ],
  [s(-643, -13), s(-572, 84), s(1, -198), s(-592, 336), s(28, 2), s(716, 385), s(715, -208), s(-315, 0), ],
  [s(-694, -5), s(632, 12), s(-1, 144), s(-487, -94), s(606, -8), s(-390, 80), s(-398, 38), s(-332, -13), ],
  [s(-620, -9), s(-380, -78), s(6, 431), s(-618, -431), s(135, -3), s(542, -403), s(548, 355), s(-343, -10), ],
  [s(-677, 0), s(-192, -7), s(6, 370), s(-618, -327), s(142, 4), s(324, -284), s(347, 279), s(-354, 3), ],
  [s(-610, -7), s(171, -60), s(-1, 419), s(-588, -397), s(305, -13), s(68, -353), s(49, 338), s(-397, 3), ],
  [s(-623, 2), s(47, 59), s(-5, 30), s(-638, 0), s(210, -3), s(199, 69), s(189, 94), s(-402, 0), ],
  [s(-679, -11), s(31, 103), s(0, -180), s(-623, 288), s(264, 2), s(189, 387), s(218, -93), s(-426, 0), ],
  [s(-611, -19), s(-194, 127), s(1, -404), s(-631, 532), s(80, -17), s(427, 626), s(438, -304), s(-398, -10), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-614, -24), s(-984, 116), s(4, -427), s(-654, 519), s(-549, -16), s(1081, 632), s(1100, -331), s(-263, -1), ],
  [s(569, -10), s(-1142, 76), s(0, -308), s(-651, 435), s(-771, -11), s(1236, 511), s(1259, -281), s(195, -17), ],
  [s(-691, -10), s(-56, -8), s(-10, 219), s(-629, -284), s(130, -7), s(318, -95), s(328, 253), s(-398, 1), ],
  [s(-615, 3), s(-79, 123), s(-1, -410), s(-548, 483), s(64, 2), s(291, 601), s(310, -340), s(-271, 0), ],
  [s(-667, -16), s(-520, 136), s(11, -457), s(-616, 567), s(-108, 0), s(744, 688), s(753, -376), s(-310, -1), ],
  [s(-614, -4), s(-406, 84), s(-5, -221), s(-616, 327), s(60, -10), s(576, 492), s(591, -185), s(-355, 4), ],
  [s(-596, -10), s(-219, 17), s(6, 128), s(-573, -126), s(211, 2), s(326, 162), s(317, 63), s(-330, 6), ],
  [s(-618, -11), s(-598, 81), s(10, -80), s(-578, 62), s(116, -1), s(713, 355), s(700, -83), s(-301, -2), ],
  [s(-646, -7), s(-239, 32), s(-6, 70), s(-573, -94), s(232, -4), s(317, 232), s(331, 63), s(-347, -3), ],
  [s(-628, 6), s(397, -66), s(4, 507), s(-452, -459), s(1082, 1), s(-419, -380), s(-435, 352), s(-412, 0), ],
  [s(-702, 2), s(1315, -23), s(-6, 328), s(271, -245), s(1318, 9), s(-1358, -48), s(-1350, 152), s(-366, 6), ],
  [s(-626, 10), s(-24, -37), s(4, 347), s(-499, -326), s(598, 12), s(16, -53), s(19, 248), s(-368, -7), ],
  [s(-710, 0), s(1028, 31), s(-8, 69), s(443, 39), s(1284, 10), s(-1231, 236), s(-1236, -81), s(-367, 4), ],
  [s(-600, -2), s(-376, 37), s(8, 26), s(-474, -15), s(629, 2), s(425, 197), s(408, 58), s(-396, -11), ],
  [s(-472, 0), s(-137, -9), s(-12, 344), s(-437, -254), s(737, -2), s(175, -95), s(160, 213), s(-389, 8), ],
  [s(-26, -2), s(-1035, -75), s(7, 367), s(-520, -393), s(-354, 0), s(1190, -315), s(1172, 306), s(-310, 0), ],
  [s(648, -2), s(-1420, -104), s(-2, 595), s(-580, -523), s(-1126, 4), s(1582, -569), s(1594, 362), s(183, 1), ],
  [s(-655, 14), s(693, -190), s(-8, 775), s(545, -645), s(1294, 4), s(-981, -771), s(-1012, 527), s(-437, 15), ],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(-562, 0), s(630, -108), s(-11, 596), s(-673, -485), s(990, -13), s(-405, -290), s(-404, 494), s(-461, 8), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(451, 10), s(987, 141), s(-3, 659), s(-614, 379), s(1264, -78), s(-5, 273), s(1, 635), s(415, 70), ];

pub const OUTPUT_BIAS: ScoreTuple = s(1, 4);

pub const SAFETY_WEIGHT: ScoreTuple = s(26, 6);

