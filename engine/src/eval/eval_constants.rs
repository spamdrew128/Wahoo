#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(186, 299), s(221, 348), s(295, 371), s(353, 349), s(371, 362), s(252, 345), s(228, 347), s(246, 257), 
  s(309, 334), s(343, 349), s(373, 336), s(361, 349), s(387, 329), s(388, 329), s(335, 341), s(339, 304), 
  s(328, 331), s(372, 340), s(393, 363), s(396, 361), s(382, 362), s(432, 340), s(372, 331), s(361, 308), 
  s(355, 341), s(370, 359), s(387, 378), s(422, 377), s(394, 377), s(415, 371), s(373, 357), s(386, 324), 
  s(349, 347), s(365, 352), s(378, 379), s(393, 376), s(391, 381), s(389, 370), s(387, 351), s(358, 345), 
  s(337, 327), s(350, 348), s(367, 353), s(369, 367), s(384, 368), s(374, 343), s(369, 338), s(343, 337), 
  s(316, 306), s(326, 325), s(338, 338), s(357, 336), s(358, 337), s(356, 333), s(339, 316), s(338, 320), 
  s(273, 293), s(309, 320), s(310, 317), s(321, 327), s(328, 324), s(334, 310), s(311, 330), s(316, 288), 
]),
// Bishop PST
Pst::new([
  s(357, 397), s(335, 391), s(285, 399), s(267, 403), s(290, 399), s(286, 399), s(335, 401), s(355, 377), 
  s(365, 369), s(372, 381), s(373, 373), s(336, 378), s(360, 370), s(380, 380), s(345, 388), s(336, 373), 
  s(374, 384), s(400, 374), s(391, 381), s(398, 367), s(390, 370), s(414, 383), s(387, 383), s(395, 373), 
  s(364, 378), s(387, 379), s(393, 382), s(429, 391), s(401, 391), s(414, 384), s(379, 378), s(376, 373), 
  s(370, 365), s(380, 379), s(389, 387), s(407, 390), s(405, 387), s(382, 384), s(369, 379), s(379, 354), 
  s(372, 365), s(394, 374), s(397, 380), s(391, 382), s(388, 388), s(392, 380), s(386, 371), s(382, 356), 
  s(389, 357), s(390, 353), s(396, 355), s(377, 368), s(381, 369), s(394, 365), s(398, 362), s(383, 343), 
  s(357, 352), s(383, 372), s(358, 370), s(353, 365), s(359, 365), s(355, 376), s(373, 354), s(377, 339), 
]),
// Rook PST
Pst::new([
  s(571, 687), s(587, 683), s(562, 699), s(593, 683), s(618, 672), s(565, 686), s(576, 688), s(610, 671), 
  s(549, 687), s(557, 692), s(571, 696), s(595, 681), s(585, 676), s(587, 678), s(584, 673), s(587, 673), 
  s(531, 680), s(557, 681), s(554, 678), s(561, 676), s(588, 667), s(573, 663), s(627, 656), s(566, 661), 
  s(509, 684), s(540, 673), s(534, 688), s(545, 676), s(553, 664), s(539, 666), s(547, 664), s(521, 667), 
  s(495, 668), s(506, 672), s(518, 672), s(533, 663), s(537, 661), s(501, 669), s(533, 660), s(500, 662), 
  s(494, 658), s(503, 663), s(516, 650), s(518, 653), s(524, 651), s(521, 645), s(539, 636), s(507, 637), 
  s(481, 653), s(502, 652), s(513, 653), s(519, 649), s(525, 640), s(511, 643), s(534, 631), s(467, 648), 
  s(496, 655), s(500, 651), s(504, 654), s(512, 648), s(511, 643), s(504, 646), s(491, 649), s(490, 637), 
]),
// Queen PST
Pst::new([
  s(988, 1221), s(1007, 1225), s(1017, 1251), s(1051, 1232), s(1052, 1237), s(1050, 1222), s(1137, 1140), s(1071, 1201), 
  s(1028, 1095), s(1007, 1126), s(1028, 1142), s(1008, 1177), s(991, 1199), s(1037, 1137), s(1070, 1100), s(1100, 1099), 
  s(1029, 1079), s(1017, 1099), s(1034, 1114), s(1027, 1142), s(1038, 1131), s(1056, 1100), s(1069, 1054), s(1058, 1079), 
  s(1018, 1092), s(1017, 1098), s(1023, 1103), s(1019, 1126), s(1034, 1116), s(1041, 1093), s(1047, 1097), s(1042, 1081), 
  s(1024, 1056), s(1017, 1094), s(1020, 1103), s(1018, 1131), s(1026, 1116), s(1022, 1092), s(1039, 1070), s(1038, 1065), 
  s(1023, 1044), s(1032, 1062), s(1028, 1084), s(1023, 1089), s(1021, 1102), s(1038, 1062), s(1048, 1053), s(1039, 1039), 
  s(1028, 1022), s(1028, 1033), s(1037, 1030), s(1040, 1039), s(1037, 1045), s(1046, 1004), s(1042, 1009), s(1049, 976), 
  s(1014, 1023), s(1014, 1018), s(1018, 1013), s(1029, 1000), s(1024, 1007), s(1007, 1008), s(1020, 981), s(1007, 1006), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(152, 276), s(146, 268), s(151, 264), s(178, 239), s(140, 246), s(158, 239), s(86, 271), s(77, 289), 
  s(89, 166), s(84, 159), s(118, 149), s(120, 145), s(128, 124), s(182, 130), s(155, 158), s(127, 154), 
  s(67, 151), s(77, 133), s(88, 128), s(100, 109), s(111, 116), s(112, 115), s(89, 125), s(86, 126), 
  s(64, 125), s(64, 121), s(83, 117), s(100, 110), s(97, 111), s(100, 110), s(75, 108), s(77, 109), 
  s(67, 122), s(76, 116), s(84, 118), s(90, 124), s(93, 127), s(98, 118), s(91, 105), s(82, 107), 
  s(64, 130), s(71, 122), s(71, 131), s(79, 133), s(77, 143), s(111, 123), s(92, 109), s(75, 109), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-22, 14), s(-9, 72), s(42, 76), s(-50, 119), s(-3, 103), s(-21, 115), s(6, 117), s(66, 19), 
  s(-7, 88), s(38, 130), s(-32, 137), s(136, 116), s(52, 127), s(22, 160), s(47, 145), s(9, 116), 
  s(-20, 49), s(90, 70), s(61, 85), s(42, 91), s(79, 95), s(164, 87), s(127, 86), s(59, 39), 
  s(87, 1), s(101, 46), s(80, 56), s(41, 70), s(24, 72), s(68, 57), s(49, 50), s(-3, 11), 
  s(34, -26), s(82, 7), s(47, 33), s(18, 51), s(19, 49), s(52, 25), s(22, 10), s(-29, -12), 
  s(-37, -45), s(-15, -20), s(-62, 5), s(-75, 17), s(-70, 15), s(-55, 1), s(-32, -21), s(-69, -38), 
  s(3, -66), s(-25, -32), s(-51, -17), s(-92, -4), s(-87, -3), s(-59, -17), s(-8, -41), s(-4, -67), 
  s(8, -105), s(38, -79), s(5, -55), s(-96, -26), s(-34, -47), s(-54, -38), s(18, -70), s(12, -106), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(52, 176), s(46, 168), s(51, 164), s(78, 139), s(40, 146), s(58, 139), s(-13, 171), s(-22, 189), 
  s(24, 202), s(40, 199), s(25, 162), s(28, 124), s(24, 141), s(0, 146), s(-48, 166), s(-62, 200), 
  s(23, 110), s(21, 104), s(23, 81), s(11, 74), s(0, 66), s(23, 72), s(-22, 103), s(-14, 107), 
  s(8, 66), s(8, 58), s(-13, 45), s(-5, 38), s(-23, 40), s(-7, 43), s(0, 64), s(-3, 62), 
  s(6, 19), s(-7, 29), s(-30, 26), s(-17, 17), s(-24, 16), s(-6, 17), s(-19, 45), s(12, 25), 
  s(-1, 16), s(-3, 21), s(-14, 12), s(-10, 8), s(-5, 2), s(-13, 13), s(0, 19), s(-5, 22), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-29, -194),
  s(11, -134),
  s(0, -60),
  s(-9, -25),
  s(-14, 0),
  s(-20, 1),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(34, -17),
  s(11, -29),
  s(0, -28),
  s(-14, -17),
  s(-28, -19),
  s(-15, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(90, 271),
  s(175, 162),
  s(53, 49),
  s(19, 15),
  s(-5, -5),
  s(3, -10),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(26, 71);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(8, 51), s(9, 64), s(6, 66), s(7, 65), s(6, 68), s(6, 64), s(3, 61), s(1, 52), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(1, 22), s(7, 41), s(7, 51), s(9, 61), s(9, 69), s(9, 72), s(6, 74), s(1, 79), s(4, 74), s(5, 68), s(13, 69), s(-29, 96), s(6, 58), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 78), s(0, 91), s(0, 113), s(0, 120), s(0, 130), s(0, 135), s(1, 141), s(6, 145), s(7, 148), s(8, 150), s(11, 155), s(14, 158), s(20, 154), s(16, 150), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(60, 147), s(59, 198), s(64, 239), s(68, 254), s(70, 264), s(74, 265), s(74, 286), s(76, 292), s(79, 291), s(82, 294), s(81, 305), s(83, 300), s(86, 304), s(84, 307), s(89, 308), s(86, 312), s(96, 304), s(100, 304), s(121, 284), s(129, 284), s(178, 249), s(165, 244), s(194, 223), s(216, 211), s(219, 203), s(152, 212), s(132, 209), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(14, 23), s(25, 34), s(36, 39), s(45, 43), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 12), s(13, 16), s(19, 19), s(24, 23), s(25, 24), s(30, 22), s(33, 29), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 0), s(12, 5), s(20, 9), s(26, 16), s(29, 21), s(37, 21), s(42, 27), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 99), s(-12, 111), s(-12, 115), s(-12, 128), s(-13, 140), s(-13, 140), s(-15, 149), s(-14, 156), s(-15, 168), s(-16, 170), s(-22, 179), s(-5, 168), s(-35, 209), s(9, 173), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(80, 37);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(78, 61);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(123, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(103, -30);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(38, 37);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(63, -39);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 32);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(71, 32);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(92, 24);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(86, 11);

pub const TEMPO_BONUS: ScoreTuple = s(34, 29);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks values
[
  s(1, -9), s(-4, -19), s(15, -6), s(18, -11), s(15, -4), s(15, -11), s(17, -5), s(19, -11), s(18, -11), s(18, -6), s(16, -10), s(17, -11), s(14, -9), s(18, -18), s(13, -14), s(15, -22), s(13, -14), s(11, -13), s(8, -13), s(6, -15), s(10, -17), s(6, -17), s(2, -20), s(-3, -17), s(-1, -23), s(-14, -21), s(-8, -12), s(-60, -17), 
],
// Bishop attacks values
[
  s(-11, 8), s(1, -1), s(15, 0), s(14, -1), s(14, 2), s(15, -3), s(14, -5), s(14, -3), s(17, -8), s(15, -9), s(14, -8), s(13, -5), s(12, -6), s(11, -12), s(12, -10), s(9, -10), s(11, -12), s(8, -13), s(8, -12), s(6, -10), s(6, -8), s(5, -17), s(4, -9), s(5, -18), s(-2, -12), s(-1, -20), s(16, -34), s(-8, -21), 
],
// Rook attacks values
[
  s(35, -3), s(0, -5), s(14, -9), s(13, -16), s(12, -15), s(11, -20), s(12, -16), s(12, -12), s(12, -20), s(10, -15), s(9, -12), s(9, -12), s(7, -5), s(7, -4), s(7, -1), s(7, -3), s(6, -3), s(6, -3), s(6, -3), s(5, -2), s(5, -2), s(5, -2), s(2, 0), s(2, 0), s(3, 0), s(2, -1), s(-4, 1), s(8, -4), 
],
// Queen attacks values
[
  s(16, -20), s(0, -52), s(8, -39), s(9, -51), s(10, -16), s(9, -14), s(11, -13), s(11, -6), s(10, -10), s(13, -8), s(11, -6), s(13, 6), s(14, -12), s(15, -6), s(14, -4), s(15, -11), s(15, -12), s(16, -10), s(15, -8), s(16, -9), s(14, -6), s(15, -8), s(14, -7), s(16, -10), s(16, -6), s(18, -11), s(17, -7), s(19, -18), 
],
// Pawn attacks values
[
  s(-4, 10), s(7, -3), s(8, -6), s(3, -6), s(3, -7), s(3, -7), s(3, -7), s(4, -11), s(3, -14), s(4, -15), s(2, -35), s(2, -27), s(1, -82), s(2, -34), s(1, -40), s(0, -36), s(1, -36), s(1, -32), s(3, -35), s(2, -26), s(4, -31), s(6, -32), s(6, -25), s(10, -29), s(13, -21), s(0, -13), s(5, -10), s(-1, -13), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses values
[
  s(16, 4), s(3, 6), s(-8, 4), s(-7, 2), s(-8, 1), s(-7, 1), s(-8, 4), s(-8, 1), s(-8, 2), s(-9, 4), s(-8, 7), s(-8, 5), s(-8, 6), s(-7, 8), s(-5, 2), s(-7, 10), s(-6, 9), s(-4, 8), s(0, 10), s(-1, 8), s(-2, 9), s(0, 12), s(-4, 13), s(0, 15), s(-1, 15), s(2, 22), s(9, 10), s(-7, 28), 
],
// Bishop defenses values
[
  s(0, 7), s(-1, -2), s(-7, 1), s(-10, 1), s(-7, 1), s(-8, 1), s(-11, 3), s(-9, 2), s(-8, 3), s(-8, 4), s(-6, 2), s(-7, 2), s(-6, 5), s(-8, 2), s(-4, 0), s(-5, 3), s(-3, 2), s(-1, 2), s(-4, 4), s(0, 2), s(0, 2), s(-3, 5), s(-1, 4), s(-5, 7), s(4, 5), s(-1, 8), s(8, 0), s(7, 13), 
],
// Rook defenses values
[
  s(-48, 11), s(-15, 5), s(-9, 8), s(-7, 5), s(-6, 4), s(-6, 6), s(-3, 3), s(-4, 2), s(-4, 3), s(-4, 3), s(-2, -2), s(-2, 1), s(0, 0), s(-1, 2), s(0, 0), s(0, 1), s(0, 2), s(1, 3), s(1, 3), s(0, 3), s(0, 4), s(1, 4), s(2, 3), s(0, 4), s(-2, 4), s(0, 3), s(3, 3), s(-1, 3), 
],
// Queen defenses values
[
  s(-5, -68), s(2, -82), s(-1, -27), s(-1, -42), s(-2, -5), s(-1, -30), s(-4, 2), s(-3, 4), s(-4, 4), s(-3, 3), s(-2, 2), s(-1, -59), s(-2, 4), s(-2, 5), s(-1, 1), s(0, 4), s(0, 5), s(0, 4), s(0, 4), s(0, 5), s(0, 5), s(0, 6), s(0, 8), s(-3, 9), s(-2, 8), s(-1, 8), s(-2, 11), s(-6, 8), 
],
// Pawn defenses values
[
  s(-55, -10), s(-24, -2), s(-26, -4), s(-19, -2), s(-17, -4), s(-15, -4), s(-16, -4), s(-15, 0), s(-12, -4), s(-9, -6), s(-6, -8), s(-6, -13), s(-3, -24), s(-2, -22), s(-1, -42), s(0, -44), s(1, -42), s(1, -38), s(0, -38), s(3, -33), s(3, -31), s(6, -35), s(10, -34), s(11, -37), s(2, -23), s(29, -39), s(5, -27), s(14, -28), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(95, 76),
  s(80, 78),
  s(87, 84),
  s(134, 97),
  s(136, 105),
  s(128, 118),
  s(132, 136),
  s(126, 137),
]);

pub const TROPHISM_BONUS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
// Knight trophism values
[
  s(16, 4), s(3, 6), s(-8, 4), s(-7, 2), s(-8, 1), s(-7, 1), s(-8, 4), s(-8, 1),
],
// Bishop trophism values
[
  s(16, 4), s(3, 6), s(-8, 4), s(-7, 2), s(-8, 1), s(-7, 1), s(-8, 4), s(-8, 1),
],
// Rook trophism values
[
  s(16, 4), s(3, 6), s(-8, 4), s(-7, 2), s(-8, 1), s(-7, 1), s(-8, 4), s(-8, 1),
],
// Queen trophism values
[
  s(16, 4), s(3, 6), s(-8, 4), s(-7, 2), s(-8, 1), s(-7, 1), s(-8, 4), s(-8, 1),
],
];
