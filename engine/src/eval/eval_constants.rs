#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(202, 309), s(240, 359), s(307, 382), s(360, 359), s(355, 378), s(251, 359), s(224, 365), s(258, 272), 
  s(325, 346), s(360, 358), s(383, 345), s(365, 358), s(388, 341), s(381, 341), s(337, 354), s(345, 319), 
  s(347, 341), s(389, 346), s(407, 368), s(400, 367), s(385, 368), s(425, 350), s(371, 341), s(356, 323), 
  s(374, 348), s(384, 365), s(399, 383), s(431, 383), s(403, 383), s(419, 376), s(381, 362), s(390, 334), 
  s(366, 353), s(380, 358), s(391, 383), s(404, 381), s(401, 386), s(398, 374), s(394, 358), s(368, 354), 
  s(354, 332), s(365, 351), s(382, 357), s(382, 371), s(396, 371), s(384, 346), s(381, 342), s(355, 344), 
  s(336, 315), s(344, 332), s(353, 343), s(372, 341), s(371, 342), s(365, 338), s(350, 323), s(351, 329), 
  s(295, 306), s(329, 325), s(331, 324), s(341, 333), s(346, 329), s(345, 317), s(326, 336), s(331, 304), 
]),
// Bishop PST
Pst::new([
  s(376, 412), s(349, 405), s(302, 409), s(274, 414), s(290, 411), s(282, 411), s(346, 412), s(362, 392), 
  s(383, 380), s(392, 389), s(385, 382), s(341, 387), s(350, 383), s(375, 391), s(350, 397), s(334, 388), 
  s(393, 394), s(417, 382), s(404, 387), s(401, 375), s(386, 379), s(405, 393), s(382, 394), s(392, 384), 
  s(383, 385), s(401, 386), s(404, 389), s(436, 397), s(408, 396), s(413, 391), s(387, 384), s(380, 382), 
  s(389, 372), s(396, 386), s(402, 393), s(418, 394), s(414, 391), s(390, 390), s(375, 385), s(389, 362), 
  s(391, 373), s(411, 381), s(413, 386), s(403, 388), s(400, 394), s(401, 385), s(399, 377), s(393, 364), 
  s(410, 370), s(407, 360), s(413, 363), s(392, 375), s(395, 375), s(405, 372), s(411, 369), s(398, 352), 
  s(380, 365), s(407, 384), s(378, 377), s(374, 372), s(379, 372), s(371, 384), s(388, 365), s(391, 352), 
]),
// Rook PST
Pst::new([
  s(602, 698), s(619, 691), s(588, 706), s(602, 693), s(618, 686), s(568, 702), s(580, 705), s(624, 686), 
  s(572, 698), s(572, 701), s(578, 705), s(588, 691), s(573, 689), s(570, 695), s(574, 689), s(585, 689), 
  s(556, 688), s(573, 688), s(563, 684), s(562, 683), s(573, 679), s(560, 678), s(611, 672), s(563, 674), 
  s(530, 692), s(554, 679), s(541, 694), s(543, 684), s(549, 672), s(532, 679), s(542, 676), s(519, 680), 
  s(518, 676), s(523, 678), s(529, 679), s(541, 670), s(542, 668), s(503, 679), s(532, 671), s(505, 671), 
  s(518, 665), s(523, 668), s(532, 655), s(530, 658), s(534, 656), s(527, 654), s(545, 644), s(515, 646), 
  s(506, 660), s(525, 657), s(533, 658), s(535, 653), s(537, 644), s(522, 651), s(548, 638), s(484, 655), 
  s(520, 662), s(523, 658), s(526, 659), s(531, 652), s(529, 647), s(516, 653), s(508, 656), s(509, 646), 
]),
// Queen PST
Pst::new([
  s(1004, 1249), s(1034, 1240), s(1034, 1270), s(1056, 1252), s(1047, 1264), s(1054, 1249), s(1136, 1170), s(1075, 1226), 
  s(1045, 1117), s(1021, 1141), s(1036, 1152), s(1010, 1185), s(986, 1214), s(1030, 1161), s(1078, 1111), s(1106, 1114), 
  s(1046, 1101), s(1030, 1109), s(1042, 1117), s(1031, 1143), s(1039, 1134), s(1057, 1111), s(1072, 1065), s(1067, 1088), 
  s(1034, 1108), s(1028, 1107), s(1032, 1104), s(1029, 1120), s(1043, 1113), s(1048, 1095), s(1052, 1103), s(1052, 1086), 
  s(1038, 1072), s(1030, 1103), s(1031, 1109), s(1029, 1130), s(1038, 1113), s(1031, 1096), s(1049, 1075), s(1048, 1073), 
  s(1040, 1064), s(1046, 1074), s(1040, 1092), s(1035, 1095), s(1034, 1104), s(1051, 1069), s(1061, 1064), s(1053, 1053), 
  s(1045, 1048), s(1042, 1051), s(1052, 1039), s(1053, 1047), s(1050, 1055), s(1059, 1019), s(1057, 1026), s(1065, 997), 
  s(1033, 1048), s(1033, 1040), s(1035, 1033), s(1044, 1018), s(1041, 1021), s(1021, 1024), s(1039, 995), s(1028, 1026), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(152, 276), s(146, 268), s(149, 266), s(174, 242), s(138, 247), s(157, 239), s(92, 269), s(74, 289), 
  s(89, 168), s(82, 160), s(115, 150), s(116, 147), s(129, 125), s(177, 133), s(153, 160), s(124, 157), 
  s(67, 153), s(76, 134), s(86, 130), s(98, 111), s(112, 118), s(110, 118), s(88, 127), s(85, 128), 
  s(64, 126), s(63, 123), s(83, 118), s(99, 111), s(97, 113), s(97, 112), s(73, 110), s(76, 111), 
  s(67, 123), s(76, 117), s(85, 119), s(90, 125), s(91, 128), s(92, 121), s(88, 107), s(79, 108), 
  s(65, 132), s(71, 125), s(72, 133), s(77, 135), s(75, 145), s(106, 126), s(87, 112), s(72, 111), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-23, 48), s(-55, 117), s(21, 111), s(-60, 148), s(0, 131), s(-21, 140), s(25, 136), s(65, 52), 
  s(-31, 122), s(29, 156), s(-44, 167), s(123, 147), s(46, 156), s(39, 180), s(54, 168), s(-5, 148), 
  s(-48, 69), s(80, 80), s(48, 95), s(24, 100), s(75, 103), s(164, 94), s(132, 95), s(45, 59), 
  s(29, 0), s(55, 36), s(31, 46), s(-12, 60), s(-30, 62), s(26, 46), s(17, 40), s(-49, 12), 
  s(-21, -32), s(32, -4), s(-1, 20), s(-34, 38), s(-31, 36), s(6, 12), s(-19, 0), s(-76, -16), 
  s(-47, -56), s(-19, -34), s(-64, -9), s(-73, 2), s(-70, 1), s(-55, -12), s(-35, -34), s(-77, -48), 
  s(7, -74), s(-15, -43), s(-46, -28), s(-86, -16), s(-80, -14), s(-51, -30), s(0, -51), s(1, -75), 
  s(31, -107), s(54, -80), s(21, -54), s(-80, -30), s(-21, -46), s(-38, -38), s(32, -68), s(32, -105), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(52, 176), s(46, 168), s(49, 166), s(74, 142), s(38, 147), s(57, 139), s(-7, 169), s(-25, 189), 
  s(25, 201), s(42, 199), s(25, 165), s(28, 127), s(20, 144), s(0, 146), s(-47, 165), s(-63, 198), 
  s(25, 109), s(22, 104), s(24, 81), s(10, 75), s(-1, 67), s(20, 72), s(-18, 102), s(-16, 107), 
  s(10, 66), s(8, 59), s(-12, 45), s(-6, 39), s(-23, 40), s(-9, 44), s(2, 64), s(-2, 63), 
  s(7, 20), s(-7, 30), s(-28, 26), s(-18, 18), s(-25, 17), s(-8, 19), s(-16, 46), s(13, 25), 
  s(0, 16), s(-3, 21), s(-12, 11), s(-11, 9), s(-5, 3), s(-15, 14), s(-1, 21), s(-3, 22), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-36, -192),
  s(8, -135),
  s(0, -61),
  s(-9, -25),
  s(-14, 0),
  s(-23, 3),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(44, -23),
  s(13, -31),
  s(0, -28),
  s(-14, -17),
  s(-27, -19),
  s(-14, -20),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(92, 267),
  s(166, 162),
  s(52, 51),
  s(18, 16),
  s(-6, -5),
  s(3, -11),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(24, 69);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(9, 58), s(10, 73), s(8, 77), s(10, 78), s(9, 82), s(9, 79), s(7, 77), s(5, 69), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(2, 27), s(9, 48), s(11, 61), s(14, 71), s(14, 79), s(15, 83), s(13, 86), s(8, 91), s(11, 87), s(13, 82), s(19, 82), s(-23, 111), s(13, 72), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(1, 82), s(2, 98), s(2, 123), s(1, 131), s(3, 143), s(5, 148), s(6, 155), s(12, 159), s(13, 163), s(14, 166), s(18, 170), s(23, 174), s(30, 170), s(27, 168), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(61, 143), s(62, 200), s(67, 241), s(73, 260), s(76, 272), s(80, 275), s(82, 297), s(85, 304), s(89, 305), s(93, 309), s(93, 321), s(96, 316), s(100, 322), s(100, 325), s(105, 327), s(103, 332), s(114, 325), s(118, 326), s(139, 307), s(148, 310), s(198, 276), s(181, 275), s(213, 255), s(238, 243), s(243, 237), s(175, 242), s(152, 238), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(14, 22), s(24, 33), s(35, 39), s(43, 42), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 12), s(11, 16), s(16, 19), s(20, 23), s(21, 25), s(26, 23), s(28, 30), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 2), s(11, 7), s(18, 11), s(24, 18), s(28, 24), s(36, 24), s(40, 30), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 102), s(-13, 113), s(-14, 118), s(-14, 132), s(-15, 144), s(-17, 146), s(-18, 153), s(-17, 159), s(-19, 171), s(-18, 172), s(-25, 181), s(-7, 168), s(-36, 214), s(8, 178), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 39);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(78, 62);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(124, 7);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(103, -29);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(38, 37);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(63, -39);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 32);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(72, 32);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(92, 24);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(88, 6);

pub const TEMPO_BONUS: ScoreTuple = s(34, 29);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(8, -10), s(2, -4), s(8, -2), s(11, -7), s(10, -6), s(10, -8), s(12, -8), s(12, -10), s(11, -10), s(12, -8), s(9, -6), s(11, -15), s(9, -11), s(11, -12), s(7, -10), s(8, -13), s(6, -7), s(5, -8), s(2, -7), s(2, -11), s(5, -13), s(0, -9), s(-1, -12), s(-9, -7), s(-3, -15), s(-34, -4), s(-18, -4), s(-77, -2), 
],
// Bishop attacks
[
  s(8, 0), s(4, -1), s(9, -4), s(9, -3), s(9, -1), s(11, -5), s(10, -5), s(9, -5), s(12, -9), s(10, -7), s(9, -7), s(8, -5), s(7, -7), s(7, -7), s(7, -6), s(5, -5), s(6, -6), s(4, -7), s(3, -6), s(2, -6), s(1, -4), s(0, -9), s(-1, -3), s(-2, -8), s(-9, -4), s(-15, -5), s(2, -11), s(-24, -8), 
],
// Rook attacks
[
  s(3, 2), s(4, -2), s(9, -8), s(10, -12), s(8, -11), s(8, -10), s(8, -12), s(7, -10), s(8, -12), s(6, -11), s(6, -12), s(5, -14), s(4, -7), s(3, -5), s(3, -4), s(4, -3), s(3, -2), s(3, -2), s(3, -1), s(2, -1), s(2, -1), s(3, -1), s(1, 0), s(1, 0), s(0, 0), s(4, -2), s(-11, 4), s(14, -8), 
],
// Queen attacks
[
  s(2, -4), s(1, -5), s(4, -7), s(6, -12), s(5, -9), s(5, -7), s(6, -9), s(6, -8), s(6, -9), s(8, -9), s(7, -7), s(8, -11), s(8, -9), s(9, -8), s(8, -6), s(9, -10), s(9, -10), s(11, -9), s(10, -7), s(10, -7), s(10, -6), s(9, -7), s(10, -5), s(15, -12), s(14, -7), s(19, -13), s(25, -9), s(21, -22), 
],
// Pawn attacks
[
  s(-4, 11), s(7, -3), s(7, -7), s(3, -5), s(3, -6), s(3, -6), s(2, -5), s(3, -7), s(2, -6), s(2, -7), s(1, -8), s(2, -11), s(2, -21), s(3, -21), s(2, -26), s(1, -30), s(1, -28), s(2, -30), s(3, -30), s(1, -24), s(4, -27), s(5, -29), s(6, -25), s(11, -28), s(18, -24), s(0, -12), s(22, -14), s(15, -21), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-6, 6), s(3, 0), s(-1, 0), s(-1, -1), s(-1, 0), s(-1, 0), s(-2, 1), s(-2, 0), s(-2, 0), s(-3, 2), s(-3, 3), s(-2, 2), s(-4, 5), s(-3, 7), s(-2, 7), s(-3, 9), s(-2, 7), s(-1, 8), s(1, 9), s(1, 7), s(-1, 9), s(2, 9), s(0, 11), s(0, 13), s(1, 12), s(10, 13), s(9, 5), s(21, 17), 
],
// Bishop defenses
[
  s(-6, 11), s(0, -2), s(-3, 1), s(-3, 1), s(-2, 1), s(-2, 1), s(-4, 2), s(-3, 1), s(-3, 2), s(-3, 2), s(-2, 0), s(-2, 0), s(-2, 3), s(-3, 2), s(-1, 1), s(-1, 1), s(0, 0), s(0, 2), s(0, 3), s(2, 1), s(2, 1), s(0, 3), s(1, 2), s(1, 3), s(6, 3), s(4, 3), s(5, -1), s(10, 9), 
],
// Rook defenses
[
  s(-8, 10), s(-2, 5), s(-4, 7), s(-5, 6), s(-3, 5), s(-4, 6), s(-2, 4), s(-3, 4), s(-3, 4), s(-2, 4), s(-1, 3), s(-1, 3), s(0, 3), s(0, 4), s(0, 2), s(0, 3), s(1, 3), s(1, 4), s(1, 4), s(1, 4), s(0, 6), s(0, 5), s(1, 5), s(-2, 6), s(-1, 5), s(-3, 6), s(9, 1), s(-2, 5), 
],
// Queen defenses
[
  s(4, -16), s(-1, 4), s(0, 2), s(0, 2), s(0, 1), s(-1, 2), s(-2, 4), s(-1, 4), s(-1, 4), s(-1, 4), s(0, 1), s(0, 2), s(0, 3), s(-1, 5), s(0, 3), s(0, 4), s(0, 6), s(0, 5), s(0, 6), s(0, 6), s(0, 7), s(0, 7), s(0, 9), s(-6, 13), s(-1, 9), s(-6, 12), s(-17, 18), s(-10, 13), 
],
// Pawn defenses
[
  s(-13, -4), s(-24, 5), s(-19, 3), s(-15, 4), s(-13, 2), s(-13, 2), s(-13, 2), s(-11, 3), s(-9, 0), s(-7, -1), s(-4, -3), s(-4, -3), s(-2, -7), s(-2, -9), s(0, -14), s(1, -21), s(1, -23), s(1, -24), s(1, -26), s(3, -25), s(3, -24), s(6, -26), s(7, -24), s(10, -27), s(-3, -15), s(22, -25), s(-9, -16), s(-5, -12), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(72, 32),
  s(49, 37),
  s(47, 40),
  s(69, 54),
  s(70, 64),
  s(70, 88),
  s(73, 114),
  s(76, 113),
]);

pub const TROPISM_BONUS: [ScoreTuple; 160] = [
  s(-90, 26), s(66, -18), s(90, -13), s(99, -19), s(104, -19), s(100, -20), s(104, -21), s(106, -21), s(105, -50), s(102, -23), s(103, -26), s(97, -31), s(97, -23), s(97, -28), s(96, -26), s(96, -26), s(94, -27), s(93, -28), s(92, -22), s(90, -27), s(90, -20), s(85, -18), s(84, -21), s(83, -19), s(85, -22), s(79, -10), s(82, -16), s(79, -15), s(75, -7), s(73, -9), s(73, -8), s(71, -8), s(67, -5), s(71, -7), s(68, -8), s(63, 0), s(63, 2), s(61, 0), s(62, -2), s(57, 5), s(56, 2), s(58, 5), s(53, 8), s(52, 9), s(51, 7), s(51, 10), s(45, 14), s(45, 11), s(46, 14), s(44, 15), s(43, 15), s(42, 15), s(40, 18), s(38, 20), s(35, 23), s(35, 26), s(33, 23), s(27, 31), s(29, 29), s(26, 33), s(22, 33), s(25, 32), s(25, 33), s(19, 38), s(20, 39), s(19, 39), s(16, 42), s(14, 43), s(11, 46), s(14, 43), s(10, 46), s(6, 53), s(8, 44), s(9, 45), s(0, 56), s(1, 53), s(1, 54), s(0, 54), s(0, 57), s(-1, 57), s(-5, 63), s(-2, 62), s(-8, 66), s(-11, 69), s(-5, 65), s(-12, 64), s(-11, 74), s(-15, 68), s(-14, 62), s(-16, 73), s(-18, 79), s(-21, 83), s(-20, 80), s(-22, 70), s(-19, 67), s(-22, 92), s(-25, 80), s(-24, 85), s(-29, 94), s(-26, 89), s(-29, 100), s(-32, 93), s(-20, 81), s(-27, 99), s(-30, 98), s(-35, 80), s(-28, 98), s(-23, 90), s(-39, 112), s(-32, 98), s(-32, 88), s(-28, 105), s(-27, 85), s(-23, 80), s(-28, 24), s(-23, 99), s(-38, 50), s(-47, 27), s(-30, 6), s(-31, 60), s(-17, 47), s(-59, 74), s(-16, 15), s(-39, -4), s(-31, 45), s(-13, 21), s(-34, -8), s(-102, 25), s(-17, 4), s(-91, 10), s(-37, 11), s(-62, 9), s(-18, 2), s(-81, 1), s(-23, 0), s(-62, 0), s(-18, 1), s(19, 2), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];
pub const DEFENSIVE_TROPISM_BONUS: [ScoreTuple; 160] = [
  s(146, -1), s(10, 45), s(5, 49), s(8, 56), s(3, 53), s(6, 56), s(10, 59), s(8, 61), s(11, 61), s(12, 58), s(12, 61), s(12, 62), s(12, 60), s(14, 59), s(14, 58), s(17, 58), s(16, 58), s(18, 57), s(19, 57), s(20, 55), s(20, 55), s(24, 51), s(24, 52), s(22, 54), s(24, 55), s(25, 52), s(24, 54), s(28, 48), s(30, 47), s(28, 51), s(31, 44), s(33, 46), s(33, 45), s(36, 41), s(34, 42), s(33, 46), s(37, 38), s(40, 34), s(40, 37), s(38, 36), s(41, 36), s(42, 26), s(46, 23), s(47, 22), s(39, 33), s(50, 22), s(48, 25), s(44, 34), s(50, 3), s(56, 15), s(52, 16), s(50, 34), s(54, 21), s(57, 11), s(48, 23), s(50, 9), s(54, 16), s(61, -7), s(51, 28), s(53, 38), s(50, 47), s(55, 12), s(65, 20), s(67, -29), s(72, -12), s(68, -27), s(73, -56), s(76, 20), s(78, -4), s(64, -34), s(84, 31), s(75, 0), s(92, -31), s(73, 19), s(103, -15), s(43, -10), s(78, 19), s(96, 23), s(62, 19), s(107, -2), s(102, 7), s(75, -4), s(35, -4), s(72, 2), s(148, 3), s(80, 6), s(39, 2), s(0, 0), s(-6, -3), s(37, -2), s(7, 1), s(0, 0), s(0, 0), s(62, 0), s(34, 1), s(1, 1), s(0, 0), s(8, 2), s(1, 1), s(1, 1), s(1, 1), s(36, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(51, 8), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(0, 0), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];
