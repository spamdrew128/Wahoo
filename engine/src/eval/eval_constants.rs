#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(250, 294), s(333, 330), s(325, 390), s(388, 355), s(474, 346), s(298, 355), s(347, 308), s(312, 256), 
  s(334, 333), s(374, 363), s(468, 327), s(414, 360), s(433, 338), s(447, 328), s(421, 334), s(373, 303), 
  s(352, 335), s(445, 341), s(454, 371), s(463, 363), s(440, 363), s(534, 339), s(446, 327), s(405, 308), 
  s(422, 339), s(444, 362), s(443, 389), s(490, 383), s(459, 384), s(492, 371), s(442, 360), s(449, 321), 
  s(411, 349), s(435, 352), s(448, 384), s(460, 384), s(458, 382), s(455, 378), s(468, 354), s(422, 342), 
  s(408, 330), s(415, 361), s(438, 358), s(439, 370), s(452, 373), s(444, 348), s(444, 335), s(407, 337), 
  s(389, 303), s(389, 328), s(408, 339), s(429, 339), s(428, 342), s(429, 332), s(426, 308), s(409, 304), 
  s(301, 294), s(384, 307), s(380, 314), s(391, 330), s(401, 323), s(397, 316), s(384, 316), s(396, 261), 
]),
// Bishop PST
Pst::new([
  s(418, 400), s(405, 392), s(313, 410), s(269, 417), s(331, 408), s(330, 404), s(415, 397), s(417, 388), 
  s(411, 392), s(427, 397), s(409, 388), s(384, 386), s(416, 385), s(456, 385), s(411, 398), s(380, 384), 
  s(435, 386), s(469, 381), s(470, 385), s(458, 376), s(470, 373), s(498, 382), s(460, 389), s(468, 375), 
  s(428, 385), s(453, 388), s(453, 401), s(502, 397), s(466, 403), s(481, 390), s(447, 383), s(439, 389), 
  s(438, 377), s(451, 388), s(458, 397), s(475, 402), s(476, 391), s(447, 395), s(440, 382), s(432, 372), 
  s(443, 372), s(463, 383), s(462, 396), s(458, 392), s(456, 400), s(467, 386), s(448, 384), s(437, 372), 
  s(458, 354), s(461, 359), s(460, 366), s(447, 377), s(448, 378), s(467, 371), s(472, 361), s(444, 350), 
  s(420, 359), s(446, 374), s(427, 376), s(423, 376), s(438, 372), s(419, 385), s(438, 365), s(426, 351), 
]),
// Rook PST
Pst::new([
  s(663, 705), s(690, 695), s(640, 718), s(692, 699), s(684, 700), s(616, 715), s(656, 700), s(685, 694), 
  s(633, 708), s(640, 710), s(667, 706), s(685, 699), s(701, 681), s(673, 693), s(638, 704), s(636, 702), 
  s(605, 697), s(640, 695), s(635, 699), s(654, 691), s(661, 681), s(648, 682), s(696, 673), s(631, 677), 
  s(579, 699), s(627, 685), s(617, 701), s(635, 687), s(637, 682), s(619, 692), s(625, 677), s(597, 687), 
  s(570, 689), s(583, 692), s(599, 691), s(613, 685), s(636, 670), s(593, 681), s(627, 667), s(576, 678), 
  s(572, 671), s(589, 679), s(600, 669), s(609, 664), s(605, 671), s(614, 660), s(611, 665), s(576, 658), 
  s(558, 674), s(590, 664), s(593, 668), s(607, 667), s(616, 658), s(600, 664), s(607, 657), s(524, 674), 
  s(580, 668), s(587, 669), s(592, 667), s(600, 663), s(600, 661), s(590, 664), s(560, 671), s(574, 649), 
]),
// Queen PST
Pst::new([
  s(1107, 1235), s(1118, 1256), s(1106, 1286), s(1134, 1273), s(1207, 1236), s(1155, 1267), s(1220, 1200), s(1195, 1243), 
  s(1126, 1123), s(1095, 1177), s(1124, 1192), s(1106, 1225), s(1040, 1284), s(1141, 1179), s(1169, 1153), s(1213, 1118), 
  s(1141, 1106), s(1130, 1130), s(1148, 1129), s(1121, 1194), s(1171, 1168), s(1173, 1151), s(1175, 1103), s(1158, 1140), 
  s(1109, 1146), s(1133, 1133), s(1111, 1151), s(1115, 1178), s(1131, 1166), s(1147, 1143), s(1143, 1162), s(1147, 1129), 
  s(1137, 1096), s(1112, 1146), s(1131, 1141), s(1119, 1180), s(1135, 1146), s(1126, 1133), s(1153, 1123), s(1135, 1132), 
  s(1131, 1089), s(1148, 1083), s(1138, 1119), s(1138, 1113), s(1136, 1138), s(1147, 1098), s(1155, 1102), s(1145, 1105), 
  s(1132, 1059), s(1145, 1068), s(1155, 1064), s(1154, 1067), s(1155, 1076), s(1163, 1052), s(1148, 1038), s(1162, 1027), 
  s(1139, 1051), s(1126, 1048), s(1136, 1044), s(1152, 1017), s(1139, 1045), s(1114, 1049), s(1128, 1031), s(1125, 1003), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(157, 297), s(150, 291), s(142, 283), s(172, 258), s(137, 273), s(172, 248), s(81, 290), s(65, 310), 
  s(98, 166), s(101, 156), s(129, 151), s(137, 140), s(186, 127), s(199, 130), s(179, 149), s(139, 153), 
  s(85, 146), s(100, 131), s(105, 130), s(126, 108), s(131, 118), s(127, 119), s(110, 125), s(93, 131), 
  s(80, 125), s(78, 122), s(102, 116), s(128, 106), s(123, 108), s(123, 108), s(94, 107), s(86, 111), 
  s(87, 118), s(93, 115), s(105, 116), s(110, 124), s(116, 127), s(121, 119), s(120, 101), s(101, 106), 
  s(78, 128), s(92, 116), s(84, 133), s(101, 129), s(96, 143), s(135, 124), s(119, 106), s(90, 106), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-58, -7), s(56, 56), s(120, 65), s(-22, 98), s(-78, 119), s(-106, 138), s(67, 102), s(45, 47), 
  s(60, 103), s(94, 164), s(-26, 176), s(178, 144), s(54, 175), s(9, 200), s(60, 178), s(11, 141), 
  s(65, 51), s(122, 79), s(195, 68), s(122, 72), s(146, 83), s(223, 91), s(237, 93), s(94, 36), 
  s(151, -17), s(132, 40), s(150, 40), s(104, 52), s(65, 58), s(109, 47), s(105, 42), s(28, 0), 
  s(-67, -13), s(76, -6), s(57, 21), s(-1, 43), s(-8, 45), s(29, 21), s(9, 4), s(-40, -23), 
  s(-41, -53), s(-55, -22), s(-86, 4), s(-110, 15), s(-92, 13), s(-73, 0), s(-51, -21), s(-76, -43), 
  s(-16, -77), s(-28, -46), s(-86, -16), s(-128, -2), s(-115, -2), s(-83, -17), s(-29, -44), s(-29, -69), 
  s(-13, -117), s(26, -88), s(-5, -61), s(-129, -23), s(-50, -54), s(-77, -35), s(3, -74), s(-4, -108), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(57, 197), s(50, 191), s(42, 183), s(72, 158), s(37, 173), s(72, 148), s(-18, 190), s(-34, 210), 
  s(43, 207), s(28, 211), s(16, 174), s(17, 143), s(-29, 142), s(3, 154), s(-63, 180), s(-63, 202), 
  s(27, 116), s(10, 105), s(19, 82), s(4, 77), s(-1, 63), s(34, 65), s(-28, 109), s(-17, 108), 
  s(7, 66), s(-2, 59), s(-24, 45), s(-19, 42), s(-37, 45), s(-32, 47), s(6, 63), s(6, 58), 
  s(8, 23), s(-2, 29), s(-26, 23), s(-38, 26), s(-26, 13), s(12, 8), s(-16, 37), s(17, 23), 
  s(-1, 16), s(8, 22), s(0, 7), s(-30, 20), s(-22, 11), s(-18, 15), s(-13, 29), s(-12, 25), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(36, -251),
  s(21, -150),
  s(-2, -60),
  s(8, -35),
  s(-7, 1),
  s(-2, -6),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(41, -26),
  s(13, -27),
  s(-4, -27),
  s(-18, -15),
  s(-32, -17),
  s(-15, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(91, 317),
  s(209, 125),
  s(48, 50),
  s(19, 14),
  s(-5, -7),
  s(5, -10),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(31, 67);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(6, 50), s(6, 56), s(3, 59), s(8, 55), s(7, 59), s(7, 55), s(1, 54), s(3, 41), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(4, 16), s(10, 33), s(11, 45), s(13, 53), s(13, 60), s(13, 64), s(11, 64), s(2, 70), s(6, 64), s(10, 58), s(27, 56), s(-32, 91), s(7, 51), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(4, 64), s(7, 81), s(10, 98), s(10, 109), s(13, 119), s(14, 126), s(18, 127), s(26, 130), s(30, 132), s(31, 134), s(40, 135), s(38, 141), s(53, 131), s(42, 129), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(33, 271), s(35, 273), s(35, 302), s(42, 306), s(46, 306), s(49, 312), s(48, 340), s(51, 346), s(57, 345), s(59, 349), s(63, 359), s(59, 358), s(68, 360), s(70, 363), s(68, 369), s(67, 377), s(83, 355), s(90, 355), s(100, 346), s(105, 346), s(157, 317), s(126, 318), s(217, 275), s(254, 228), s(274, 237), s(188, 272), s(199, 282), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(19, 24), s(31, 34), s(40, 39), s(51, 41), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 10), s(16, 14), s(21, 19), s(26, 20), s(26, 21), s(30, 19), s(33, 27), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(6, 2), s(8, 11), s(17, 14), s(26, 17), s(24, 27), s(36, 26), s(38, 36), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-10, 85), s(-7, 95), s(-5, 93), s(-6, 108), s(-8, 123), s(-9, 120), s(-10, 127), s(-14, 137), s(-18, 157), s(-14, 152), s(-42, 188), s(-28, 177), s(-48, 238), s(23, 163), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(93, 34);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(90, 61);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(148, -3);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(100, 2);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(42, 40);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(86, 21);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(61, -29);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 38);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(74, 31);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(81, 51);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(112, -8);

pub const TEMPO_BONUS: ScoreTuple = s(40, 29);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks values
[
  s(-22, -32), s(5, -51), s(18, 0), s(19, -11), s(18, -4), s(19, -9), s(18, 2), s(20, -12), s(16, 0), s(20, -7), s(14, 17), s(20, -11), s(14, -77), s(14, -15), s(17, -28), s(14, -26), s(14, -24), s(10, -14), s(6, -10), s(2, -19), s(8, -16), s(5, -17), s(-3, -19), s(-16, -18), s(-3, -23), s(-40, -33), s(0, -130), s(-31, -31), 
],
// Bishop attacks values
[
  s(2, 97), s(8, 3), s(17, 0), s(17, -3), s(14, 3), s(18, -3), s(15, -5), s(14, 0), s(18, -10), s(14, -8), s(14, 0), s(13, -7), s(15, 3), s(13, -54), s(14, -7), s(9, -9), s(11, -12), s(8, -11), s(11, -11), s(8, -15), s(7, -15), s(9, -18), s(0, -10), s(7, -19), s(-9, -11), s(0, -28), s(-14, -44), s(74, -33), 
],
// Rook attacks values
[
  s(31, 60), s(-10, -5), s(16, -7), s(15, -17), s(12, -14), s(13, -24), s(14, -13), s(11, -10), s(13, -15), s(11, -16), s(9, -14), s(8, -3), s(6, 1), s(5, 0), s(7, -1), s(6, -3), s(6, -4), s(7, -5), s(8, -6), s(5, -3), s(4, -3), s(4, -2), s(1, -2), s(0, 0), s(4, -2), s(1, -1), s(-2, 0), s(-167, 1), 
],
// Queen attacks values
[
  s(-7, 54), s(16, -37), s(10, -36), s(10, -95), s(11, -20), s(11, -42), s(11, -84), s(12, -7), s(12, -28), s(15, -10), s(10, 7), s(14, 1), s(14, 5), s(13, -5), s(14, -3), s(15, -23), s(16, -17), s(15, -12), s(14, -15), s(14, -13), s(14, -8), s(13, -11), s(16, -8), s(13, -10), s(18, -8), s(0, 0), s(20, -6), s(-57, 1), 
],
// Pawn attacks values
[
  s(1, 60), s(26, 3), s(12, 0), s(5, -4), s(3, -5), s(1, -5), s(4, -6), s(6, -12), s(1, -6), s(4, -12), s(0, -8), s(1, -36), s(3, -54), s(3, -42), s(2, -35), s(1, -40), s(1, -39), s(4, -38), s(2, -41), s(2, -32), s(6, -35), s(8, -36), s(11, -33), s(9, -36), s(15, -29), s(14, -34), s(16, -18), s(49, -21), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses values
[
  s(-17, 56), s(8, 5), s(-13, 3), s(-5, 0), s(-10, 1), s(-10, -1), s(-8, 1), s(-7, -2), s(-6, -1), s(-10, 2), s(-5, -77), s(-10, 13), s(-7, -35), s(-4, 2), s(-6, 9), s(-8, 10), s(-8, 9), s(-6, 8), s(-2, 10), s(-1, 11), s(-3, 12), s(0, 12), s(-8, 15), s(-2, 18), s(-5, 16), s(6, 32), s(27, 15), s(-17, 34), 
],
// Bishop defenses values
[
  s(22, -2), s(-1, 1), s(-10, 1), s(-13, 1), s(-12, 0), s(-8, 0), s(-12, 1), s(-11, 1), s(-11, 3), s(-9, 3), s(-6, -27), s(-8, 9), s(-7, -1), s(-9, 4), s(-5, 0), s(-8, 3), s(-4, 0), s(0, 0), s(-6, 3), s(0, 3), s(0, 0), s(-3, 3), s(0, 4), s(-9, 8), s(-1, 7), s(-2, 9), s(18, -5), s(-90, 18), 
],
// Rook defenses values
[
  s(-121, -69), s(1, 3), s(-16, 8), s(-10, 6), s(-6, 6), s(-10, 6), s(-3, 3), s(-5, 2), s(-5, 2), s(-6, 4), s(-2, -58), s(-3, -2), s(0, -3), s(0, -2), s(-1, 0), s(0, 2), s(0, 3), s(0, 3), s(0, 4), s(0, 3), s(-2, 6), s(0, 4), s(0, 5), s(0, 4), s(0, 5), s(5, 3), s(3, 3), s(-13, 5), 
],
// Queen defenses values
[
  s(0, -42), s(-37, -89), s(-2, -48), s(-2, -61), s(0, -19), s(-1, -102), s(-5, 0), s(-2, 4), s(-1, -1), s(-3, 1), s(-2, -3), s(-2, 0), s(-2, -44), s(-2, 10), s(-1, 2), s(0, 4), s(-1, 6), s(-1, 5), s(0, 7), s(0, 4), s(0, 6), s(-1, 7), s(-5, 11), s(-3, 10), s(-4, 8), s(13, -3), s(-20, 12), s(0, 8), 
],
// Pawn defenses values
[
  s(-22, -112), s(-56, -3), s(-29, -7), s(-23, -1), s(-19, -3), s(-16, -4), s(-17, -4), s(-17, 0), s(-12, -4), s(-11, -5), s(-5, -8), s(-4, -35), s(-4, -31), s(-3, -49), s(-2, -41), s(1, -45), s(0, -36), s(-1, -35), s(-1, -31), s(1, -32), s(0, -33), s(6, -35), s(9, -34), s(19, -38), s(-2, -21), s(23, -52), s(-3, -18), s(22, -20), 
],
];


pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(100, 78),
  s(79, 78),
  s(86, 87),
  s(134, 100),
  s(150, 109),
  s(145, 129),
  s(141, 157),
  s(138, 142),
]);

