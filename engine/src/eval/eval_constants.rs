#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(245, 293), s(338, 325), s(329, 386), s(385, 353), s(487, 340), s(296, 353), s(352, 306), s(311, 251), 
  s(333, 333), s(374, 360), s(466, 325), s(412, 358), s(432, 334), s(450, 325), s(422, 331), s(379, 299), 
  s(357, 332), s(442, 339), s(451, 372), s(461, 363), s(445, 359), s(538, 336), s(447, 324), s(407, 306), 
  s(421, 338), s(441, 362), s(440, 390), s(487, 383), s(454, 384), s(490, 371), s(440, 360), s(450, 319), 
  s(408, 349), s(434, 351), s(445, 385), s(456, 385), s(455, 382), s(451, 378), s(466, 353), s(419, 342), 
  s(404, 331), s(412, 361), s(434, 360), s(435, 372), s(449, 374), s(439, 349), s(440, 333), s(402, 336), 
  s(385, 302), s(385, 326), s(405, 338), s(427, 338), s(423, 342), s(424, 330), s(417, 305), s(404, 304), 
  s(298, 291), s(380, 302), s(371, 313), s(383, 328), s(393, 320), s(386, 315), s(379, 312), s(393, 261), 
]),
// Bishop PST
Pst::new([
  s(410, 398), s(399, 391), s(312, 409), s(275, 412), s(339, 403), s(335, 402), s(411, 393), s(407, 387), 
  s(411, 388), s(426, 394), s(407, 385), s(383, 382), s(422, 381), s(456, 381), s(411, 393), s(377, 381), 
  s(434, 383), s(469, 377), s(470, 382), s(461, 372), s(472, 370), s(503, 377), s(470, 381), s(470, 370), 
  s(427, 382), s(452, 385), s(454, 397), s(501, 395), s(465, 401), s(483, 386), s(448, 378), s(439, 384), 
  s(434, 373), s(449, 385), s(457, 395), s(474, 400), s(477, 388), s(444, 392), s(441, 375), s(428, 369), 
  s(440, 370), s(459, 382), s(459, 393), s(457, 390), s(454, 397), s(466, 382), s(443, 379), s(434, 369), 
  s(454, 353), s(457, 357), s(459, 362), s(443, 374), s(448, 373), s(460, 366), s(469, 353), s(438, 347), 
  s(414, 356), s(440, 370), s(421, 368), s(415, 371), s(429, 368), s(413, 378), s(427, 362), s(422, 349), 
]),
// Rook PST
Pst::new([
  s(670, 717), s(694, 708), s(641, 731), s(696, 711), s(683, 714), s(632, 723), s(669, 711), s(691, 706), 
  s(640, 721), s(645, 724), s(672, 719), s(693, 711), s(704, 695), s(692, 702), s(647, 718), s(651, 713), 
  s(610, 712), s(645, 709), s(643, 712), s(659, 704), s(664, 694), s(664, 689), s(708, 683), s(646, 687), 
  s(580, 715), s(628, 700), s(619, 716), s(642, 698), s(640, 693), s(631, 699), s(632, 688), s(606, 698), 
  s(569, 706), s(583, 708), s(602, 706), s(615, 699), s(640, 682), s(601, 688), s(629, 678), s(580, 689), 
  s(570, 690), s(588, 696), s(602, 686), s(610, 680), s(607, 686), s(617, 670), s(614, 674), s(579, 670), 
  s(556, 693), s(591, 683), s(596, 685), s(608, 685), s(616, 674), s(606, 672), s(610, 667), s(525, 688), 
  s(580, 686), s(591, 687), s(602, 684), s(610, 677), s(610, 672), s(593, 676), s(564, 685), s(576, 663), 
]),
// Queen PST
Pst::new([
  s(1103, 1228), s(1108, 1254), s(1091, 1286), s(1110, 1280), s(1195, 1232), s(1147, 1267), s(1221, 1200), s(1181, 1247), 
  s(1126, 1134), s(1098, 1188), s(1121, 1209), s(1101, 1242), s(1032, 1297), s(1138, 1194), s(1165, 1176), s(1215, 1133), 
  s(1144, 1119), s(1135, 1144), s(1155, 1141), s(1122, 1205), s(1168, 1183), s(1176, 1165), s(1172, 1124), s(1152, 1165), 
  s(1112, 1158), s(1136, 1148), s(1112, 1162), s(1116, 1191), s(1133, 1177), s(1149, 1159), s(1142, 1178), s(1146, 1143), 
  s(1143, 1109), s(1116, 1161), s(1139, 1150), s(1126, 1192), s(1142, 1161), s(1130, 1147), s(1154, 1137), s(1136, 1143), 
  s(1135, 1101), s(1153, 1095), s(1149, 1131), s(1148, 1128), s(1147, 1150), s(1154, 1113), s(1159, 1117), s(1148, 1120), 
  s(1140, 1073), s(1152, 1082), s(1162, 1078), s(1167, 1075), s(1170, 1086), s(1177, 1067), s(1159, 1053), s(1174, 1035), 
  s(1154, 1059), s(1142, 1062), s(1153, 1061), s(1161, 1055), s(1155, 1068), s(1127, 1065), s(1145, 1042), s(1136, 1019), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(158, 298), s(149, 294), s(139, 286), s(169, 261), s(135, 276), s(173, 251), s(91, 292), s(68, 311), 
  s(96, 166), s(102, 157), s(130, 151), s(136, 140), s(189, 128), s(204, 129), s(189, 147), s(140, 154), 
  s(83, 146), s(98, 132), s(105, 130), s(125, 108), s(133, 117), s(128, 120), s(113, 124), s(93, 130), 
  s(79, 124), s(76, 123), s(101, 116), s(127, 106), s(124, 107), s(121, 107), s(93, 105), s(87, 109), 
  s(85, 118), s(92, 116), s(104, 116), s(110, 124), s(117, 126), s(119, 119), s(122, 98), s(101, 104), 
  s(76, 127), s(91, 115), s(84, 130), s(101, 125), s(98, 140), s(134, 119), s(123, 100), s(90, 102), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-81, -102), s(62, -47), s(113, -31), s(-26, 4), s(-99, 26), s(-98, 37), s(57, 4), s(49, -56), 
  s(86, -30), s(27, 52), s(-71, 65), s(105, 37), s(-4, 66), s(-51, 93), s(8, 65), s(-10, 14), 
  s(1, 10), s(43, 47), s(90, 49), s(11, 55), s(53, 61), s(128, 73), s(161, 59), s(41, 1), 
  s(47, -17), s(12, 49), s(0, 57), s(-52, 72), s(-88, 76), s(-45, 66), s(-12, 52), s(-69, 3), 
  s(-122, -1), s(1, 13), s(-40, 47), s(-102, 68), s(-116, 70), s(-65, 44), s(-57, 23), s(-93, -9), 
  s(21, -33), s(0, 5), s(-37, 32), s(-68, 43), s(-43, 40), s(-29, 24), s(8, 1), s(-12, -26), 
  s(53, -56), s(36, -16), s(-24, 13), s(-68, 28), s(-54, 27), s(-24, 10), s(37, -20), s(37, -52), 
  s(32, -100), s(68, -70), s(33, -36), s(-90, 4), s(-8, -29), s(-39, -11), s(46, -58), s(44, -99), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(58, 198), s(49, 194), s(39, 186), s(69, 161), s(35, 176), s(73, 151), s(-8, 192), s(-31, 211), 
  s(48, 207), s(29, 212), s(14, 177), s(16, 144), s(-31, 145), s(-1, 159), s(-64, 185), s(-60, 203), 
  s(27, 116), s(10, 106), s(19, 83), s(2, 79), s(-2, 66), s(36, 66), s(-24, 113), s(-17, 109), 
  s(5, 67), s(-4, 60), s(-25, 46), s(-21, 43), s(-39, 47), s(-35, 49), s(2, 67), s(6, 60), 
  s(7, 23), s(-2, 28), s(-27, 23), s(-40, 27), s(-28, 13), s(3, 10), s(-23, 40), s(18, 23), 
  s(-1, 16), s(10, 20), s(1, 6), s(-29, 18), s(-22, 10), s(-18, 15), s(-13, 27), s(-13, 25), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(45, -255),
  s(22, -150),
  s(0, -61),
  s(10, -36),
  s(-6, 1),
  s(0, -9),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(40, -25),
  s(12, -26),
  s(-3, -26),
  s(-17, -14),
  s(-33, -17),
  s(-16, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(100, 316),
  s(221, 126),
  s(49, 50),
  s(19, 14),
  s(-6, -8),
  s(6, -9),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(31, 68);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(5, 51), s(5, 58), s(1, 61), s(6, 56), s(5, 60), s(5, 56), s(0, 53), s(4, 38), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(5, 19), s(10, 36), s(11, 47), s(12, 56), s(10, 63), s(11, 67), s(7, 67), s(0, 73), s(3, 66), s(7, 59), s(19, 58), s(-40, 94), s(0, 51), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(4, 62), s(7, 77), s(13, 82), s(11, 92), s(15, 106), s(16, 112), s(17, 114), s(26, 114), s(25, 117), s(25, 119), s(31, 121), s(35, 124), s(36, 118), s(19, 120), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(15, 341), s(20, 325), s(21, 333), s(31, 325), s(35, 329), s(38, 332), s(39, 348), s(42, 354), s(48, 353), s(51, 357), s(54, 369), s(54, 365), s(58, 366), s(61, 367), s(59, 377), s(62, 382), s(75, 363), s(81, 364), s(104, 350), s(84, 365), s(145, 329), s(108, 337), s(207, 286), s(221, 249), s(252, 250), s(185, 283), s(182, 279), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(20, 23), s(32, 34), s(42, 38), s(53, 40), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 11), s(17, 15), s(25, 19), s(30, 20), s(32, 21), s(36, 17), s(40, 26), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 1), s(7, 9), s(17, 12), s(27, 15), s(26, 23), s(38, 22), s(42, 31), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-2, 64), s(-3, 77), s(0, 71), s(-3, 88), s(-4, 101), s(-6, 102), s(-7, 109), s(-11, 121), s(-17, 137), s(-5, 129), s(-38, 164), s(-25, 155), s(-48, 214), s(8, 146), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(93, 33);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(91, 60);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(147, -3);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(100, 4);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(41, 40);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(85, 21);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(61, -30);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 38);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(77, 29);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(81, 54);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(114, -3);

pub const TEMPO_BONUS: ScoreTuple = s(40, 29);

// KING SAFETY FEATURES
pub const ENEMY_VIRT_MOBILITY: [ScoreTuple; 28] = [
  s(-24, -22), s(-2, -4), s(34, -5), s(50, 28), s(63, -42), s(66, 0), s(70, 86), s(80, 101), s(85, -54), s(91, 69), s(94, 58), s(98, 62), s(103, 49), s(102, 64), s(106, 68), s(107, 68), s(106, 71), s(107, 81), s(102, 89), s(98, 96), s(100, 96), s(103, 96), s(99, 105), s(81, 111), s(95, 117), s(75, 117), s(95, 120), s(-71, 125), 
];

pub const ATTACKS: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(15, -26), s(13, -19), s(7, -4), s(13, -8), s(0, -40), 
];

pub const DEFENSES: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(-7, 13), s(-7, 4), s(-3, 4), s(-1, 5), s(-9, -24), 
];

pub const KING_RANK_PRT: Prt = Prt::new([
  s(0, 0),
  s(100, 316),
  s(221, 126),
  s(49, 50),
  s(19, 14),
  s(-6, -8),
  s(6, -9),
  s(0, 0),
]);

pub const BIAS: ScoreTuple = s(0, 0);
