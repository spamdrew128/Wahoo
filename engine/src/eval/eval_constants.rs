#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(188, 304), s(225, 354), s(294, 377), s(346, 355), s(355, 371), s(246, 351), s(218, 356), s(247, 265), 
  s(317, 340), s(350, 354), s(375, 341), s(361, 354), s(384, 336), s(379, 336), s(333, 349), s(340, 312), 
  s(341, 336), s(382, 344), s(402, 366), s(399, 365), s(385, 365), s(426, 346), s(371, 337), s(360, 316), 
  s(370, 344), s(383, 362), s(398, 381), s(430, 381), s(403, 381), s(419, 375), s(380, 360), s(391, 330), 
  s(366, 350), s(379, 355), s(392, 382), s(405, 380), s(402, 384), s(399, 373), s(396, 355), s(369, 350), 
  s(355, 330), s(366, 350), s(383, 356), s(383, 370), s(398, 371), s(387, 346), s(383, 341), s(358, 341), 
  s(337, 311), s(347, 329), s(356, 342), s(374, 340), s(375, 341), s(369, 338), s(355, 321), s(354, 328), 
  s(298, 300), s(332, 323), s(335, 321), s(345, 330), s(350, 329), s(351, 316), s(329, 334), s(338, 297), 
]),
// Bishop PST
Pst::new([
  s(361, 402), s(336, 396), s(286, 402), s(259, 408), s(279, 405), s(271, 404), s(334, 404), s(351, 382), 
  s(372, 372), s(380, 383), s(378, 375), s(332, 382), s(347, 377), s(372, 384), s(343, 391), s(335, 376), 
  s(386, 386), s(409, 375), s(398, 382), s(398, 370), s(384, 374), s(403, 388), s(381, 387), s(390, 376), 
  s(378, 378), s(399, 380), s(402, 383), s(434, 392), s(407, 392), s(413, 386), s(386, 379), s(379, 376), 
  s(387, 366), s(395, 380), s(402, 388), s(420, 390), s(415, 388), s(392, 386), s(376, 381), s(390, 355), 
  s(392, 366), s(413, 376), s(415, 381), s(406, 383), s(403, 390), s(404, 381), s(401, 372), s(396, 359), 
  s(411, 362), s(411, 355), s(417, 358), s(397, 370), s(399, 372), s(409, 368), s(416, 365), s(402, 346), 
  s(383, 355), s(411, 376), s(383, 372), s(380, 366), s(385, 367), s(376, 379), s(394, 358), s(399, 345), 
]),
// Rook PST
Pst::new([
  s(585, 694), s(598, 688), s(568, 705), s(587, 692), s(604, 684), s(560, 697), s(563, 702), s(607, 681), 
  s(562, 693), s(562, 697), s(570, 702), s(583, 689), s(569, 687), s(571, 691), s(569, 686), s(577, 685), 
  s(548, 683), s(565, 684), s(559, 682), s(559, 682), s(572, 677), s(558, 676), s(610, 669), s(560, 670), 
  s(526, 687), s(551, 675), s(541, 691), s(544, 682), s(551, 671), s(534, 677), s(542, 674), s(519, 676), 
  s(518, 670), s(523, 674), s(530, 676), s(543, 667), s(544, 667), s(506, 677), s(535, 669), s(507, 667), 
  s(519, 659), s(526, 663), s(535, 652), s(535, 655), s(539, 654), s(533, 652), s(551, 641), s(521, 641), 
  s(509, 654), s(529, 652), s(538, 654), s(541, 651), s(545, 642), s(530, 649), s(556, 634), s(489, 651), 
  s(524, 657), s(527, 654), s(531, 656), s(539, 650), s(537, 646), s(526, 651), s(516, 653), s(514, 641), 
]),
// Queen PST
Pst::new([
  s(987, 1237), s(1015, 1229), s(1016, 1259), s(1042, 1242), s(1034, 1254), s(1040, 1237), s(1117, 1159), s(1055, 1214), 
  s(1034, 1105), s(1010, 1132), s(1026, 1146), s(1001, 1183), s(980, 1210), s(1031, 1151), s(1064, 1105), s(1094, 1105), 
  s(1038, 1089), s(1020, 1103), s(1035, 1114), s(1024, 1143), s(1035, 1134), s(1050, 1111), s(1068, 1061), s(1063, 1078), 
  s(1028, 1099), s(1024, 1101), s(1028, 1102), s(1024, 1122), s(1040, 1113), s(1045, 1095), s(1049, 1100), s(1049, 1079), 
  s(1036, 1063), s(1027, 1099), s(1029, 1108), s(1027, 1131), s(1036, 1116), s(1030, 1095), s(1048, 1074), s(1047, 1068), 
  s(1039, 1057), s(1046, 1072), s(1039, 1094), s(1035, 1097), s(1033, 1108), s(1051, 1072), s(1060, 1064), s(1052, 1052), 
  s(1044, 1040), s(1043, 1049), s(1053, 1042), s(1054, 1050), s(1051, 1060), s(1060, 1022), s(1058, 1028), s(1065, 997), 
  s(1033, 1041), s(1033, 1036), s(1036, 1034), s(1046, 1023), s(1043, 1025), s(1025, 1026), s(1042, 994), s(1033, 1019), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(149, 277), s(145, 269), s(148, 266), s(174, 242), s(139, 247), s(156, 240), s(91, 271), s(77, 290), 
  s(89, 167), s(83, 159), s(115, 151), s(116, 145), s(129, 125), s(178, 133), s(155, 160), s(127, 155), 
  s(68, 152), s(76, 134), s(86, 130), s(98, 110), s(111, 118), s(111, 118), s(88, 127), s(86, 127), 
  s(65, 126), s(64, 122), s(83, 118), s(99, 111), s(97, 113), s(98, 111), s(74, 109), s(77, 110), 
  s(67, 123), s(76, 117), s(84, 119), s(90, 125), s(90, 129), s(93, 121), s(88, 107), s(80, 108), 
  s(65, 131), s(71, 124), s(71, 132), s(78, 134), s(73, 145), s(105, 126), s(87, 112), s(73, 110), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-45, 42), s(-41, 100), s(15, 103), s(-66, 141), s(-14, 126), s(-39, 138), s(-7, 138), s(58, 42), 
  s(-67, 123), s(-10, 160), s(-72, 169), s(99, 148), s(16, 159), s(-10, 188), s(2, 174), s(-55, 153), 
  s(-116, 63), s(11, 76), s(2, 87), s(-17, 93), s(31, 96), s(115, 87), s(64, 91), s(-34, 56), 
  s(-33, -1), s(5, 33), s(-4, 42), s(-41, 57), s(-56, 58), s(-4, 42), s(-31, 38), s(-116, 11), 
  s(-65, -33), s(1, -6), s(-17, 17), s(-45, 34), s(-40, 33), s(-5, 8), s(-50, -1), s(-128, -15), 
  s(-47, -53), s(2, -34), s(-22, -11), s(-23, -1), s(-19, -3), s(-12, -15), s(-13, -34), s(-78, -45), 
  s(13, -69), s(2, -39), s(-13, -26), s(-47, -15), s(-41, -14), s(-19, -28), s(19, -48), s(10, -72), 
  s(32, -103), s(66, -77), s(41, -51), s(-49, -29), s(6, -44), s(-13, -36), s(47, -65), s(38, -103), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(49, 177), s(45, 169), s(48, 166), s(74, 142), s(39, 147), s(56, 140), s(-8, 171), s(-22, 190), 
  s(24, 202), s(41, 201), s(26, 163), s(29, 128), s(21, 144), s(0, 146), s(-49, 167), s(-64, 200), 
  s(23, 110), s(21, 104), s(23, 82), s(10, 75), s(0, 67), s(21, 72), s(-18, 103), s(-16, 108), 
  s(9, 66), s(7, 59), s(-13, 46), s(-6, 39), s(-21, 40), s(-7, 43), s(1, 65), s(-4, 63), 
  s(6, 20), s(-8, 30), s(-28, 26), s(-18, 17), s(-22, 16), s(-6, 18), s(-16, 46), s(12, 26), 
  s(-1, 16), s(-3, 21), s(-13, 11), s(-12, 9), s(-5, 3), s(-14, 13), s(0, 20), s(-3, 22), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-31, -195),
  s(8, -135),
  s(0, -61),
  s(-9, -26),
  s(-11, 0),
  s(-19, 1),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(42, -21),
  s(12, -30),
  s(0, -28),
  s(-15, -16),
  s(-27, -19),
  s(-14, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(94, 272),
  s(169, 162),
  s(53, 50),
  s(18, 16),
  s(-6, -5),
  s(3, -11),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(24, 71);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(9, 52), s(10, 67), s(8, 70), s(9, 69), s(8, 73), s(8, 70), s(6, 67), s(4, 59), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(2, 25), s(9, 44), s(11, 56), s(14, 66), s(14, 74), s(15, 77), s(13, 80), s(8, 85), s(10, 80), s(11, 75), s(17, 76), s(-25, 105), s(8, 67), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(1, 78), s(2, 93), s(2, 116), s(1, 124), s(3, 135), s(5, 140), s(6, 147), s(11, 150), s(13, 154), s(14, 157), s(18, 161), s(22, 164), s(30, 159), s(28, 156), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(59, 144), s(59, 201), s(64, 244), s(69, 263), s(72, 274), s(77, 276), s(78, 297), s(81, 303), s(85, 303), s(89, 306), s(89, 317), s(92, 312), s(96, 316), s(96, 319), s(101, 320), s(99, 324), s(110, 316), s(115, 317), s(137, 297), s(144, 299), s(194, 265), s(179, 263), s(206, 245), s(237, 232), s(238, 228), s(169, 235), s(147, 231), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(14, 23), s(24, 33), s(34, 39), s(43, 43), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 12), s(11, 17), s(16, 19), s(20, 24), s(21, 25), s(25, 24), s(28, 30), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 1), s(11, 7), s(18, 12), s(24, 19), s(29, 24), s(37, 24), s(42, 30), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 99), s(-12, 111), s(-13, 115), s(-13, 130), s(-14, 143), s(-16, 145), s(-17, 153), s(-17, 160), s(-18, 171), s(-17, 170), s(-23, 179), s(-4, 164), s(-33, 209), s(11, 172), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 38);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(77, 63);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(125, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(102, -27);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 37);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(64, -41);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(24, 32);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(72, 32);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(92, 24);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(86, 11);

pub const TEMPO_BONUS: ScoreTuple = s(34, 29);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(1, 0), s(1, -5), s(7, -4), s(10, -9), s(9, -7), s(10, -9), s(10, -8), s(11, -11), s(11, -11), s(11, -8), s(9, -6), s(11, -15), s(8, -11), s(10, -12), s(7, -10), s(8, -14), s(7, -9), s(5, -8), s(3, -7), s(4, -12), s(5, -13), s(2, -11), s(0, -14), s(-4, -12), s(0, -19), s(-14, -13), s(-12, -7), s(-66, -6), 
],
// Bishop attacks
[
  s(5, 3), s(4, -2), s(9, -6), s(9, -5), s(9, -3), s(11, -7), s(10, -7), s(9, -6), s(12, -10), s(10, -9), s(9, -8), s(8, -6), s(7, -7), s(7, -8), s(7, -6), s(5, -5), s(6, -6), s(5, -7), s(4, -7), s(1, -5), s(3, -5), s(1, -11), s(2, -5), s(1, -13), s(-6, -6), s(0, -15), s(8, -18), s(-4, -16), 
],
// Rook attacks
[
  s(4, -1), s(2, -2), s(7, -8), s(9, -13), s(8, -12), s(7, -11), s(7, -12), s(7, -10), s(7, -13), s(6, -12), s(6, -13), s(5, -14), s(3, -7), s(3, -5), s(3, -4), s(3, -2), s(2, -2), s(2, -1), s(2, -1), s(2, 0), s(2, 0), s(2, 0), s(0, 1), s(0, 0), s(1, 1), s(1, 0), s(-16, 7), s(0, 0), 
],
// Queen attacks
[
  s(1, -1), s(1, -4), s(3, -8), s(5, -13), s(5, -9), s(5, -8), s(6, -11), s(6, -8), s(6, -10), s(8, -10), s(7, -9), s(8, -15), s(8, -10), s(9, -9), s(8, -8), s(9, -10), s(10, -12), s(11, -10), s(11, -8), s(15, -12), s(17, -11), s(12, -10), s(17, -11), s(18, -16), s(10, 1), s(15, -8), s(27, -8), s(29, -29), 
],
// Pawn attacks
[
  s(-2, 8), s(7, -4), s(6, -7), s(3, -6), s(3, -6), s(3, -6), s(1, -3), s(2, -6), s(1, -5), s(2, -6), s(1, -6), s(1, -8), s(1, -17), s(2, -19), s(1, -21), s(0, -27), s(0, -25), s(1, -28), s(2, -30), s(0, -23), s(2, -27), s(3, -26), s(4, -21), s(8, -26), s(9, -17), s(-1, -9), s(30, -14), s(2, -10), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-8, 8), s(1, 1), s(-2, 1), s(-2, 0), s(-3, 2), s(-2, 2), s(-3, 3), s(-3, 1), s(-3, 1), s(-4, 3), s(-4, 4), s(-4, 2), s(-5, 6), s(-5, 8), s(-3, 9), s(-4, 11), s(-4, 10), s(-2, 10), s(0, 11), s(0, 9), s(-2, 12), s(0, 13), s(-2, 14), s(-1, 17), s(-2, 16), s(-1, 23), s(-8, 15), s(7, 25), 
],
// Bishop defenses
[
  s(-1, 4), s(-1, -1), s(-3, 2), s(-4, 2), s(-3, 2), s(-3, 2), s(-5, 4), s(-4, 2), s(-4, 3), s(-4, 3), s(-3, 1), s(-3, 2), s(-3, 5), s(-4, 4), s(-2, 3), s(-2, 3), s(-1, 2), s(0, 4), s(-2, 6), s(0, 4), s(0, 4), s(-2, 7), s(-2, 6), s(-3, 8), s(1, 7), s(-2, 10), s(0, 2), s(1, 14), 
],
// Rook defenses
[
  s(-9, 11), s(0, 3), s(-3, 6), s(-5, 6), s(-3, 5), s(-4, 6), s(-2, 4), s(-3, 4), s(-3, 5), s(-3, 5), s(-2, 3), s(-1, 3), s(0, 3), s(-1, 4), s(0, 3), s(0, 3), s(0, 3), s(0, 4), s(0, 4), s(0, 5), s(-1, 7), s(0, 6), s(0, 5), s(-2, 7), s(-5, 7), s(-4, 7), s(7, 2), s(-5, 7), 
],
// Queen defenses
[
  s(4, -16), s(-1, 5), s(-1, 3), s(-1, 3), s(-1, 2), s(-2, 4), s(-2, 6), s(-2, 6), s(-2, 6), s(-2, 6), s(-1, 3), s(-1, 4), s(-1, 4), s(-2, 6), s(0, 3), s(0, 4), s(0, 6), s(0, 5), s(0, 6), s(0, 5), s(1, 5), s(0, 7), s(0, 10), s(-6, 14), s(12, 0), s(-4, 11), s(-16, 18), s(-7, 13), 
],
// Pawn defenses
[
  s(-13, 0), s(-23, 9), s(-18, 7), s(-15, 6), s(-13, 4), s(-12, 4), s(-11, 3), s(-10, 4), s(-8, 1), s(-6, 0), s(-4, -2), s(-4, -2), s(-1, -7), s(-1, -8), s(0, -14), s(1, -23), s(1, -24), s(1, -27), s(1, -28), s(2, -26), s(3, -27), s(7, -30), s(8, -29), s(12, -32), s(7, -21), s(30, -37), s(6, -24), s(16, -25), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(101, 63),
  s(80, 69),
  s(75, 69),
  s(82, 81),
  s(81, 90),
  s(82, 112),
  s(98, 141),
  s(102, 141),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(95, 22), s(80, 0), s(104, 4), s(110, 0), s(116, -1), s(112, -1), s(115, -3), s(117, -3), s(116, -30), s(113, -5), s(114, -6), s(109, -10), s(109, -3), s(108, -9), s(108, -7), s(107, -5), s(105, -5), s(104, -7), s(103, -1), s(101, -5), s(102, 0), s(97, 3), s(95, 1), s(95, 2), s(97, 0), s(91, 10), s(94, 4), s(91, 6), s(87, 12), s(86, 11), s(86, 11), s(83, 12), s(80, 14), s(83, 12), s(81, 12), s(75, 21), s(76, 22), s(75, 19), s(76, 17), s(70, 26), s(70, 22), s(71, 25), s(66, 28), s(66, 28), s(65, 27), s(64, 30), s(59, 35), s(59, 31), s(60, 33), s(57, 34), s(56, 35), s(55, 34), s(53, 37), s(52, 39), s(48, 42), s(49, 45), s(47, 43), s(41, 51), s(43, 48), s(40, 51), s(36, 53), s(38, 51), s(38, 52), s(33, 57), s(34, 57), s(32, 58), s(30, 61), s(28, 61), s(25, 65), s(28, 61), s(23, 65), s(20, 71), s(20, 64), s(22, 63), s(13, 75), s(14, 72), s(14, 73), s(13, 73), s(13, 75), s(10, 76), s(7, 82), s(9, 80), s(3, 85), s(0, 88), s(5, 84), s(-1, 84), s(0, 91), s(-3, 88), s(-3, 82), s(-5, 92), s(-6, 96), s(-9, 98), s(-9, 97), s(-10, 87), s(-7, 83), s(-10, 105), s(-13, 96), s(-14, 102), s(-18, 107), s(-13, 101), s(-16, 110), s(-19, 106), s(-10, 92), s(-16, 109), s(-20, 112), s(-23, 91), s(-17, 107), s(-13, 100), s(-25, 118), s(-23, 106), s(-22, 95), s(-17, 106), s(-16, 88), s(-14, 89), s(-18, 0), s(-13, 74), s(-31, 28), s(-34, 15), s(-21, -5), s(-21, 34), s(-10, 14), s(-22, 35), s(-13, 12), s(-35, -6), s(-18, 30), s(-6, 12), s(-12, -8), s(-73, 16), s(-10, 2), s(-78, 9), s(-25, 0), s(-44, 5), s(-1, 2), s(-52, 1), s(-14, 0), s(-41, 0), s(-8, 1), s(14, 2), s(0, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_PST: Pst = Pst::new([
  s(-45, 42), s(-41, 100), s(15, 103), s(-66, 141), s(-14, 126), s(-39, 138), s(-7, 138), s(58, 42), 
  s(-67, 123), s(-10, 160), s(-72, 169), s(99, 148), s(16, 159), s(-10, 188), s(2, 174), s(-55, 153), 
  s(-116, 63), s(11, 76), s(2, 87), s(-17, 93), s(31, 96), s(115, 87), s(64, 91), s(-34, 56), 
  s(-33, -1), s(5, 33), s(-4, 42), s(-41, 57), s(-56, 58), s(-4, 42), s(-31, 38), s(-116, 11), 
  s(-65, -33), s(1, -6), s(-17, 17), s(-45, 34), s(-40, 33), s(-5, 8), s(-50, -1), s(-128, -15), 
  s(-47, -53), s(2, -34), s(-22, -11), s(-23, -1), s(-19, -3), s(-12, -15), s(-13, -34), s(-78, -45), 
  s(13, -69), s(2, -39), s(-13, -26), s(-47, -15), s(-41, -14), s(-19, -28), s(19, -48), s(10, -72), 
  s(32, -103), s(66, -77), s(41, -51), s(-49, -29), s(6, -44), s(-13, -36), s(47, -65), s(38, -103), 
]);
