#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, Pft}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(252, 288), s(361, 320), s(342, 384), s(392, 349), s(498, 335), s(308, 352), s(371, 302), s(318, 245), 
  s(346, 330), s(382, 359), s(473, 327), s(424, 354), s(446, 330), s(463, 322), s(433, 332), s(395, 301), 
  s(369, 328), s(452, 339), s(460, 371), s(474, 359), s(464, 355), s(554, 335), s(465, 324), s(434, 301), 
  s(433, 335), s(452, 361), s(450, 389), s(500, 381), s(469, 382), s(506, 369), s(458, 356), s(471, 315), 
  s(420, 346), s(445, 349), s(455, 386), s(469, 385), s(469, 382), s(465, 379), s(482, 352), s(435, 340), 
  s(415, 330), s(423, 360), s(444, 361), s(448, 375), s(464, 377), s(452, 351), s(457, 331), s(418, 337), 
  s(398, 298), s(401, 322), s(417, 338), s(439, 343), s(435, 346), s(439, 332), s(430, 307), s(417, 307), 
  s(311, 291), s(395, 295), s(383, 315), s(397, 331), s(408, 323), s(396, 322), s(396, 307), s(407, 263), 
]),
// Bishop PST
Pst::new([
  s(423, 397), s(406, 393), s(320, 410), s(274, 416), s(345, 402), s(324, 404), s(409, 394), s(409, 387), 
  s(423, 390), s(437, 396), s(411, 388), s(394, 382), s(428, 381), s(460, 381), s(409, 396), s(381, 383), 
  s(445, 384), s(475, 379), s(476, 385), s(466, 376), s(480, 372), s(508, 380), s(483, 384), s(482, 372), 
  s(437, 380), s(462, 386), s(458, 400), s(508, 397), s(471, 403), s(490, 389), s(454, 383), s(447, 387), 
  s(442, 374), s(451, 387), s(464, 396), s(479, 403), s(485, 391), s(450, 395), s(449, 381), s(437, 373), 
  s(447, 370), s(467, 381), s(466, 394), s(466, 393), s(464, 400), s(476, 385), s(454, 384), s(449, 370), 
  s(461, 352), s(466, 358), s(467, 365), s(451, 378), s(459, 379), s(470, 373), s(483, 361), s(448, 350), 
  s(427, 354), s(453, 370), s(434, 371), s(428, 376), s(444, 371), s(423, 385), s(438, 367), s(438, 352), 
]),
// Rook PST
Pst::new([
  s(666, 751), s(695, 741), s(637, 766), s(691, 748), s(674, 752), s(632, 758), s(689, 738), s(683, 742), 
  s(638, 755), s(642, 759), s(670, 754), s(692, 745), s(700, 730), s(686, 743), s(635, 755), s(646, 748), 
  s(612, 741), s(645, 740), s(642, 742), s(659, 736), s(661, 730), s(665, 727), s(707, 719), s(638, 724), 
  s(584, 742), s(630, 729), s(621, 745), s(639, 733), s(633, 731), s(624, 740), s(626, 728), s(602, 733), 
  s(578, 733), s(593, 733), s(609, 734), s(623, 729), s(645, 715), s(600, 728), s(629, 715), s(586, 722), 
  s(583, 713), s(601, 719), s(613, 711), s(621, 707), s(615, 717), s(620, 707), s(617, 710), s(586, 702), 
  s(569, 715), s(604, 705), s(610, 708), s(618, 711), s(624, 703), s(612, 708), s(613, 701), s(532, 719), 
  s(594, 707), s(605, 709), s(617, 707), s(622, 703), s(621, 701), s(600, 709), s(574, 717), s(584, 691), 
]),
// Queen PST
Pst::new([
  s(1199, 1183), s(1204, 1215), s(1196, 1240), s(1214, 1233), s(1313, 1184), s(1247, 1224), s(1313, 1157), s(1278, 1208), 
  s(1213, 1157), s(1182, 1209), s(1205, 1237), s(1191, 1264), s(1130, 1327), s(1238, 1230), s(1241, 1211), s(1302, 1161), 
  s(1231, 1144), s(1218, 1167), s(1238, 1166), s(1210, 1232), s(1262, 1214), s(1286, 1193), s(1287, 1156), s(1261, 1193), 
  s(1196, 1185), s(1221, 1175), s(1197, 1189), s(1201, 1223), s(1220, 1214), s(1237, 1201), s(1228, 1221), s(1232, 1193), 
  s(1229, 1131), s(1196, 1189), s(1223, 1176), s(1208, 1222), s(1223, 1192), s(1213, 1185), s(1238, 1174), s(1221, 1185), 
  s(1215, 1132), s(1237, 1118), s(1232, 1156), s(1232, 1151), s(1229, 1175), s(1234, 1149), s(1242, 1143), s(1232, 1151), 
  s(1221, 1102), s(1236, 1107), s(1245, 1104), s(1249, 1101), s(1251, 1113), s(1256, 1099), s(1238, 1077), s(1250, 1071), 
  s(1236, 1091), s(1225, 1093), s(1236, 1092), s(1242, 1086), s(1237, 1097), s(1201, 1103), s(1226, 1079), s(1214, 1062), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(155, 301), s(147, 298), s(135, 292), s(167, 265), s(132, 282), s(167, 258), s(85, 299), s(63, 317), 
  s(99, 166), s(103, 160), s(132, 155), s(133, 144), s(184, 136), s(200, 138), s(183, 160), s(141, 159), 
  s(79, 144), s(98, 135), s(101, 135), s(121, 114), s(122, 131), s(120, 129), s(107, 135), s(88, 133), 
  s(78, 124), s(77, 128), s(99, 123), s(124, 114), s(114, 122), s(115, 119), s(89, 120), s(86, 114), 
  s(85, 118), s(94, 122), s(103, 124), s(113, 131), s(116, 139), s(116, 130), s(132, 113), s(106, 109), 
  s(76, 125), s(91, 119), s(83, 137), s(100, 134), s(94, 153), s(130, 130), s(134, 112), s(93, 105), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-98, -104), s(77, -65), s(119, -49), s(-34, -12), s(-116, 13), s(-129, 36), s(67, 1), s(38, -49), 
  s(70, -27), s(12, 37), s(-66, 44), s(79, 19), s(-1, 43), s(-58, 77), s(20, 46), s(-54, 25), 
  s(-46, 23), s(28, 39), s(95, 29), s(14, 36), s(76, 39), s(119, 63), s(162, 53), s(-2, 18), 
  s(22, -8), s(0, 42), s(37, 39), s(-12, 51), s(-48, 59), s(-16, 55), s(-5, 49), s(-88, 17), 
  s(-124, 5), s(15, 6), s(1, 32), s(-60, 51), s(-68, 55), s(-21, 33), s(-44, 22), s(-91, -1), 
  s(29, -31), s(21, -3), s(8, 15), s(-13, 27), s(3, 25), s(15, 11), s(20, 0), s(-8, -19), 
  s(55, -49), s(48, -19), s(9, 5), s(-41, 20), s(-27, 21), s(0, 8), s(39, -13), s(30, -38), 
  s(17, -92), s(54, -57), s(22, -29), s(-91, 0), s(-16, -26), s(-51, -1), s(24, -38), s(20, -78), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(55, 201), s(47, 198), s(35, 192), s(67, 165), s(32, 182), s(67, 158), s(-14, 199), s(-36, 217), 
  s(46, 211), s(27, 215), s(13, 180), s(17, 150), s(-29, 148), s(-5, 161), s(-64, 186), s(-63, 206), 
  s(27, 121), s(8, 109), s(18, 86), s(1, 82), s(2, 66), s(37, 69), s(-26, 113), s(-18, 112), 
  s(4, 70), s(-9, 63), s(-30, 48), s(-22, 45), s(-38, 46), s(-35, 50), s(-1, 66), s(5, 61), 
  s(4, 27), s(-7, 32), s(-29, 25), s(-46, 31), s(-29, 14), s(11, 11), s(-25, 39), s(15, 25), 
  s(-4, 20), s(10, 23), s(0, 10), s(-37, 23), s(-18, 12), s(-15, 15), s(-17, 30), s(-14, 25), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(57, -260),
  s(22, -149),
  s(1, -62),
  s(11, -38),
  s(-5, -2),
  s(-6, -13),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(41, -26),
  s(8, -25),
  s(0, -25),
  s(-14, -13),
  s(-31, -18),
  s(-15, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(75, 383),
  s(203, 136),
  s(49, 50),
  s(17, 13),
  s(-9, -9),
  s(6, -8),
  s(0, 0),
]);

pub const BACKWARDS_PAWNS_PFT: Pft = Pft::new([
  s(0, -3), s(-8, -11), s(-12, -12), s(-18, -9), s(-17, -13), s(-9, -8), s(-8, -9), s(7, -1), 
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(30, 70);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(4, 51), s(6, 58), s(4, 61), s(10, 56), s(10, 59), s(12, 54), s(8, 51), s(17, 33), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(10, 15), s(17, 32), s(20, 44), s(22, 53), s(22, 59), s(23, 65), s(21, 65), s(14, 71), s(20, 64), s(26, 59), s(49, 54), s(-10, 92), s(43, 43), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(7, 42), s(11, 54), s(18, 57), s(16, 68), s(21, 81), s(22, 88), s(25, 89), s(34, 90), s(32, 94), s(32, 98), s(39, 100), s(42, 103), s(44, 99), s(31, 98), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(2, 344), s(5, 307), s(4, 329), s(12, 328), s(15, 339), s(17, 344), s(17, 365), s(19, 376), s(24, 378), s(26, 386), s(29, 398), s(28, 396), s(33, 398), s(36, 400), s(34, 411), s(37, 418), s(48, 399), s(56, 400), s(77, 389), s(55, 404), s(119, 366), s(64, 387), s(168, 333), s(183, 302), s(294, 249), s(210, 310), s(178, 293), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(20, 23), s(31, 33), s(40, 37), s(50, 40), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(6, 11), s(14, 14), s(20, 18), s(25, 19), s(26, 20), s(30, 17), s(33, 27), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 2), s(7, 12), s(15, 15), s(22, 18), s(18, 29), s(31, 28), s(35, 36), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(5, -2), s(6, 6), s(10, -2), s(8, 13), s(8, 24), s(6, 22), s(5, 30), s(1, 40), s(-3, 54), s(6, 49), s(-28, 85), s(-16, 79), s(-39, 137), s(8, 82), 
];

pub const KING_ZONE_ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attack values
[
  s(-10, -22), s(-8, 0), s(0, 15), s(2, 11), s(7, 10), s(11, 6), s(6, 22), s(14, 8), s(18, 7), s(20, 8), s(28, 2), s(32, 0), s(28, 0), s(34, -4), s(45, -6), s(42, -8), s(42, -7), s(47, -11), s(48, -14), s(41, -15), s(72, -21), s(56, -17), s(37, -19), s(21, -18), s(13, -15), s(-62, -12), s(28, -16), s(-80, -5), 
],
// Bishop attack values
[
  s(2, 14), s(-2, 11), s(0, 17), s(4, 12), s(7, 16), s(15, 5), s(15, 2), s(17, 7), s(29, -3), s(22, 0), s(35, -7), s(29, -5), s(38, -4), s(38, -8), s(40, -5), s(32, -8), s(36, -7), s(38, -10), s(41, -8), s(41, -10), s(22, -6), s(24, -7), s(-8, -1), s(-15, -1), s(-37, 1), s(-26, -6), s(22, -21), s(-37, -3), 
],
// Rook attack values
[
  s(16, 4), s(2, -4), s(14, -11), s(21, -22), s(20, -17), s(25, -20), s(24, -12), s(17, -9), s(31, -16), s(33, -17), s(38, -18), s(35, -17), s(33, -15), s(32, -13), s(42, -15), s(37, -12), s(39, -12), s(53, -16), s(47, -13), s(44, -12), s(30, -8), s(33, -8), s(41, -11), s(38, -8), s(28, -3), s(65, -14), s(14, 0), s(34, -6), 
],
// Queen attack values
[
  s(-2, -14), s(0, -12), s(4, -20), s(10, -23), s(14, -16), s(13, -7), s(15, -10), s(17, 1), s(24, -12), s(29, -5), s(25, -1), s(32, -2), s(41, -8), s(38, -5), s(46, -10), s(65, -20), s(65, -19), s(83, -33), s(83, -31), s(94, -37), s(121, -51), s(119, -52), s(114, -41), s(144, -62), s(159, -62), s(200, -89), s(146, -52), s(97, -49), 
],
// Pawn attack values
[
  s(6, 12), s(7, -3), s(8, -10), s(8, -8), s(8, -9), s(6, -9), s(9, -9), s(10, -8), s(7, -8), s(9, -9), s(11, -11), s(12, -11), s(20, -14), s(20, -13), s(17, -13), s(23, -14), s(29, -17), s(28, -16), s(23, -16), s(27, -17), s(38, -19), s(63, -24), s(47, -19), s(31, -19), s(32, -17), s(48, -13), s(50, -9), s(15, -4), 
],
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(95, 31);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(91, 58);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(150, -7);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(101, 4);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(42, 40);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(89, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(63, -28);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 39);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(76, 31);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(84, 54);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(115, 0);

pub const TEMPO_BONUS: ScoreTuple = s(41, 29);
