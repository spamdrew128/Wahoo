#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(244, 292), s(335, 325), s(326, 386), s(382, 353), s(481, 341), s(294, 353), s(351, 306), s(309, 251), 
  s(332, 334), s(372, 361), s(464, 324), s(410, 358), s(432, 334), s(449, 325), s(420, 330), s(377, 300), 
  s(355, 332), s(440, 339), s(449, 370), s(458, 361), s(440, 359), s(536, 336), s(446, 323), s(408, 304), 
  s(419, 338), s(440, 361), s(439, 389), s(486, 382), s(453, 384), s(489, 370), s(438, 359), s(448, 319), 
  s(407, 349), s(432, 350), s(443, 384), s(454, 384), s(454, 382), s(450, 377), s(465, 352), s(417, 343), 
  s(403, 331), s(410, 360), s(433, 358), s(434, 371), s(447, 374), s(437, 348), s(438, 333), s(401, 337), 
  s(384, 302), s(384, 326), s(403, 337), s(425, 338), s(422, 342), s(422, 331), s(416, 306), s(402, 305), 
  s(296, 293), s(379, 303), s(369, 313), s(381, 329), s(392, 320), s(385, 315), s(378, 313), s(392, 261), 
]),
// Bishop PST
Pst::new([
  s(410, 398), s(399, 389), s(314, 405), s(274, 409), s(337, 402), s(334, 399), s(408, 392), s(405, 386), 
  s(410, 387), s(425, 393), s(407, 383), s(384, 380), s(421, 378), s(458, 378), s(408, 392), s(376, 380), 
  s(433, 382), s(469, 376), s(470, 380), s(460, 370), s(471, 368), s(501, 375), s(467, 380), s(468, 368), 
  s(426, 380), s(451, 383), s(453, 396), s(501, 393), s(465, 399), s(482, 385), s(447, 377), s(439, 382), 
  s(434, 372), s(448, 383), s(456, 393), s(473, 398), s(476, 387), s(444, 391), s(441, 374), s(428, 368), 
  s(439, 368), s(459, 380), s(459, 392), s(457, 389), s(454, 396), s(466, 381), s(443, 378), s(434, 368), 
  s(454, 351), s(457, 355), s(458, 361), s(442, 372), s(448, 372), s(460, 365), s(468, 353), s(438, 346), 
  s(414, 355), s(440, 368), s(421, 366), s(415, 370), s(429, 367), s(413, 377), s(426, 359), s(421, 348), 
]),
// Rook PST
Pst::new([
  s(669, 716), s(695, 706), s(641, 730), s(698, 710), s(686, 712), s(635, 722), s(669, 709), s(691, 705), 
  s(636, 721), s(641, 723), s(667, 719), s(688, 711), s(699, 694), s(684, 703), s(642, 717), s(643, 714), 
  s(608, 711), s(643, 708), s(641, 711), s(657, 703), s(662, 693), s(659, 689), s(704, 683), s(641, 687), 
  s(578, 713), s(626, 699), s(617, 714), s(639, 698), s(636, 693), s(629, 698), s(630, 687), s(604, 697), 
  s(568, 704), s(583, 706), s(600, 705), s(613, 698), s(638, 680), s(599, 687), s(628, 677), s(579, 688), 
  s(569, 687), s(587, 695), s(600, 685), s(608, 679), s(605, 684), s(616, 669), s(613, 673), s(578, 669), 
  s(555, 691), s(590, 680), s(595, 683), s(607, 683), s(615, 672), s(605, 671), s(610, 665), s(525, 686), 
  s(579, 684), s(590, 685), s(602, 681), s(609, 675), s(609, 670), s(592, 674), s(564, 683), s(575, 661), 
]),
// Queen PST
Pst::new([
  s(1098, 1235), s(1105, 1258), s(1089, 1291), s(1108, 1285), s(1194, 1236), s(1147, 1270), s(1215, 1207), s(1175, 1254), 
  s(1119, 1132), s(1092, 1184), s(1114, 1207), s(1095, 1239), s(1023, 1297), s(1127, 1194), s(1156, 1174), s(1207, 1129), 
  s(1138, 1116), s(1128, 1142), s(1149, 1139), s(1115, 1203), s(1160, 1183), s(1163, 1166), s(1160, 1118), s(1140, 1161), 
  s(1106, 1154), s(1130, 1144), s(1105, 1160), s(1108, 1190), s(1126, 1175), s(1143, 1154), s(1135, 1175), s(1140, 1138), 
  s(1137, 1106), s(1110, 1158), s(1133, 1149), s(1120, 1190), s(1137, 1159), s(1124, 1145), s(1148, 1133), s(1130, 1141), 
  s(1130, 1098), s(1148, 1092), s(1143, 1128), s(1142, 1124), s(1142, 1147), s(1148, 1111), s(1154, 1117), s(1144, 1116), 
  s(1135, 1067), s(1146, 1079), s(1157, 1074), s(1162, 1072), s(1165, 1083), s(1172, 1065), s(1155, 1051), s(1169, 1031), 
  s(1149, 1054), s(1138, 1056), s(1149, 1056), s(1157, 1050), s(1151, 1063), s(1121, 1060), s(1140, 1037), s(1133, 1012), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(159, 296), s(150, 291), s(141, 283), s(171, 258), s(138, 271), s(175, 247), s(91, 289), s(69, 310), 
  s(95, 166), s(102, 156), s(130, 149), s(136, 138), s(187, 125), s(204, 125), s(186, 144), s(140, 151), 
  s(83, 145), s(98, 131), s(105, 129), s(125, 106), s(132, 115), s(127, 117), s(112, 122), s(93, 129), 
  s(79, 124), s(76, 122), s(101, 115), s(127, 105), s(123, 106), s(121, 106), s(92, 103), s(87, 108), 
  s(85, 118), s(91, 116), s(104, 116), s(110, 124), s(117, 126), s(119, 119), s(123, 98), s(101, 104), 
  s(76, 128), s(90, 115), s(85, 131), s(102, 126), s(98, 141), s(134, 120), s(124, 101), s(90, 103), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-61, -20), s(61, 43), s(125, 60), s(-15, 96), s(-82, 116), s(-90, 129), s(60, 92), s(52, 29), 
  s(115, 93), s(78, 186), s(-33, 203), s(153, 177), s(28, 207), s(-7, 230), s(46, 201), s(48, 130), 
  s(114, 40), s(150, 86), s(197, 91), s(109, 99), s(151, 107), s(222, 113), s(245, 103), s(155, 23), 
  s(159, -31), s(125, 37), s(112, 45), s(52, 62), s(17, 65), s(60, 53), s(96, 38), s(32, -12), 
  s(-120, -23), s(7, -8), s(-32, 25), s(-92, 46), s(-106, 47), s(-57, 20), s(-51, 0), s(-91, -33), 
  s(-27, -61), s(-47, -24), s(-82, 4), s(-113, 15), s(-90, 13), s(-72, -2), s(-38, -25), s(-59, -53), 
  s(3, -87), s(-17, -47), s(-75, -16), s(-117, -1), s(-104, -2), s(-74, -18), s(-14, -50), s(-8, -82), 
  s(5, -133), s(38, -99), s(3, -66), s(-117, -27), s(-39, -58), s(-68, -39), s(14, -86), s(13, -126), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(59, 196), s(50, 191), s(41, 183), s(71, 158), s(38, 171), s(75, 147), s(-8, 189), s(-30, 210), 
  s(48, 205), s(30, 209), s(16, 175), s(17, 142), s(-27, 141), s(0, 156), s(-65, 183), s(-59, 203), 
  s(28, 116), s(12, 104), s(19, 82), s(3, 78), s(-2, 64), s(35, 64), s(-25, 111), s(-16, 109), 
  s(6, 67), s(-4, 60), s(-24, 44), s(-20, 42), s(-37, 45), s(-37, 48), s(0, 66), s(6, 59), 
  s(7, 23), s(-2, 28), s(-27, 23), s(-40, 27), s(-28, 13), s(3, 10), s(-24, 40), s(18, 23), 
  s(-1, 16), s(9, 21), s(0, 6), s(-30, 19), s(-22, 10), s(-18, 15), s(-14, 29), s(-13, 26), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(43, -254),
  s(22, -149),
  s(-1, -60),
  s(9, -34),
  s(-8, 3),
  s(-3, -7),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(40, -24),
  s(12, -27),
  s(-3, -27),
  s(-18, -15),
  s(-33, -17),
  s(-16, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(96, 310),
  s(222, 122),
  s(49, 50),
  s(19, 14),
  s(-5, -8),
  s(6, -10),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(31, 68);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(5, 52), s(5, 59), s(2, 62), s(7, 58), s(5, 62), s(6, 58), s(0, 57), s(3, 43), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(4, 21), s(10, 38), s(10, 50), s(11, 58), s(10, 65), s(10, 69), s(6, 69), s(-1, 76), s(2, 68), s(6, 62), s(16, 61), s(-41, 97), s(-3, 55), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(4, 64), s(7, 80), s(13, 85), s(11, 95), s(16, 108), s(16, 114), s(19, 116), s(27, 116), s(27, 119), s(27, 121), s(32, 123), s(36, 126), s(36, 121), s(19, 122), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(16, 343), s(21, 328), s(23, 336), s(33, 328), s(37, 331), s(40, 333), s(42, 350), s(45, 355), s(51, 355), s(54, 359), s(57, 371), s(57, 367), s(61, 367), s(64, 369), s(61, 379), s(65, 383), s(78, 364), s(84, 365), s(106, 352), s(89, 365), s(147, 330), s(113, 336), s(214, 285), s(222, 255), s(257, 250), s(183, 283), s(184, 285), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(20, 23), s(32, 34), s(41, 38), s(53, 40), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(8, 11), s(17, 14), s(25, 18), s(30, 20), s(32, 21), s(36, 17), s(40, 26), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 1), s(7, 10), s(17, 12), s(26, 15), s(25, 24), s(37, 23), s(41, 32), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-3, 69), s(-4, 82), s(-1, 77), s(-4, 94), s(-5, 107), s(-8, 108), s(-9, 116), s(-14, 127), s(-19, 144), s(-8, 136), s(-40, 170), s(-28, 164), s(-49, 220), s(8, 153), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(93, 34);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(90, 60);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(147, -3);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(99, 4);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(41, 40);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(85, 21);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(61, -30);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 38);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(77, 30);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(81, 54);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(114, -2);

pub const TEMPO_BONUS: ScoreTuple = s(40, 29);

// KING SAFETY FEATURES
pub const ENEMY_VIRT_MOBILITY: [ScoreTuple; 28] = [
  s(-54, -31), s(-47, 0), s(-12, 73), s(4, 0), s(17, -59), s(20, 33), s(23, 62), s(34, 75), s(40, -24), s(46, 45), s(50, 20), s(54, 23), s(61, 17), s(58, 36), s(63, 36), s(64, 38), s(64, 42), s(65, 47), s(59, 54), s(56, 60), s(58, 61), s(58, 63), s(57, 67), s(44, 72), s(48, 77), s(33, 77), s(45, 79), s(-28, 86), 
];

pub const ATTACKS: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(16, -22), s(14, -14), s(9, -4), s(14, -9), s(3, -28), 
];

pub const DEFENSES: [ScoreTuple; (NUM_PIECES - 1) as usize] = [
  s(-7, 13), s(-7, 5), s(-3, 4), s(0, 6), s(-8, -22), 
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(40, 10),
  s(15, 23),
  s(22, 25),
  s(47, 36),
  s(82, 46),
  s(88, 72),
  s(72, 105),
  s(63, 87),
]);

