#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(186, 299), s(222, 348), s(295, 372), s(353, 350), s(368, 362), s(251, 345), s(228, 346), s(247, 256), 
  s(308, 335), s(342, 349), s(372, 336), s(360, 349), s(386, 329), s(388, 328), s(335, 340), s(341, 303), 
  s(326, 332), s(372, 341), s(393, 364), s(396, 361), s(383, 361), s(432, 339), s(374, 330), s(360, 307), 
  s(354, 342), s(370, 360), s(387, 379), s(422, 378), s(395, 377), s(415, 370), s(374, 356), s(386, 322), 
  s(348, 348), s(365, 353), s(378, 380), s(393, 376), s(391, 380), s(389, 369), s(388, 350), s(358, 344), 
  s(337, 328), s(349, 348), s(367, 353), s(369, 367), s(384, 367), s(374, 342), s(370, 337), s(343, 336), 
  s(316, 307), s(326, 326), s(337, 338), s(357, 336), s(358, 336), s(356, 333), s(339, 315), s(338, 319), 
  s(274, 293), s(309, 320), s(311, 317), s(321, 327), s(328, 324), s(334, 309), s(311, 330), s(317, 286), 
]),
// Bishop PST
Pst::new([
  s(357, 397), s(335, 391), s(285, 398), s(266, 402), s(289, 399), s(284, 399), s(335, 401), s(356, 377), 
  s(363, 369), s(372, 381), s(374, 373), s(336, 377), s(360, 370), s(378, 381), s(347, 388), s(335, 372), 
  s(373, 384), s(399, 374), s(391, 380), s(398, 366), s(390, 370), s(415, 383), s(388, 383), s(396, 373), 
  s(363, 378), s(387, 379), s(393, 382), s(429, 390), s(401, 390), s(414, 384), s(379, 377), s(377, 372), 
  s(370, 365), s(379, 379), s(389, 386), s(407, 389), s(405, 386), s(382, 383), s(371, 378), s(379, 353), 
  s(371, 365), s(394, 374), s(397, 380), s(391, 382), s(389, 388), s(392, 379), s(387, 370), s(383, 355), 
  s(389, 357), s(389, 353), s(396, 355), s(377, 368), s(381, 368), s(395, 364), s(399, 361), s(384, 342), 
  s(357, 351), s(384, 371), s(359, 370), s(354, 365), s(359, 364), s(355, 376), s(373, 354), s(377, 339), 
]),
// Rook PST
Pst::new([
  s(571, 688), s(587, 683), s(563, 699), s(595, 682), s(619, 672), s(564, 686), s(577, 688), s(613, 671), 
  s(549, 688), s(557, 692), s(571, 696), s(596, 680), s(586, 675), s(586, 678), s(583, 673), s(589, 673), 
  s(531, 680), s(557, 681), s(554, 678), s(562, 675), s(589, 666), s(574, 662), s(627, 655), s(570, 660), 
  s(508, 684), s(539, 673), s(533, 688), s(546, 676), s(553, 664), s(540, 666), s(548, 663), s(523, 666), 
  s(495, 668), s(505, 672), s(517, 673), s(534, 663), s(537, 661), s(501, 668), s(534, 660), s(501, 661), 
  s(494, 659), s(502, 663), s(515, 651), s(519, 653), s(524, 651), s(521, 645), s(540, 636), s(508, 637), 
  s(481, 653), s(502, 652), s(513, 654), s(520, 649), s(525, 639), s(512, 643), s(535, 631), s(468, 648), 
  s(496, 654), s(500, 651), s(504, 654), s(511, 648), s(512, 643), s(505, 646), s(492, 648), s(490, 637), 
]),
// Queen PST
Pst::new([
  s(988, 1223), s(1008, 1228), s(1017, 1254), s(1053, 1233), s(1052, 1238), s(1047, 1223), s(1141, 1139), s(1074, 1200), 
  s(1028, 1097), s(1008, 1128), s(1029, 1143), s(1008, 1177), s(993, 1199), s(1036, 1136), s(1073, 1099), s(1102, 1099), 
  s(1028, 1081), s(1016, 1101), s(1034, 1115), s(1028, 1142), s(1040, 1129), s(1059, 1098), s(1071, 1051), s(1061, 1080), 
  s(1018, 1093), s(1017, 1099), s(1023, 1104), s(1020, 1126), s(1036, 1115), s(1044, 1092), s(1049, 1096), s(1043, 1082), 
  s(1024, 1056), s(1017, 1095), s(1020, 1103), s(1018, 1132), s(1027, 1116), s(1024, 1092), s(1040, 1069), s(1040, 1067), 
  s(1023, 1045), s(1033, 1062), s(1028, 1085), s(1024, 1089), s(1022, 1103), s(1039, 1062), s(1049, 1052), s(1040, 1040), 
  s(1028, 1023), s(1029, 1034), s(1038, 1030), s(1040, 1040), s(1037, 1045), s(1047, 1004), s(1042, 1008), s(1050, 976), 
  s(1015, 1023), s(1015, 1018), s(1019, 1012), s(1029, 1000), s(1024, 1007), s(1007, 1008), s(1022, 980), s(1009, 1006), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(152, 276), s(146, 268), s(152, 264), s(178, 239), s(140, 246), s(157, 239), s(88, 271), s(75, 290), 
  s(88, 166), s(83, 159), s(117, 150), s(120, 144), s(128, 124), s(182, 131), s(157, 158), s(128, 155), 
  s(67, 151), s(77, 133), s(88, 128), s(100, 109), s(111, 116), s(112, 115), s(90, 125), s(86, 127), 
  s(64, 125), s(64, 121), s(83, 117), s(99, 110), s(98, 111), s(99, 110), s(75, 108), s(77, 110), 
  s(67, 122), s(76, 116), s(84, 118), s(91, 124), s(94, 127), s(99, 118), s(92, 105), s(83, 107), 
  s(64, 130), s(70, 122), s(71, 131), s(79, 134), s(78, 144), s(112, 124), s(94, 109), s(75, 109), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-62, -33), s(-8, 75), s(-31, 54), s(-69, 111), s(-36, 80), s(-45, 102), s(-54, 113), s(-11, -100), 
  s(27, 35), s(-16, 168), s(-54, 211), s(19, 96), s(-15, 105), s(23, 124), s(-12, 131), s(-32, 96), 
  s(20, 55), s(65, 96), s(19, 108), s(31, 102), s(28, 95), s(116, 74), s(112, 77), s(47, -3), 
  s(55, 2), s(66, 54), s(20, 69), s(7, 75), s(-13, 73), s(82, 54), s(43, 37), s(40, 3), 
  s(6, -12), s(38, 7), s(-13, 37), s(10, 52), s(0, 50), s(26, 22), s(-33, 5), s(29, -18), 
  s(53, -24), s(-36, -20), s(-62, 7), s(-86, 17), s(-69, 14), s(-74, 0), s(-40, -25), s(-37, -39), 
  s(20, -45), s(0, -26), s(-43, -16), s(-92, -7), s(-92, -7), s(-57, -21), s(-6, -45), s(4, -62), 
  s(41, -73), s(55, -70), s(19, -49), s(-91, -29), s(-31, -50), s(-46, -41), s(22, -72), s(19, -110), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(52, 176), s(46, 168), s(52, 164), s(78, 139), s(40, 146), s(57, 139), s(-11, 171), s(-24, 190), 
  s(25, 203), s(40, 199), s(26, 161), s(29, 124), s(23, 141), s(0, 146), s(-48, 167), s(-64, 200), 
  s(23, 111), s(22, 104), s(24, 80), s(11, 74), s(0, 66), s(23, 72), s(-23, 103), s(-15, 107), 
  s(8, 66), s(9, 58), s(-13, 45), s(-5, 38), s(-23, 40), s(-7, 42), s(-1, 65), s(-3, 62), 
  s(6, 19), s(-6, 29), s(-29, 26), s(-17, 17), s(-24, 16), s(-6, 16), s(-20, 46), s(13, 24), 
  s(-1, 16), s(-3, 22), s(-13, 12), s(-11, 8), s(-4, 1), s(-14, 13), s(-1, 19), s(-5, 22), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-30, -194),
  s(11, -134),
  s(0, -60),
  s(-10, -25),
  s(-13, 0),
  s(-19, 1),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(35, -17),
  s(11, -29),
  s(0, -28),
  s(-14, -17),
  s(-28, -19),
  s(-15, -20),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(92, 271),
  s(175, 161),
  s(53, 49),
  s(19, 16),
  s(-6, -5),
  s(3, -10),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(26, 71);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(8, 51), s(9, 64), s(6, 66), s(7, 65), s(6, 68), s(6, 64), s(3, 61), s(2, 51), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(1, 23), s(7, 41), s(8, 52), s(10, 62), s(9, 69), s(10, 72), s(7, 74), s(2, 79), s(4, 74), s(6, 68), s(13, 69), s(-28, 96), s(8, 58), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(0, 78), s(1, 91), s(0, 113), s(0, 120), s(0, 130), s(1, 136), s(1, 142), s(6, 145), s(7, 149), s(8, 151), s(11, 155), s(15, 159), s(20, 154), s(16, 150), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(60, 146), s(60, 197), s(64, 239), s(68, 254), s(71, 265), s(74, 266), s(75, 287), s(77, 293), s(79, 292), s(82, 295), s(82, 306), s(84, 301), s(87, 305), s(85, 308), s(89, 309), s(86, 313), s(96, 306), s(100, 305), s(121, 285), s(130, 284), s(177, 251), s(165, 245), s(196, 223), s(215, 211), s(221, 203), s(150, 209), s(133, 208), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(14, 24), s(25, 34), s(36, 40), s(45, 43), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 12), s(13, 16), s(19, 19), s(24, 23), s(25, 24), s(30, 22), s(33, 29), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 0), s(11, 5), s(20, 9), s(26, 17), s(29, 21), s(37, 21), s(42, 27), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 99), s(-12, 111), s(-12, 115), s(-12, 128), s(-13, 141), s(-13, 140), s(-15, 149), s(-14, 156), s(-15, 168), s(-15, 170), s(-22, 179), s(-5, 169), s(-35, 209), s(9, 176), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(80, 37);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(78, 60);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(123, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(103, -30);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(38, 37);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(63, -39);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 32);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(71, 32);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(91, 24);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(86, 11);

pub const TEMPO_BONUS: ScoreTuple = s(34, 29);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(-4, -8), s(-4, -19), s(16, -5), s(18, -10), s(15, -3), s(14, -12), s(18, -5), s(19, -11), s(18, -9), s(18, -6), s(16, -10), s(17, -11), s(14, -11), s(18, -19), s(13, -14), s(15, -23), s(13, -16), s(11, -13), s(8, -12), s(7, -15), s(10, -17), s(6, -17), s(2, -19), s(-3, -16), s(0, -23), s(-25, -18), s(-6, -13), s(-59, -20), 
],
// Bishop attacks
[
  s(-25, 8), s(1, -1), s(16, 0), s(14, -1), s(14, 2), s(15, -3), s(14, -4), s(14, -3), s(17, -7), s(15, -9), s(13, -8), s(13, -6), s(12, -6), s(11, -14), s(12, -11), s(9, -11), s(11, -12), s(8, -12), s(8, -11), s(6, -10), s(6, -8), s(5, -16), s(3, -8), s(5, -17), s(-2, -11), s(-3, -18), s(14, -29), s(-8, -22), 
],
// Rook attacks
[
  s(38, -3), s(0, -4), s(14, -9), s(13, -15), s(12, -15), s(10, -18), s(12, -15), s(12, -12), s(12, -17), s(10, -18), s(9, -16), s(9, -12), s(7, -6), s(7, -4), s(7, -2), s(8, -3), s(6, -3), s(6, -4), s(6, -3), s(5, -2), s(5, -1), s(5, -2), s(2, -1), s(2, 0), s(3, 0), s(4, -2), s(-3, 0), s(8, -5), 
],
// Queen attacks
[
  s(15, -20), s(0, -54), s(8, -39), s(9, -55), s(9, -20), s(9, -34), s(11, -13), s(11, -6), s(10, -10), s(13, -8), s(11, -8), s(13, 6), s(14, -11), s(15, -4), s(14, -3), s(15, -11), s(15, -11), s(17, -10), s(15, -7), s(16, -8), s(14, -5), s(15, -8), s(15, -7), s(16, -9), s(18, -7), s(18, -10), s(18, -8), s(18, -16), 
],
// Pawn attacks
[
  s(-3, 10), s(7, -2), s(8, -5), s(3, -5), s(2, -6), s(3, -6), s(3, -6), s(4, -10), s(3, -11), s(3, -13), s(2, -28), s(2, -25), s(1, -89), s(2, -41), s(1, -42), s(0, -40), s(0, -36), s(1, -39), s(3, -36), s(2, -24), s(4, -30), s(6, -31), s(6, -23), s(11, -26), s(12, -19), s(0, -12), s(6, -11), s(-1, -14), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(25, 4), s(3, 6), s(-10, 4), s(-8, 2), s(-8, 1), s(-7, 0), s(-8, 4), s(-8, 1), s(-8, 1), s(-9, 4), s(-8, 6), s(-8, 6), s(-8, 6), s(-7, 8), s(-5, 3), s(-7, 11), s(-6, 10), s(-4, 9), s(0, 10), s(-1, 7), s(-3, 9), s(0, 11), s(-4, 12), s(0, 14), s(0, 14), s(5, 20), s(10, 10), s(-14, 28), 
],
// Bishop defenses
[
  s(-3, 8), s(-1, -2), s(-8, 1), s(-9, 0), s(-7, 1), s(-7, 1), s(-10, 3), s(-8, 2), s(-8, 3), s(-8, 3), s(-6, 2), s(-7, 2), s(-6, 4), s(-8, 3), s(-4, 0), s(-5, 3), s(-3, 2), s(-1, 3), s(-4, 5), s(1, 1), s(0, 1), s(-3, 5), s(-2, 4), s(-6, 7), s(5, 4), s(0, 8), s(8, 0), s(6, 13), 
],
// Rook defenses
[
  s(-41, 12), s(-16, 6), s(-11, 8), s(-8, 5), s(-6, 5), s(-6, 6), s(-4, 4), s(-5, 2), s(-5, 3), s(-4, 3), s(-2, -1), s(-2, 1), s(0, 0), s(-1, 2), s(0, 1), s(0, 2), s(0, 3), s(1, 4), s(1, 3), s(0, 3), s(-1, 4), s(0, 4), s(2, 3), s(0, 4), s(-2, 4), s(-1, 3), s(3, 2), s(0, 2), 
],
// Queen defenses
[
  s(-12, -71), s(2, -82), s(-2, -24), s(-1, -43), s(-2, -6), s(-2, -44), s(-4, 2), s(-3, 3), s(-4, 3), s(-3, 3), s(-2, 1), s(-1, -56), s(-2, 3), s(-2, 4), s(-1, 1), s(0, 4), s(0, 5), s(0, 4), s(0, 5), s(0, 5), s(0, 4), s(-1, 6), s(0, 8), s(-3, 9), s(-3, 8), s(-2, 8), s(-4, 12), s(-3, 6), 
],
// Pawn defenses
[
  s(-59, -8), s(-24, -2), s(-27, -4), s(-19, -1), s(-17, -3), s(-15, -3), s(-16, -3), s(-15, 0), s(-12, -3), s(-9, -5), s(-6, -6), s(-5, -11), s(-3, -19), s(-2, -29), s(-1, -44), s(0, -45), s(1, -44), s(1, -38), s(1, -38), s(3, -32), s(4, -32), s(8, -35), s(11, -33), s(13, -36), s(4, -23), s(27, -36), s(6, -27), s(16, -29), 
],
];

pub const ENEMY_KING_PST: Pst = Pst::new([
  s(125, 96), s(107, 83), s(106, 79), s(95, 71), s(91, 75), s(98, 67), s(92, 76), s(99, 69), 
  s(94, 100), s(95, 85), s(82, 82), s(74, 73), s(69, 67), s(76, 66), s(75, 71), s(88, 82), 
  s(126, 110), s(73, 84), s(84, 92), s(79, 86), s(84, 83), s(74, 71), s(79, 69), s(100, 83), 
  s(127, 112), s(119, 97), s(113, 103), s(129, 101), s(125, 100), s(123, 91), s(112, 83), s(152, 83), 
  s(124, 107), s(123, 112), s(114, 117), s(122, 111), s(122, 106), s(138, 101), s(131, 87), s(150, 92), 
  s(136, 123), s(114, 133), s(107, 132), s(121, 125), s(107, 117), s(113, 106), s(123, 111), s(125, 75), 
  s(145, 109), s(107, 152), s(115, 167), s(84, 127), s(108, 126), s(136, 119), s(109, 131), s(117, 127), 
  s(103, 118), s(127, 138), s(85, 130), s(116, 135), s(115, 128), s(121, 132), s(96, 138), s(23, 85), 
]);
