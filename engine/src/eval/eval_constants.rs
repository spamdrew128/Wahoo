#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(187, 303), s(227, 352), s(291, 376), s(342, 354), s(349, 371), s(246, 349), s(217, 354), s(246, 263), 
  s(314, 339), s(347, 353), s(372, 340), s(358, 354), s(380, 336), s(376, 335), s(331, 348), s(338, 311), 
  s(338, 336), s(379, 344), s(400, 365), s(396, 364), s(380, 365), s(422, 346), s(370, 336), s(357, 315), 
  s(367, 344), s(379, 363), s(395, 381), s(427, 381), s(401, 380), s(417, 374), s(379, 358), s(389, 329), 
  s(362, 350), s(376, 356), s(389, 382), s(402, 380), s(400, 384), s(397, 372), s(394, 355), s(368, 350), 
  s(351, 330), s(363, 351), s(380, 357), s(380, 370), s(395, 371), s(384, 346), s(381, 340), s(355, 340), 
  s(333, 311), s(343, 329), s(353, 342), s(371, 340), s(372, 341), s(366, 338), s(353, 321), s(351, 327), 
  s(295, 301), s(329, 324), s(331, 322), s(342, 330), s(347, 329), s(347, 316), s(326, 333), s(335, 297), 
]),
// Bishop PST
Pst::new([
  s(359, 400), s(334, 395), s(283, 401), s(255, 407), s(276, 403), s(270, 402), s(330, 403), s(348, 381), 
  s(369, 370), s(378, 381), s(375, 374), s(329, 380), s(344, 376), s(369, 383), s(340, 389), s(332, 374), 
  s(382, 385), s(406, 373), s(395, 381), s(395, 368), s(380, 373), s(399, 387), s(379, 385), s(389, 374), 
  s(374, 377), s(395, 379), s(399, 382), s(431, 391), s(404, 391), s(410, 384), s(384, 377), s(377, 373), 
  s(382, 365), s(391, 378), s(399, 387), s(416, 389), s(411, 386), s(389, 385), s(373, 379), s(387, 354), 
  s(387, 366), s(408, 375), s(411, 380), s(402, 382), s(400, 389), s(401, 381), s(398, 371), s(393, 357), 
  s(406, 360), s(405, 354), s(412, 356), s(392, 369), s(395, 370), s(406, 366), s(412, 363), s(398, 345), 
  s(378, 355), s(406, 373), s(378, 371), s(375, 365), s(380, 365), s(371, 377), s(389, 356), s(394, 344), 
]),
// Rook PST
Pst::new([
  s(581, 692), s(593, 687), s(565, 703), s(585, 689), s(602, 682), s(554, 696), s(557, 701), s(600, 680), 
  s(559, 690), s(560, 694), s(569, 698), s(582, 685), s(568, 683), s(570, 687), s(566, 683), s(574, 682), 
  s(546, 681), s(562, 682), s(557, 679), s(557, 678), s(571, 675), s(558, 673), s(611, 666), s(560, 667), 
  s(523, 684), s(547, 673), s(538, 688), s(543, 678), s(549, 667), s(533, 674), s(542, 671), s(517, 673), 
  s(514, 668), s(519, 671), s(527, 673), s(541, 664), s(542, 663), s(505, 674), s(534, 665), s(505, 665), 
  s(515, 657), s(521, 661), s(532, 649), s(532, 653), s(536, 651), s(531, 649), s(550, 637), s(518, 638), 
  s(504, 652), s(525, 651), s(534, 652), s(536, 649), s(540, 640), s(527, 646), s(553, 631), s(485, 648), 
  s(518, 654), s(522, 652), s(526, 654), s(533, 648), s(532, 643), s(521, 648), s(511, 650), s(509, 637), 
]),
// Queen PST
Pst::new([
  s(988, 1234), s(1016, 1226), s(1019, 1257), s(1043, 1241), s(1037, 1251), s(1042, 1234), s(1117, 1157), s(1055, 1213), 
  s(1035, 1104), s(1011, 1131), s(1027, 1144), s(1004, 1179), s(981, 1207), s(1033, 1148), s(1064, 1104), s(1094, 1102), 
  s(1037, 1091), s(1021, 1104), s(1036, 1114), s(1026, 1141), s(1035, 1134), s(1052, 1109), s(1070, 1060), s(1068, 1073), 
  s(1027, 1100), s(1024, 1102), s(1028, 1101), s(1025, 1120), s(1041, 1111), s(1046, 1093), s(1051, 1097), s(1051, 1077), 
  s(1034, 1063), s(1026, 1098), s(1029, 1107), s(1028, 1129), s(1037, 1114), s(1031, 1093), s(1050, 1071), s(1049, 1065), 
  s(1037, 1054), s(1044, 1070), s(1039, 1091), s(1034, 1095), s(1033, 1106), s(1052, 1069), s(1061, 1062), s(1054, 1047), 
  s(1044, 1037), s(1042, 1046), s(1051, 1039), s(1053, 1047), s(1051, 1058), s(1060, 1018), s(1059, 1024), s(1066, 992), 
  s(1032, 1037), s(1032, 1033), s(1035, 1030), s(1045, 1017), s(1041, 1023), s(1023, 1023), s(1039, 993), s(1034, 1014), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(153, 278), s(148, 270), s(150, 266), s(175, 242), s(138, 248), s(156, 241), s(92, 272), s(79, 291), 
  s(91, 169), s(83, 161), s(116, 152), s(117, 145), s(131, 124), s(179, 134), s(158, 160), s(129, 156), 
  s(70, 154), s(78, 135), s(88, 131), s(99, 111), s(114, 118), s(113, 118), s(91, 127), s(88, 129), 
  s(68, 128), s(66, 124), s(85, 119), s(102, 112), s(100, 113), s(100, 112), s(76, 110), s(80, 111), 
  s(71, 125), s(79, 118), s(87, 119), s(93, 126), s(94, 129), s(96, 122), s(92, 107), s(84, 109), 
  s(69, 134), s(74, 126), s(74, 134), s(81, 134), s(78, 145), s(109, 128), s(91, 114), s(76, 113), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-57, 34), s(-40, 91), s(23, 92), s(-55, 129), s(-2, 116), s(-28, 127), s(-8, 128), s(53, 33), 
  s(-87, 104), s(-17, 140), s(-71, 147), s(110, 126), s(28, 136), s(-7, 165), s(-4, 152), s(-72, 132), 
  s(-140, 60), s(-8, 72), s(1, 81), s(-16, 87), s(35, 90), s(110, 82), s(54, 84), s(-58, 51), 
  s(-68, 1), s(-19, 36), s(-18, 44), s(-46, 59), s(-59, 60), s(-14, 45), s(-50, 40), s(-143, 13), 
  s(-100, -27), s(-23, -1), s(-34, 22), s(-57, 40), s(-51, 38), s(-21, 14), s(-69, 3), s(-155, -9), 
  s(-55, -47), s(1, -28), s(-19, -5), s(-15, 4), s(-11, 2), s(-8, -9), s(-11, -28), s(-82, -39), 
  s(14, -64), s(5, -34), s(-8, -22), s(-41, -10), s(-34, -8), s(-13, -23), s(23, -43), s(12, -66), 
  s(33, -101), s(69, -74), s(44, -48), s(-45, -25), s(9, -40), s(-10, -32), s(49, -62), s(41, -100), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(53, 178), s(48, 170), s(50, 166), s(75, 142), s(38, 148), s(56, 141), s(-7, 172), s(-20, 191), 
  s(28, 203), s(45, 200), s(29, 163), s(30, 128), s(19, 146), s(0, 147), s(-48, 169), s(-63, 201), 
  s(28, 111), s(25, 105), s(25, 82), s(11, 76), s(0, 67), s(21, 74), s(-17, 105), s(-15, 109), 
  s(13, 67), s(12, 59), s(-9, 46), s(-5, 39), s(-20, 40), s(-6, 44), s(4, 66), s(-2, 64), 
  s(10, 21), s(-2, 30), s(-25, 26), s(-16, 18), s(-23, 18), s(-2, 18), s(-16, 47), s(11, 27), 
  s(1, 17), s(0, 21), s(-11, 12), s(-10, 10), s(-5, 5), s(-12, 13), s(0, 20), s(0, 22), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-31, -196),
  s(8, -135),
  s(-1, -61),
  s(-9, -26),
  s(-10, -1),
  s(-16, 1),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(40, -18),
  s(11, -29),
  s(0, -28),
  s(-15, -16),
  s(-27, -19),
  s(-14, -19),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(96, 270),
  s(170, 163),
  s(53, 50),
  s(18, 16),
  s(-6, -5),
  s(4, -13),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(24, 71);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(9, 54), s(10, 69), s(9, 72), s(10, 72), s(9, 75), s(9, 71), s(6, 69), s(5, 60), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(3, 27), s(10, 48), s(11, 60), s(15, 70), s(15, 78), s(16, 81), s(13, 84), s(8, 88), s(10, 84), s(11, 79), s(16, 80), s(-28, 108), s(7, 71), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(1, 79), s(2, 95), s(2, 119), s(2, 128), s(4, 139), s(6, 144), s(7, 150), s(12, 154), s(13, 158), s(14, 160), s(18, 164), s(22, 167), s(31, 162), s(29, 160), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(61, 136), s(61, 194), s(66, 237), s(71, 257), s(75, 269), s(79, 272), s(81, 294), s(84, 300), s(88, 300), s(92, 303), s(93, 315), s(95, 310), s(99, 314), s(98, 317), s(104, 318), s(102, 322), s(112, 315), s(117, 315), s(139, 296), s(147, 297), s(197, 263), s(181, 261), s(211, 243), s(238, 233), s(239, 230), s(173, 237), s(150, 234), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(14, 23), s(24, 33), s(35, 38), s(43, 42), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 12), s(11, 16), s(16, 19), s(20, 24), s(22, 25), s(26, 23), s(29, 29), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(7, 2), s(11, 8), s(19, 13), s(25, 20), s(29, 25), s(38, 25), s(45, 30), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-13, 101), s(-12, 113), s(-13, 117), s(-14, 131), s(-15, 144), s(-16, 146), s(-17, 154), s(-17, 162), s(-18, 174), s(-16, 172), s(-23, 181), s(-3, 165), s(-32, 210), s(12, 174), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 38);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(77, 63);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(124, 6);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(103, -28);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 37);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(80, 18);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(64, -40);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 32);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(71, 32);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(92, 24);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(87, 10);

pub const TEMPO_BONUS: ScoreTuple = s(34, 29);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight attacks
[
  s(3, -5), s(4, -7), s(8, -3), s(12, -8), s(10, -7), s(11, -10), s(11, -9), s(12, -11), s(11, -11), s(11, -8), s(9, -6), s(10, -15), s(8, -12), s(10, -13), s(7, -10), s(7, -16), s(6, -11), s(5, -10), s(3, -8), s(4, -14), s(5, -14), s(2, -13), s(-1, -15), s(-2, -15), s(0, -21), s(-12, -17), s(-21, -5), s(-36, -13), 
],
// Bishop attacks
[
  s(6, 0), s(6, -3), s(11, -6), s(10, -5), s(10, -3), s(11, -7), s(10, -8), s(10, -7), s(12, -11), s(10, -10), s(9, -8), s(7, -6), s(7, -8), s(7, -8), s(7, -8), s(4, -6), s(6, -8), s(4, -9), s(4, -8), s(1, -6), s(3, -6), s(1, -13), s(2, -7), s(1, -15), s(-5, -8), s(0, -18), s(9, -36), s(-2, -19), 
],
// Rook attacks
[
  s(3, 0), s(3, -2), s(8, -7), s(9, -11), s(8, -11), s(7, -10), s(7, -12), s(7, -10), s(7, -13), s(6, -12), s(5, -14), s(5, -18), s(3, -9), s(3, -6), s(3, -5), s(3, -1), s(2, -1), s(2, -1), s(2, -1), s(2, 0), s(2, 0), s(2, 0), s(0, 0), s(0, 0), s(1, 1), s(0, 0), s(-11, 6), s(1, -1), 
],
// Queen attacks
[
  s(1, -6), s(1, -4), s(4, -7), s(6, -12), s(5, -9), s(6, -8), s(6, -12), s(6, -10), s(6, -11), s(8, -12), s(7, -12), s(8, -19), s(8, -12), s(9, -10), s(8, -9), s(9, -11), s(10, -13), s(12, -10), s(11, -7), s(16, -11), s(16, -8), s(12, -9), s(16, -9), s(16, -14), s(10, 1), s(18, -9), s(20, -3), s(19, -15), 
],
// Pawn attacks
[
  s(-4, 11), s(4, 0), s(4, -4), s(2, -4), s(1, -4), s(1, -4), s(0, -2), s(1, -4), s(0, -4), s(1, -5), s(0, -6), s(0, -8), s(0, -17), s(1, -19), s(0, -21), s(0, -29), s(0, -25), s(0, -28), s(1, -30), s(0, -22), s(1, -27), s(1, -25), s(3, -21), s(6, -25), s(8, -17), s(-2, -8), s(28, -15), s(8, -13), 
],
];

pub const DEFENSES: [[ScoreTuple; 28]; (NUM_PIECES - 1) as usize] = [
// Knight defenses
[
  s(-4, 5), s(0, 1), s(-2, 0), s(-2, 0), s(-3, 1), s(-2, 1), s(-3, 2), s(-3, 0), s(-3, 1), s(-4, 3), s(-4, 3), s(-3, 2), s(-4, 6), s(-4, 8), s(-3, 9), s(-3, 11), s(-3, 10), s(-2, 10), s(0, 11), s(0, 10), s(-2, 12), s(0, 14), s(-1, 14), s(-1, 18), s(-3, 18), s(-4, 26), s(2, 14), s(2, 29), 
],
// Bishop defenses
[
  s(-4, 10), s(-3, 0), s(-3, 1), s(-5, 1), s(-3, 2), s(-3, 2), s(-5, 3), s(-4, 3), s(-4, 3), s(-4, 3), s(-3, 1), s(-3, 1), s(-3, 5), s(-4, 4), s(-1, 3), s(-1, 4), s(0, 2), s(0, 5), s(-2, 7), s(0, 4), s(0, 5), s(-2, 8), s(-2, 6), s(-3, 10), s(0, 8), s(-3, 12), s(7, 0), s(2, 16), 
],
// Rook defenses
[
  s(-5, 8), s(1, 1), s(-3, 5), s(-4, 5), s(-3, 4), s(-4, 6), s(-2, 4), s(-3, 4), s(-3, 4), s(-2, 4), s(-2, 3), s(-1, 3), s(0, 3), s(0, 4), s(0, 3), s(0, 3), s(0, 4), s(0, 5), s(0, 5), s(0, 5), s(-1, 7), s(0, 6), s(0, 6), s(-1, 7), s(-4, 7), s(-3, 6), s(6, 2), s(-4, 6), 
],
// Queen defenses
[
  s(4, -26), s(-1, 4), s(-1, 3), s(-1, 3), s(-1, 3), s(-2, 4), s(-2, 5), s(-1, 5), s(-2, 5), s(-2, 5), s(-1, 2), s(-1, 3), s(-1, 3), s(-1, 5), s(0, 3), s(0, 5), s(0, 5), s(1, 4), s(0, 4), s(0, 6), s(1, 4), s(2, 5), s(0, 10), s(-4, 13), s(10, 0), s(-6, 12), s(-17, 18), s(-11, 14), 
],
// Pawn defenses
[
  s(-12, -3), s(-23, 8), s(-20, 6), s(-16, 6), s(-13, 4), s(-13, 3), s(-11, 2), s(-10, 3), s(-8, 1), s(-6, -1), s(-4, -2), s(-4, -2), s(-1, -8), s(-1, -10), s(0, -17), s(1, -31), s(1, -32), s(1, -33), s(1, -33), s(2, -31), s(3, -31), s(5, -34), s(7, -32), s(11, -36), s(6, -24), s(30, -45), s(-5, -24), s(9, -28), 
],
];

pub const ENEMY_KING_RANK: Prt = Prt::new([
  s(78, 39),
  s(54, 51),
  s(48, 52),
  s(47, 64),
  s(46, 72),
  s(48, 91),
  s(66, 115),
  s(74, 117),
]);

pub const TROPHISM_BONUS: [ScoreTuple; 160] = [
  s(85, 17), s(64, -3), s(89, 0), s(94, -4), s(101, -5), s(97, -6), s(99, -8), s(102, -7), s(102, -42), s(98, -10), s(100, -12), s(94, -17), s(94, -10), s(94, -15), s(93, -13), s(93, -12), s(90, -11), s(90, -14), s(89, -8), s(87, -12), s(88, -7), s(83, -3), s(82, -7), s(82, -7), s(83, -8), s(79, 1), s(80, -3), s(78, -2), s(75, 3), s(74, 1), s(74, 2), s(71, 3), s(68, 5), s(72, 3), s(69, 2), s(64, 12), s(65, 11), s(64, 8), s(65, 6), s(59, 16), s(60, 11), s(60, 15), s(55, 17), s(55, 18), s(54, 17), s(54, 19), s(49, 23), s(49, 20), s(49, 24), s(48, 23), s(47, 24), s(45, 23), s(44, 26), s(43, 27), s(39, 31), s(39, 35), s(37, 32), s(33, 38), s(34, 36), s(31, 40), s(28, 40), s(31, 39), s(31, 39), s(25, 45), s(27, 44), s(24, 46), s(22, 49), s(20, 49), s(17, 52), s(20, 49), s(16, 52), s(12, 58), s(14, 50), s(15, 50), s(6, 63), s(6, 59), s(8, 59), s(6, 60), s(6, 62), s(3, 64), s(0, 68), s(3, 65), s(-2, 71), s(-6, 74), s(0, 70), s(-7, 69), s(-6, 78), s(-10, 74), s(-9, 67), s(-11, 77), s(-12, 81), s(-14, 82), s(-16, 82), s(-17, 72), s(-15, 71), s(-17, 91), s(-21, 82), s(-21, 87), s(-25, 92), s(-20, 88), s(-26, 98), s(-28, 92), s(-17, 81), s(-25, 97), s(-27, 98), s(-38, 81), s(-28, 95), s(-21, 90), s(-33, 104), s(-33, 92), s(-34, 86), s(-29, 97), s(-27, 80), s(-28, 82), s(-28, 17), s(-27, 94), s(-48, 37), s(-50, 30), s(-36, 5), s(-35, 55), s(-19, 32), s(-41, 57), s(-34, 21), s(-46, -4), s(-31, 47), s(-20, 24), s(-21, -9), s(-76, 23), s(-14, 2), s(-83, 12), s(-64, 9), s(-39, 7), s(2, 2), s(-55, 0), s(-10, 0), s(-38, 0), s(-10, 1), s(14, 2), s(0, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];

pub const PAWN_STORM_BONUS: [ScoreTuple; 160] = [
  s(52, 39), s(48, 4), s(57, 13), s(64, 15), s(62, 17), s(51, 19), s(61, 23), s(58, 22), s(50, 19), s(58, 25), s(54, 21), s(56, 18), s(53, 23), s(54, 22), s(52, 26), s(52, 20), s(53, 16), s(48, 22), s(47, 21), s(50, 20), s(48, 26), s(49, 23), s(45, 19), s(47, 22), s(45, 26), s(44, 24), s(44, 27), s(44, 27), s(40, 26), s(45, 21), s(42, 24), s(41, 23), s(44, 22), s(45, 22), s(43, 23), s(42, 25), s(40, 25), s(39, 29), s(38, 29), s(43, 22), s(42, 24), s(38, 25), s(40, 27), s(41, 23), s(36, 23), s(38, 27), s(39, 28), s(41, 24), s(35, 28), s(40, 24), s(37, 24), s(35, 27), s(38, 27), s(38, 25), s(38, 27), s(34, 30), s(34, 29), s(35, 26), s(33, 28), s(38, 25), s(35, 28), s(32, 30), s(31, 32), s(32, 33), s(34, 30), s(29, 33), s(32, 31), s(32, 31), s(26, 38), s(29, 32), s(30, 31), s(28, 33), s(30, 34), s(30, 34), s(28, 33), s(27, 36), s(28, 34), s(26, 34), s(26, 37), s(25, 37), s(25, 37), s(26, 38), s(24, 43), s(28, 31), s(23, 43), s(24, 41), s(22, 41), s(24, 40), s(26, 43), s(24, 43), s(20, 48), s(20, 46), s(19, 51), s(20, 49), s(14, 58), s(19, 52), s(20, 51), s(15, 57), s(16, 54), s(15, 52), s(15, 50), s(12, 57), s(17, 54), s(15, 56), s(10, 64), s(10, 60), s(5, 66), s(3, 66), s(4, 69), s(8, 60), s(10, 53), s(22, 67), s(3, 72), s(13, 64), s(19, 35), s(9, 73), s(13, 45), s(12, 54), s(8, 48), s(35, 23), s(51, -16), s(8, -13), s(43, 28), s(-12, -28), s(-14, -3), s(-30, -30), s(-7, -16), s(5, 3), s(1, 1), s(40, 0), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), s(1, 1), 
];
