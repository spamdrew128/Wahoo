#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(181, 269), s(234, 314), s(277, 352), s(323, 331), s(357, 345), s(262, 320), s(257, 309), s(231, 240), 
  s(269, 307), s(303, 323), s(330, 312), s(329, 325), s(348, 308), s(367, 305), s(311, 313), s(329, 278), 
  s(291, 303), s(323, 312), s(346, 336), s(357, 335), s(372, 331), s(404, 315), s(366, 298), s(362, 277), 
  s(315, 308), s(329, 326), s(343, 349), s(382, 349), s(361, 348), s(378, 344), s(345, 328), s(364, 297), 
  s(310, 317), s(324, 320), s(338, 347), s(359, 344), s(358, 350), s(354, 340), s(361, 321), s(329, 315), 
  s(298, 298), s(310, 314), s(329, 321), s(332, 336), s(354, 334), s(340, 312), s(341, 308), s(310, 309), 
  s(279, 278), s(289, 292), s(298, 304), s(323, 303), s(325, 303), s(325, 301), s(307, 284), s(304, 292), 
  s(226, 262), s(275, 281), s(272, 281), s(289, 289), s(296, 287), s(299, 279), s(279, 288), s(277, 267), 
]),
// Bishop PST
Pst::new([
  s(323, 357), s(306, 356), s(264, 364), s(245, 372), s(270, 369), s(266, 363), s(309, 360), s(312, 343), 
  s(329, 322), s(331, 336), s(332, 332), s(294, 341), s(332, 334), s(347, 341), s(334, 340), s(316, 325), 
  s(334, 336), s(357, 326), s(343, 337), s(354, 328), s(362, 331), s(386, 341), s(382, 337), s(375, 331), 
  s(322, 328), s(343, 333), s(349, 338), s(381, 349), s(362, 350), s(371, 343), s(341, 338), s(343, 331), 
  s(327, 317), s(337, 330), s(349, 341), s(368, 344), s(370, 342), s(340, 340), s(337, 333), s(343, 311), 
  s(332, 316), s(353, 324), s(357, 331), s(351, 337), s(355, 340), s(357, 331), s(349, 323), s(351, 308), 
  s(350, 308), s(350, 304), s(355, 307), s(340, 319), s(347, 320), s(361, 313), s(368, 310), s(346, 297), 
  s(322, 296), s(352, 314), s(326, 316), s(321, 308), s(328, 307), s(320, 323), s(344, 298), s(346, 285), 
]),
// Rook PST
Pst::new([
  s(532, 611), s(545, 608), s(522, 623), s(548, 610), s(570, 600), s(547, 604), s(538, 607), s(571, 596), 
  s(515, 597), s(528, 600), s(539, 604), s(562, 590), s(550, 587), s(583, 583), s(569, 580), s(570, 580), 
  s(497, 594), s(523, 593), s(523, 592), s(527, 592), s(562, 579), s(575, 568), s(617, 565), s(570, 565), 
  s(477, 596), s(505, 585), s(504, 599), s(514, 589), s(525, 578), s(534, 574), s(540, 571), s(519, 574), 
  s(465, 582), s(476, 584), s(489, 585), s(500, 580), s(507, 578), s(488, 577), s(521, 569), s(488, 570), 
  s(465, 572), s(472, 575), s(485, 564), s(486, 570), s(497, 566), s(504, 556), s(526, 544), s(492, 547), 
  s(452, 566), s(470, 567), s(482, 567), s(486, 564), s(494, 554), s(501, 553), s(521, 541), s(449, 562), 
  s(468, 567), s(471, 565), s(477, 566), s(487, 559), s(493, 552), s(489, 562), s(483, 559), s(471, 549), 
]),
// Queen PST
Pst::new([
  s(962, 1080), s(996, 1081), s(1028, 1088), s(1048, 1087), s(1050, 1088), s(1049, 1077), s(1052, 1054), s(1033, 1075), 
  s(948, 995), s(924, 1017), s(953, 1023), s(947, 1042), s(953, 1054), s(989, 1020), s(984, 1004), s(1014, 1010), 
  s(947, 991), s(933, 1007), s(952, 1018), s(948, 1041), s(977, 1028), s(1015, 1012), s(1028, 982), s(1013, 1001), 
  s(934, 1000), s(932, 1006), s(939, 1007), s(939, 1025), s(959, 1026), s(967, 1019), s(971, 1023), s(965, 1014), 
  s(934, 980), s(930, 1002), s(935, 1006), s(937, 1029), s(944, 1017), s(938, 1012), s(955, 988), s(955, 998), 
  s(927, 975), s(941, 982), s(940, 997), s(939, 998), s(941, 1007), s(954, 976), s(958, 970), s(952, 965), 
  s(933, 956), s(936, 961), s(945, 956), s(952, 960), s(950, 960), s(962, 927), s(962, 922), s(963, 906), 
  s(921, 953), s(921, 952), s(927, 944), s(937, 936), s(932, 951), s(919, 947), s(938, 922), s(914, 942), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(181, 197), s(179, 193), s(171, 195), s(187, 180), s(152, 189), s(171, 181), s(127, 204), s(120, 211), 
  s(84, 157), s(76, 159), s(112, 147), s(114, 145), s(116, 133), s(166, 130), s(155, 153), s(124, 148), 
  s(63, 139), s(70, 122), s(84, 117), s(94, 98), s(109, 101), s(107, 101), s(92, 110), s(88, 116), 
  s(61, 113), s(58, 111), s(80, 105), s(97, 97), s(99, 95), s(97, 96), s(81, 94), s(82, 96), 
  s(67, 112), s(72, 107), s(85, 107), s(90, 112), s(103, 113), s(104, 107), s(112, 94), s(94, 96), 
  s(66, 119), s(68, 112), s(74, 119), s(85, 121), s(90, 131), s(121, 110), s(120, 97), s(85, 98), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-18, -61), s(-4, -12), s(15, 0), s(-17, 25), s(-2, 9), s(6, 20), s(22, 25), s(16, -43), 
  s(-14, 0), s(1, 37), s(-59, 50), s(29, 46), s(0, 49), s(8, 67), s(25, 51), s(-3, 24), 
  s(-54, 18), s(11, 36), s(-33, 56), s(-46, 64), s(-12, 67), s(53, 68), s(58, 55), s(7, 21), 
  s(-47, 7), s(-41, 36), s(-74, 51), s(-111, 60), s(-109, 63), s(-76, 58), s(-69, 50), s(-97, 21), 
  s(-62, -16), s(-57, 11), s(-113, 38), s(-149, 51), s(-144, 51), s(-104, 39), s(-101, 25), s(-116, 5), 
  s(-20, -29), s(-7, -11), s(-80, 12), s(-107, 26), s(-104, 27), s(-85, 19), s(-37, -1), s(-54, -17), 
  s(53, -25), s(8, -3), s(-11, 5), s(-54, 14), s(-54, 19), s(-31, 13), s(22, -2), s(34, -24), 
  s(51, -78), s(79, -57), s(44, -41), s(-69, -21), s(-1, -38), s(-29, -19), s(53, -47), s(55, -80), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(81, 97), s(79, 93), s(71, 95), s(87, 80), s(52, 89), s(71, 81), s(27, 104), s(20, 111), 
  s(72, 106), s(80, 104), s(54, 86), s(44, 66), s(43, 83), s(32, 88), s(-2, 94), s(-7, 113), 
  s(48, 50), s(42, 58), s(31, 51), s(13, 60), s(2, 56), s(23, 54), s(-17, 77), s(0, 69), 
  s(31, 21), s(16, 34), s(-15, 36), s(-5, 35), s(-21, 35), s(4, 31), s(1, 50), s(7, 42), 
  s(18, -2), s(-8, 25), s(-29, 23), s(-17, 16), s(-15, 11), s(5, 9), s(-2, 35), s(30, 13), 
  s(0, 9), s(0, 20), s(-13, 14), s(-7, 4), s(1, -3), s(6, 5), s(25, 14), s(3, 16), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-55, -137),
  s(-3, -97),
  s(-1, -51),
  s(-9, -24),
  s(-13, -5),
  s(-25, -3),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(2, 20),
  s(1, -22),
  s(0, -26),
  s(-13, -14),
  s(-27, -18),
  s(-18, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(66, 141),
  s(115, 130),
  s(51, 45),
  s(20, 16),
  s(-3, -5),
  s(4, -8),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(35, 61);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(26, 18), s(29, 28), s(27, 28), s(30, 26), s(30, 29), s(31, 24), s(32, 19), s(39, 3), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(14, 12), s(23, 26), s(27, 32), s(32, 40), s(34, 45), s(37, 47), s(37, 48), s(35, 51), s(41, 46), s(47, 40), s(59, 39), s(30, 61), s(53, 29), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(5, 53), s(7, 64), s(8, 82), s(8, 91), s(11, 96), s(12, 101), s(13, 106), s(20, 107), s(22, 110), s(25, 112), s(29, 115), s(35, 117), s(43, 112), s(37, 110), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(57, 10), s(56, 22), s(58, 61), s(60, 84), s(60, 101), s(62, 108), s(61, 133), s(63, 140), s(64, 141), s(67, 146), s(66, 157), s(68, 156), s(71, 160), s(69, 166), s(75, 169), s(73, 173), s(83, 170), s(91, 168), s(108, 159), s(119, 159), s(141, 146), s(132, 140), s(132, 137), s(131, 137), s(120, 129), s(75, 102), s(56, 85), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(16, 29), s(28, 41), s(39, 48), s(51, 52), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(4, 20), s(11, 26), s(16, 31), s(21, 36), s(22, 39), s(28, 38), s(34, 44), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 12), s(12, 15), s(20, 19), s(27, 26), s(32, 30), s(38, 32), s(42, 38), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(-3, 110), s(0, 120), s(0, 127), s(3, 133), s(4, 140), s(5, 140), s(7, 144), s(10, 148), s(10, 156), s(16, 150), s(12, 156), s(42, 130), s(39, 142), s(77, 119), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 24);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(78, 48);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(109, 8);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(102, -28);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(37, 32);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(81, 11);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(67, -48);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(23, 28);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(67, 26);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(92, 21);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(90, -11);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-46, 81);

pub const TEMPO_BONUS: ScoreTuple = s(36, 20);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-38, -566), s(-117, -163), s(627, -815), s(-425, -664), s(191, 1726), s(-693, -374), s(-638, -885), s(513, 1844), ],
  [s(-321, -622), s(-197, -806), s(744, -937), s(-516, -770), s(-730, 1036), s(-685, -762), s(-649, -462), s(569, 1677), ],
  [s(219, 1184), s(-331, -685), s(634, 472), s(-566, 4042), s(-756, 1005), s(-712, -698), s(-547, 170), s(535, 454), ],
  [s(-666, 1170), s(-642, -685), s(643, 589), s(-588, 5267), s(-700, 708), s(-701, -684), s(-605, -5902), s(645, -1605), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(385, -755), s(-296, -722), s(618, 425), s(346, -294), s(-1017, -516), s(-688, -693), s(588, 114), s(594, -816), ],
  [s(1134, -902), s(-256, 100), s(-912, 111), s(507, -307), s(1488, -84), s(700, -98), s(494, 37), s(-539, -503), ],
  [s(676, 237), s(-359, -688), s(315, -22), s(-611, -303), s(-336, -331), s(-709, -664), s(-327, 5), s(564, 11), ],
  [s(-201, 289), s(-193, -647), s(1338, 346), s(265, -284), s(-878, -311), s(-704, -561), s(-129, 3277), s(588, 329), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(-214, 876), s(-461, -658), s(440, 1211), s(-471, -1624), s(-508, 1631), s(-696, -689), s(-512, -4555), s(615, -975), ],
  [s(-314, 413), s(-147, -613), s(167, 569), s(522, 685), s(42, 317), s(-679, -663), s(392, -4078), s(707, 757), ],
  [s(673, -847), s(-208, -791), s(-1311, 315), s(573, 12), s(473, 447), s(-539, -761), s(-204, 1467), s(296, 110), ],
  [s(1130, -1222), s(-63, 210), s(-712, -412), s(377, -46), s(433, -711), s(621, 125), s(480, 1311), s(-524, -69), ],
  [s(1158, -708), s(-122, 316), s(-925, -34), s(610, -294), s(-57, -1097), s(643, 178), s(802, 1267), s(-649, -371), ],
  [s(1143, -643), s(115, 147), s(-355, -151), s(342, -550), s(11, -2522), s(459, 38), s(833, 1149), s(-755, -938), ],
  [s(921, -213), s(40, -423), s(-473, -213), s(516, -1425), s(-71, -2421), s(559, -239), s(952, 819), s(-758, -2215), ],
  [s(-577, 909), s(-80, -348), s(1075, 521), s(-505, 2772), s(-266, -1152), s(-288, -393), s(130, 243), s(51, -499), ],
]);

pub const TROPISM: [ScoreTuple; 8] = 
  [s(563, -541), s(-711, -784), s(759, 794), s(-519, 388), s(-613, 258), s(-691, -846), s(89, 48), s(581, -187), ];

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-790, 1121), s(-59, -275), s(-52, 1648), s(-215, -7021), s(-277, 1521), s(-380, -273), s(-640, -2788), s(514, -1829), ],
  [s(-325, 815), s(-4, -336), s(983, 1257), s(-356, -8209), s(-651, 744), s(-442, -80), s(-566, -2272), s(425, -1046), ],
  [s(-851, 751), s(-35, -275), s(274, 1444), s(-141, -5121), s(139, 1176), s(-401, -237), s(-529, -1028), s(400, -2163), ],
  [s(-872, -15), s(-145, -501), s(258, 811), s(-56, -7052), s(-351, 753), s(-595, -289), s(-623, 979), s(573, -1288), ],
  [s(-725, 93), s(-142, -383), s(416, 971), s(-263, -4268), s(-1025, 279), s(-564, -285), s(-592, 624), s(581, -177), ],
  [s(-863, 677), s(-15, -449), s(225, 1201), s(14, -4167), s(-1163, 642), s(-570, -362), s(-648, 600), s(555, -648), ],
  [s(592, -534), s(29, -602), s(-548, -154), s(938, -1086), s(391, 215), s(-579, -492), s(-315, 325), s(490, 366), ],
  [s(429, -478), s(-54, -573), s(-765, -489), s(1274, -600), s(539, -20), s(-536, -396), s(-9, 792), s(534, -143), ],
  [s(83, 3), s(-147, -592), s(-301, 146), s(-240, -1341), s(482, 995), s(-604, -493), s(-333, 1233), s(569, 592), ],
  [s(681, -545), s(-114, -639), s(-65, 673), s(697, 25), s(98, 2234), s(-606, -376), s(72, -278), s(39, 330), ],
  [s(1009, -1191), s(-51, -618), s(-1088, 275), s(1026, -105), s(1625, 2000), s(-580, -195), s(488, 1054), s(-273, 1704), ],
  [s(820, -1559), s(-212, -750), s(25, 596), s(932, 156), s(1603, 1296), s(-624, -437), s(4, -219), s(490, 631), ],
  [s(388, -417), s(-82, -699), s(391, 602), s(930, 323), s(473, 1539), s(-631, -391), s(-30, -633), s(597, 665), ],
  [s(552, -417), s(-242, -688), s(-359, 603), s(832, -329), s(619, 1983), s(-669, -278), s(-267, 247), s(631, 991), ],
  [s(592, -1263), s(-163, -733), s(-122, 868), s(1308, -219), s(-79, 1350), s(-651, -546), s(-259, -904), s(622, 661), ],
  [s(254, -61), s(-103, -660), s(-65, 1710), s(-373, -445), s(185, 561), s(-687, -580), s(-193, -1449), s(602, 867), ],
  [s(-635, -798), s(-264, -623), s(-61, 606), s(-576, 337), s(-74, 176), s(-673, -685), s(-245, -1029), s(586, 779), ],
  [s(572, -1108), s(-107, -679), s(-18, 720), s(-66, 529), s(1102, 1016), s(-677, -693), s(134, -599), s(599, 1102), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(436, -996), s(-62, -465), s(770, 1044), s(426, -825), s(-856, 1878), s(-578, -324), s(451, 1194), s(-431, 782), ],
  [s(305, -1407), s(-237, -497), s(825, 448), s(620, -201), s(387, 2045), s(-626, -321), s(179, 435), s(-312, 634), ],
  [s(141, -335), s(-204, -677), s(422, 963), s(-456, -438), s(-530, 1830), s(-660, -641), s(-498, -498), s(588, 1202), ],
  [s(399, -128), s(-287, -705), s(112, -850), s(-708, 207), s(-411, 1013), s(-673, -754), s(-488, 1338), s(573, 1379), ],
  [s(395, -820), s(-234, -670), s(240, 26), s(531, 18), s(-1193, 1006), s(-666, -606), s(259, 1431), s(634, 1238), ],
  [s(-663, -189), s(-354, -681), s(708, 982), s(-812, -581), s(-1079, 1636), s(-682, -731), s(-154, 5), s(640, 622), ],
  [s(472, -719), s(-187, -799), s(433, -835), s(-437, -148), s(-206, 1010), s(-645, -473), s(-515, 2044), s(573, 2614), ],
  [s(-59, -636), s(-156, -611), s(599, -744), s(-849, 250), s(-201, 912), s(-634, -685), s(-315, 2646), s(556, 1342), ],
  [s(421, -759), s(-229, -718), s(60, -1577), s(-47, -141), s(911, 895), s(-673, -634), s(-236, 1446), s(606, 1654), ],
  [s(800, -1062), s(16, 249), s(-622, -231), s(1241, -667), s(772, 1080), s(258, -44), s(-392, 2996), s(-274, 1335), ],
  [s(996, -488), s(-16, -376), s(-894, -1391), s(874, 279), s(-145, -353), s(524, 55), s(719, 3400), s(-583, 1173), ],
  [s(950, 285), s(-91, 105), s(34, -956), s(509, 17), s(785, 544), s(588, 106), s(451, 2532), s(-652, 768), ],
  [s(1248, -1483), s(-26, 273), s(-717, -2000), s(925, 1599), s(531, 641), s(627, 480), s(939, 2690), s(-607, 2194), ],
  [s(1216, -1170), s(130, 257), s(-892, -1603), s(545, 522), s(1388, 469), s(674, 433), s(873, 2424), s(-613, 2395), ],
  [s(1236, -1271), s(130, 386), s(-1050, -1702), s(510, 661), s(1087, -69), s(650, 383), s(857, 3231), s(-600, 3054), ],
  [s(1107, -1367), s(2, 313), s(-652, -1837), s(464, 90), s(1157, -197), s(587, 414), s(902, 4180), s(-588, 2016), ],
  [s(1164, -1042), s(-70, 453), s(-547, -1687), s(570, -732), s(1072, -54), s(594, -89), s(887, 3548), s(-607, 1631), ],
  [s(1081, -1293), s(69, 434), s(-964, -1419), s(987, 485), s(690, -218), s(645, 319), s(866, 4845), s(-575, 1936), ],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(762, 262), s(-514, -1022), s(-122, 938), s(-55, -107), s(-575, -498), s(-738, -1006), s(-196, -2377), s(626, -943), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(-101, 76), s(-700, 106), s(729, 451), s(-619, 1085), s(-757, -477), s(-713, -404), s(76, -2397), s(239, -669), ];

pub const OUTPUT_BIAS: ScoreTuple = s(6, -1);

pub const SAFETY_WEIGHT: ScoreTuple = s(103, 46);

