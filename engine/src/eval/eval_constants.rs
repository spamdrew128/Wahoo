#![cfg_attr(rustfmt, rustfmt_skip)]
use crate::{eval::{evaluation::ScoreTuple, piece_tables::{Pst, Prt, SafetyPrt}}, board::board_representation::NUM_PIECES};

const fn s(mg: i32, eg: i32) -> ScoreTuple { ScoreTuple::new(mg, eg) }

pub const MATERIAL_PSTS: [Pst; NUM_PIECES as usize] = [
// Knight PST
Pst::new([
  s(215, 246), s(259, 305), s(277, 341), s(304, 326), s(320, 333), s(300, 309), s(281, 297), s(239, 243), 
  s(269, 301), s(310, 316), s(318, 313), s(324, 316), s(325, 302), s(349, 305), s(318, 305), s(308, 275), 
  s(288, 301), s(323, 311), s(341, 333), s(348, 328), s(347, 321), s(356, 317), s(321, 302), s(324, 276), 
  s(313, 307), s(327, 322), s(347, 342), s(374, 341), s(362, 336), s(349, 342), s(336, 319), s(331, 297), 
  s(308, 314), s(327, 318), s(337, 341), s(354, 339), s(358, 340), s(348, 328), s(347, 317), s(317, 309), 
  s(293, 301), s(311, 312), s(326, 320), s(331, 332), s(349, 328), s(330, 313), s(324, 306), s(306, 304), 
  s(279, 287), s(286, 296), s(301, 305), s(322, 303), s(319, 303), s(313, 304), s(291, 290), s(300, 294), 
  s(245, 267), s(276, 285), s(273, 283), s(290, 289), s(301, 283), s(292, 274), s(277, 292), s(274, 271), 
]),
// Bishop PST
Pst::new([
  s(313, 349), s(291, 353), s(271, 353), s(253, 360), s(265, 359), s(285, 349), s(304, 346), s(279, 337), 
  s(320, 319), s(327, 331), s(324, 329), s(305, 331), s(308, 327), s(324, 336), s(296, 338), s(290, 324), 
  s(332, 331), s(351, 324), s(342, 330), s(353, 318), s(326, 329), s(348, 339), s(324, 334), s(337, 321), 
  s(321, 327), s(342, 333), s(349, 334), s(372, 345), s(357, 340), s(345, 343), s(337, 332), s(326, 328), 
  s(330, 318), s(331, 332), s(345, 340), s(366, 341), s(365, 339), s(339, 345), s(335, 331), s(332, 313), 
  s(330, 317), s(356, 327), s(355, 332), s(352, 336), s(351, 340), s(360, 333), s(352, 324), s(339, 311), 
  s(346, 314), s(347, 306), s(356, 305), s(336, 317), s(344, 317), s(348, 311), s(355, 309), s(344, 293), 
  s(324, 297), s(349, 312), s(324, 310), s(315, 309), s(330, 305), s(300, 327), s(327, 304), s(331, 284), 
]),
// Rook PST
Pst::new([
  s(570, 594), s(571, 595), s(576, 598), s(573, 597), s(573, 594), s(567, 592), s(561, 594), s(571, 592), 
  s(539, 580), s(546, 586), s(567, 587), s(572, 581), s(564, 578), s(558, 580), s(557, 574), s(568, 567), 
  s(514, 580), s(546, 577), s(541, 580), s(548, 574), s(566, 567), s(543, 567), s(574, 564), s(549, 558), 
  s(502, 581), s(522, 577), s(531, 582), s(537, 576), s(546, 565), s(550, 562), s(533, 564), s(530, 563), 
  s(489, 570), s(494, 573), s(507, 573), s(521, 570), s(525, 567), s(512, 565), s(528, 555), s(504, 554), 
  s(485, 561), s(496, 561), s(507, 558), s(511, 561), s(520, 556), s(524, 549), s(534, 537), s(500, 544), 
  s(478, 555), s(493, 557), s(510, 555), s(513, 554), s(519, 547), s(507, 553), s(532, 538), s(473, 553), 
  s(490, 562), s(493, 556), s(502, 557), s(510, 550), s(515, 545), s(490, 560), s(491, 555), s(491, 556), 
]),
// Queen PST
Pst::new([
  s(961, 994), s(973, 995), s(990, 998), s(995, 1000), s(998, 1002), s(960, 974), s(972, 972), s(969, 978), 
  s(946, 967), s(927, 986), s(947, 982), s(951, 981), s(950, 981), s(953, 958), s(969, 956), s(985, 966), 
  s(938, 970), s(939, 980), s(950, 988), s(954, 981), s(953, 976), s(957, 961), s(964, 949), s(961, 946), 
  s(927, 983), s(937, 984), s(943, 979), s(948, 984), s(954, 975), s(961, 954), s(963, 955), s(961, 944), 
  s(927, 975), s(926, 979), s(935, 978), s(942, 990), s(955, 978), s(940, 956), s(951, 945), s(948, 942), 
  s(927, 949), s(934, 978), s(938, 984), s(937, 981), s(942, 973), s(948, 961), s(955, 949), s(950, 923), 
  s(928, 944), s(932, 959), s(939, 963), s(945, 953), s(945, 947), s(947, 939), s(953, 926), s(950, 893), 
  s(914, 942), s(916, 937), s(923, 937), s(928, 936), s(926, 953), s(922, 932), s(918, 922), s(931, 914), 
]),
// Pawn PST
Pst::new([
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
  s(165, 178), s(168, 175), s(162, 174), s(164, 166), s(155, 172), s(163, 172), s(152, 179), s(161, 181), 
  s(84, 165), s(86, 166), s(112, 149), s(121, 148), s(111, 142), s(143, 146), s(117, 163), s(86, 166), 
  s(72, 136), s(79, 120), s(91, 115), s(94, 102), s(116, 102), s(97, 112), s(89, 115), s(72, 121), 
  s(71, 112), s(66, 111), s(86, 103), s(102, 101), s(104, 97), s(95, 100), s(82, 97), s(72, 99), 
  s(71, 113), s(81, 105), s(90, 106), s(96, 111), s(107, 113), s(95, 108), s(101, 95), s(80, 101), 
  s(65, 121), s(71, 112), s(75, 118), s(85, 120), s(85, 135), s(88, 116), s(93, 104), s(67, 111), 
  s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), s(100, 100), 
]),
// King PST
Pst::new([
  s(-10, -44), s(5, -4), s(16, 26), s(1, 39), s(-3, 30), s(-9, 23), s(3, 3), s(-1, -43), 
  s(-16, -38), s(7, -4), s(-2, 23), s(25, 24), s(4, 29), s(0, 27), s(4, 0), s(-13, -31), 
  s(-29, -46), s(22, -18), s(1, 6), s(-17, 20), s(4, 22), s(32, 10), s(16, -6), s(-8, -45), 
  s(10, -52), s(27, -19), s(13, 2), s(-17, 13), s(-10, 14), s(-8, 8), s(-1, -9), s(-30, -41), 
  s(11, -46), s(22, -21), s(1, 2), s(-18, 13), s(-19, 13), s(0, 3), s(-8, -11), s(-24, -33), 
  s(29, -31), s(23, -4), s(-20, 14), s(-21, 21), s(-22, 23), s(-26, 19), s(10, 4), s(16, -18), 
  s(55, -24), s(9, 1), s(-11, 12), s(-30, 17), s(-39, 24), s(-26, 20), s(13, 8), s(17, -13), 
  s(36, -29), s(39, -5), s(9, 14), s(-53, 20), s(-9, 10), s(-44, 29), s(19, 5), s(27, -27), 
]),
];

pub const PASSER_PST: Pst = Pst::new([
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
  s(65, 78), s(68, 75), s(62, 74), s(64, 66), s(55, 72), s(63, 72), s(52, 79), s(61, 81), 
  s(67, 82), s(70, 81), s(54, 70), s(38, 58), s(48, 66), s(42, 68), s(18, 74), s(6, 83), 
  s(27, 57), s(27, 61), s(31, 47), s(24, 52), s(0, 52), s(19, 46), s(2, 66), s(-1, 68), 
  s(10, 29), s(10, 34), s(-8, 32), s(-1, 27), s(-14, 31), s(0, 27), s(8, 45), s(-4, 43), 
  s(7, 2), s(-7, 24), s(-18, 18), s(-13, 9), s(-14, 8), s(1, 8), s(0, 30), s(9, 19), 
  s(0, 10), s(1, 16), s(-8, 9), s(-4, 1), s(12, -16), s(4, 3), s(7, 16), s(-3, 16), 
  s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), s(0, 0), 
]);

pub const PASSER_BLOCKERS_PRT: Prt = Prt::new([
  s(-49, -74),
  s(-14, -73),
  s(-11, -34),
  s(-14, -18),
  s(-8, -5),
  s(-3, -12),
  s(0, 0),
  s(0, 0),
]);

pub const ISOLATED_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(23, 34),
  s(-7, -12),
  s(-5, -24),
  s(-16, -15),
  s(-25, -19),
  s(-13, -17),
  s(0, 0),
]);

pub const PHALANX_PAWNS_PRT: Prt = Prt::new([
  s(0, 0),
  s(49, 83),
  s(80, 86),
  s(49, 40),
  s(19, 12),
  s(-4, -2),
  s(7, -6),
  s(0, 0),
]);

pub const BISHOP_PAIR_BONUS: ScoreTuple = s(38, 57);

pub const KNIGHT_MOBILITY: [ScoreTuple; 9] = [
  s(0, 0), s(31, 16), s(34, 27), s(33, 28), s(33, 27), s(33, 29), s(34, 24), s(33, 19), s(30, 8), 
];

pub const BISHOP_MOBILITY: [ScoreTuple; 14] = [
  s(0, 0), s(19, 11), s(28, 24), s(32, 32), s(36, 37), s(38, 44), s(39, 45), s(39, 45), s(36, 47), s(37, 42), s(40, 37), s(42, 36), s(21, 50), s(8, 32), 
];

pub const ROOK_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(17, 39), s(19, 46), s(20, 62), s(19, 71), s(23, 75), s(25, 78), s(27, 83), s(32, 83), s(35, 86), s(38, 87), s(41, 89), s(48, 90), s(48, 89), s(43, 87), 
];

pub const QUEEN_MOBILITY: [ScoreTuple; 28] = [
  s(0, 0), s(53, -13), s(53, 10), s(57, 25), s(57, 52), s(58, 58), s(60, 71), s(61, 83), s(63, 91), s(64, 95), s(66, 98), s(68, 99), s(69, 98), s(71, 100), s(73, 99), s(77, 98), s(77, 100), s(79, 97), s(81, 94), s(85, 88), s(83, 86), s(88, 81), s(75, 71), s(61, 64), s(59, 61), s(45, 47), s(17, 21), s(9, 13), 
];

pub const KNIGHT_FORWARD_MOBILITY: [ScoreTuple; 5] = [
  s(0, 0), s(16, 23), s(28, 34), s(39, 39), s(49, 42), 
];

pub const BISHOP_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(5, 18), s(11, 24), s(15, 28), s(19, 33), s(20, 34), s(22, 34), s(28, 39), 
];

pub const ROOK_FORWARD_MOBILITY: [ScoreTuple; 8] = [
  s(0, 0), s(0, 25), s(4, 28), s(9, 34), s(15, 40), s(18, 43), s(22, 45), s(25, 47), 
];

pub const QUEEN_FORWARD_MOBILITY: [ScoreTuple; 15] = [
  s(0, 0), s(8, 82), s(11, 89), s(13, 96), s(17, 92), s(18, 93), s(20, 95), s(23, 93), s(26, 93), s(28, 92), s(33, 88), s(35, 81), s(43, 64), s(41, 64), s(48, 48), 
];

pub const PAWN_THREAT_ON_KNIGHT: ScoreTuple = s(79, 30);
pub const PAWN_THREAT_ON_BISHOP: ScoreTuple = s(78, 51);
pub const PAWN_THREAT_ON_ROOK: ScoreTuple = s(87, 21);
pub const PAWN_THREAT_ON_QUEEN: ScoreTuple = s(82, 9);
pub const KNIGHT_THREAT_ON_BISHOP: ScoreTuple = s(39, 32);
pub const KNIGHT_THREAT_ON_ROOK: ScoreTuple = s(79, 14);
pub const KNIGHT_THREAT_ON_QUEEN: ScoreTuple = s(65, -33);
pub const BISHOP_THREAT_ON_KNIGHT: ScoreTuple = s(25, 25);
pub const BISHOP_THREAT_ON_ROOK: ScoreTuple = s(67, 22);
pub const BISHOP_THREAT_ON_QUEEN: ScoreTuple = s(81, 62);
pub const ROOK_THREAT_ON_QUEEN: ScoreTuple = s(79, 28);

pub const PASSER_SQ_RULE_BONUS: ScoreTuple = s(-13, 64);

pub const TEMPO_BONUS: ScoreTuple = s(37, 19);

// KING SAFETY FEATURES
pub const ATTACKS: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(456, 234), s(318, 210), s(217, -68), s(323, -146), s(-105, -116), s(-38, -80), s(263, -36), s(38, 202), ],
  [s(399, 294), s(213, 203), s(165, -467), s(79, 78), s(-151, -371), s(-52, -34), s(177, -34), s(81, 142), ],
  [s(412, -106), s(153, 316), s(267, 49), s(389, 101), s(-82, 303), s(-36, -65), s(226, -61), s(39, 121), ],
  [s(441, 87), s(259, -3130), s(54, -72), s(25, 295), s(358, -165), s(-38, -60), s(290, -50), s(136, 145), ],
];

pub const DEFENSES: [[ScoreTuple; 8]; (NUM_PIECES - 2) as usize] = [
  [s(-203, -178), s(-161, 165), s(-123, 68), s(-112, 173), s(24, 371), s(-46, -75), s(-137, -66), s(-64, -167), ],
  [s(-320, -23), s(-220, 147), s(-46, 42), s(37, 9), s(-47, 220), s(-24, -61), s(-122, -74), s(-22, -34), ],
  [s(-272, -30), s(-68, 73), s(-74, 51), s(-107, 1), s(15, 185), s(-38, -105), s(21, -98), s(-114, -28), ],
  [s(-291, -189), s(55, -92), s(14, 96), s(-61, -1827), s(34, 128), s(-46, -75), s(9, -88), s(-72, -80), ],
];

pub const ENEMY_KING_RANK: SafetyPrt = SafetyPrt::new([
  [s(413, 724), s(586, 112), s(567, -1989), s(830, 145), s(549, 173), s(-46, -80), s(397, -73), s(673, 72), ],
  [s(-730, 415), s(754, -32), s(76, -476), s(958, 43), s(227, 53), s(-25, -58), s(800, -54), s(679, -20), ],
  [s(-1901, 804), s(871, 446), s(-829, 172), s(-1170, -259), s(-3156, 49), s(-1, -40), s(731, -28), s(500, -46), ],
  [s(-2701, -617), s(2996, 674), s(-787, 638), s(-2801, 15), s(-3866, 1123), s(-6, -27), s(-1471, -17), s(1350, -24), ],
  [s(-1086, -1153), s(1068, 594), s(-834, 973), s(-4446, 283), s(-3440, 1069), s(1, -23), s(-2464, 3), s(2608, -209), ],
  [s(-1846, -1837), s(523, 564), s(-2322, 1114), s(-3707, 889), s(1143, 867), s(15, -10), s(246, -6), s(2012, -17), ],
  [s(-1960, -3721), s(279, 385), s(-1303, 736), s(-725, 835), s(1182, 993), s(0, -13), s(173, -2), s(2105, 197), ],
  [s(-1534, -2166), s(566, 284), s(-901, 554), s(-2311, 519), s(1143, 1878), s(-11, 9), s(-425, -10), s(2564, 243), ],
]);

pub const ATTACKING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(1993, -3095), s(-1159, -2561), s(-1462, -2083), s(-2494, -448), s(139, -3118), s(-10, 0), s(-87, 8), s(-99, 610), ],
  [s(1791, -3651), s(-2712, -5159), s(1196, -1711), s(3420, -229), s(12, -2922), s(4, 3), s(-199, 8), s(716, 614), ],
  [s(305, -2234), s(1114, -2828), s(-430, -942), s(4519, -654), s(3003, -2279), s(-6, 10), s(2103, 3), s(-446, 66), ],
  [s(2034, -1259), s(-1590, 825), s(-168, -620), s(-877, 0), s(1, 278), s(-6, 9), s(1000, 4), s(-102, 646), ],
  [s(1754, -1577), s(-654, 202), s(-528, -366), s(-615, -885), s(-1011, 201), s(-11, 14), s(160, 3), s(-1188, 1164), ],
  [s(1936, -1032), s(-781, 1632), s(-166, -364), s(-603, 143), s(-301, 1078), s(-11, 16), s(-4977, -12), s(326, 778), ],
  [s(501, -257), s(-413, -143), s(451, 14), s(-539, -367), s(-1, -519), s(-6, -14), s(694, -5), s(-19, 620), ],
  [s(713, -265), s(92, 334), s(-7, -225), s(29, -319), s(127, -178), s(1, -20), s(334, -8), s(-1791, 1169), ],
  [s(497, -371), s(-799, 95), s(668, -33), s(-916, -354), s(-195, -219), s(-8, -26), s(-35, -18), s(-19, 778), ],
  [s(-141, 382), s(-461, -183), s(129, -267), s(-141, -361), s(-20, -664), s(-12, -45), s(352, -24), s(-211, 260), ],
  [s(-23, 525), s(-336, 266), s(-51, -492), s(-389, -493), s(343, -276), s(-15, -42), s(6, -29), s(-2096, 346), ],
  [s(-161, 265), s(-106, -22), s(331, -286), s(77, -293), s(-109, -356), s(-11, -46), s(-278, -24), s(-222, 251), ],
  [s(-75, 558), s(-779, 7), s(254, -428), s(118, -38), s(-43, -500), s(-17, -49), s(91, -34), s(-175, -40), ],
  [s(35, 524), s(-457, 189), s(208, -591), s(-399, -145), s(391, -205), s(-14, -50), s(-441, -35), s(-1646, -105), ],
  [s(148, 365), s(-266, -93), s(314, -446), s(258, -252), s(-223, -278), s(-16, -52), s(-1053, -51), s(46, -169), ],
  [s(126, 413), s(-796, 155), s(242, -588), s(-264, -244), s(278, 95), s(-20, -63), s(-117, -53), s(-222, -288), ],
  [s(167, 301), s(-393, 51), s(145, -696), s(-379, -30), s(306, -94), s(-23, -67), s(-417, -53), s(-1180, -235), ],
  [s(-51, 206), s(-349, -223), s(180, -686), s(345, -6), s(-374, -333), s(-33, -61), s(-692, -57), s(169, -280), ],
];

pub const DEFENDING_PAWN_LOCATIONS: [[ScoreTuple; 8]; 18] = [
  [s(-199, 115), s(47, -702), s(-2358, 735), s(9, 13), s(528, -636), s(-16, -48), s(-68, -49), s(-11, 411), ],
  [s(-446, 50), s(-1209, -400), s(-403, 791), s(63, -53), s(850, 48), s(-3, -55), s(-321, -54), s(-763, 485), ],
  [s(-617, 346), s(156, 249), s(-205, 825), s(302, 17), s(429, 408), s(-32, -62), s(-1288, -47), s(-168, 412), ],
  [s(93, 31), s(-163, -150), s(-949, 641), s(40, -71), s(105, -283), s(-11, -30), s(-185, -12), s(135, 746), ],
  [s(-81, -181), s(-575, -153), s(918, 826), s(495, -63), s(496, -213), s(-21, -68), s(-125, -54), s(-1103, 1143), ],
  [s(-370, 131), s(693, -16), s(243, 631), s(379, 35), s(603, -257), s(-26, -53), s(-1427, -50), s(60, 838), ],
  [s(158, 474), s(-934, 341), s(-432, 728), s(-222, -439), s(304, -115), s(-11, -41), s(280, -18), s(-20, 662), ],
  [s(270, 116), s(-339, 491), s(49, 858), s(-564, -297), s(577, 342), s(-7, -42), s(-389, -18), s(-1861, 960), ],
  [s(-5, 354), s(-53, 228), s(313, 713), s(32, -393), s(475, -74), s(-17, -33), s(-1149, -35), s(371, 646), ],
  [s(90, 1097), s(-1318, 805), s(-67, 890), s(-949, -494), s(729, -425), s(-9, -21), s(343, -20), s(292, 635), ],
  [s(238, 900), s(181, 901), s(-74, 961), s(-489, 100), s(317, -289), s(4, -22), s(-654, -12), s(-2808, 808), ],
  [s(-35, 984), s(-396, 493), s(547, 807), s(-206, -427), s(339, -545), s(-3, -21), s(-739, -14), s(302, 503), ],
  [s(42, 1514), s(-1081, 726), s(-288, 1017), s(-921, -3438), s(48, -662), s(11, -16), s(297, -10), s(85, 231), ],
  [s(303, 1465), s(472, 1034), s(-278, 964), s(-388, 1240), s(-50, -1919), s(-8, -7), s(-586, -10), s(-3609, 617), ],
  [s(-255, 1367), s(-262, 79), s(240, 1249), s(92, -1623), s(294, -988), s(7, -12), s(-579, -7), s(469, -148), ],
  [s(-926, 1480), s(-223, -1561), s(-589, 908), s(2216, -3581), s(-598, -3540), s(-9, 2), s(491, -10), s(806, -556), ],
  [s(-870, 1270), s(1997, -190), s(623, 683), s(-733, 956), s(2587, -4629), s(1, -1), s(-1065, -6), s(-634, -592), ],
  [s(864, 1612), s(93, -853), s(-1151, 622), s(-598, -3109), s(-1226, -3001), s(-8, -11), s(-1882, 0), s(-23, -2448), ],
];

pub const ATTACKING_PIECE_LOCATIONS: [[[ScoreTuple; 8]; 24]; 4] = [
[
  [s(1053, -1), s(-241, 574), s(1829, -927), s(2355, 1114), s(301, -1104), s(-4, -4), s(140, 3), s(-436, 248), ],
  [s(162, -700), s(1071, 1984), s(1079, -206), s(2965, 2396), s(2968, -156), s(-11, 6), s(-1201, 11), s(2341, 840), ],
  [s(2110, 348), s(957, 1880), s(-205, -1213), s(2574, 1930), s(2229, -1321), s(-9, 7), s(1854, 11), s(94, 840), ],
  [s(1033, -661), s(611, 199), s(968, 78), s(2072, -59), s(-2574, -47), s(-9, -10), s(-779, -9), s(300, 719), ],
  [s(581, -60), s(440, 1174), s(-212, -16), s(-1211, 1170), s(1912, -60), s(-4, 7), s(-698, 9), s(541, 172), ],
  [s(1385, 358), s(451, 574), s(645, -268), s(2974, 497), s(-983, -638), s(-10, 10), s(194, 6), s(404, 282), ],
  [s(991, -329), s(186, 365), s(-738, -239), s(-571, 305), s(-912, -36), s(-12, -6), s(-392, -5), s(-19, 343), ],
  [s(775, -81), s(-468, -195), s(-500, -181), s(-537, 113), s(-169, -697), s(-13, 6), s(-290, 3), s(528, 217), ],
  [s(541, 491), s(-523, 319), s(-752, -1028), s(-589, -67), s(514, -295), s(-1, 7), s(214, 3), s(-72, -464), ],
  [s(1396, 70), s(472, 458), s(-695, -562), s(-530, -66), s(273, 13), s(-10, -2), s(303, 4), s(-22, -100), ],
  [s(863, 373), s(10, 1004), s(624, -863), s(158, 263), s(380, 3), s(-8, -13), s(349, 0), s(199, -60), ],
  [s(681, 298), s(73, 516), s(-918, -218), s(-1083, -304), s(8, 32), s(0, -2), s(-39, 0), s(118, 29), ],
  [s(473, 318), s(225, 218), s(-41, -419), s(-95, -82), s(453, -274), s(-14, 1), s(609, 1), s(32, 108), ],
  [s(965, 227), s(308, 489), s(-59, -170), s(218, -374), s(96, 190), s(-9, -4), s(261, 1), s(125, -57), ],
  [s(393, 240), s(616, 281), s(-412, -271), s(84, -347), s(234, -284), s(-9, -3), s(351, -3), s(109, 310), ],
  [s(-19, 281), s(137, -278), s(60, -412), s(240, -477), s(-99, -467), s(-4, -31), s(237, -22), s(184, -121), ],
  [s(-215, 295), s(384, -41), s(-241, -298), s(-143, -283), s(341, -415), s(0, -14), s(200, -18), s(-122, -45), ],
  [s(-110, 591), s(-149, 31), s(-204, -169), s(-32, -616), s(219, -384), s(-16, -10), s(276, -11), s(-54, -110), ],
  [s(49, 310), s(186, -207), s(-325, -273), s(66, -257), s(-78, -535), s(3, -4), s(275, -15), s(-27, -141), ],
  [s(-392, 511), s(-125, 81), s(-29, -148), s(6, -427), s(135, -294), s(-6, -6), s(170, -6), s(-117, -126), ],
  [s(-31, 739), s(414, -225), s(-92, -276), s(164, -336), s(45, -921), s(-11, -13), s(-118, -20), s(-153, -493), ],
  [s(122, 880), s(212, -197), s(11, -54), s(45, -374), s(46, -915), s(-9, -25), s(-209, -18), s(-109, -345), ],
  [s(-19, 580), s(34, 50), s(-129, -211), s(87, -195), s(38, -511), s(0, -8), s(152, -20), s(-57, -372), ],
  [s(54, 663), s(191, -87), s(-67, -182), s(-56, -472), s(241, -468), s(-8, -33), s(-312, -22), s(-110, -655), ],
],
[
  [s(581, -60), s(440, 1174), s(-212, -16), s(-1211, 1170), s(1912, -60), s(-4, 7), s(-698, 9), s(541, 172), ],
  [s(1385, 358), s(451, 574), s(645, -268), s(2974, 497), s(-983, -638), s(-10, 10), s(194, 6), s(404, 282), ],
  [s(991, -329), s(186, 365), s(-738, -239), s(-571, 305), s(-912, -36), s(-12, -6), s(-392, -5), s(-19, 343), ],
  [s(775, -81), s(-468, -195), s(-500, -181), s(-537, 113), s(-169, -697), s(-13, 6), s(-290, 3), s(528, 217), ],
  [s(541, 491), s(-523, 319), s(-752, -1028), s(-589, -67), s(514, -295), s(-1, 7), s(214, 3), s(-72, -464), ],
  [s(1396, 70), s(472, 458), s(-695, -562), s(-530, -66), s(273, 13), s(-10, -2), s(303, 4), s(-22, -100), ],
  [s(863, 373), s(10, 1004), s(624, -863), s(158, 263), s(380, 3), s(-8, -13), s(349, 0), s(199, -60), ],
  [s(681, 298), s(73, 516), s(-918, -218), s(-1083, -304), s(8, 32), s(0, -2), s(-39, 0), s(118, 29), ],
  [s(473, 318), s(225, 218), s(-41, -419), s(-95, -82), s(453, -274), s(-14, 1), s(609, 1), s(32, 108), ],
  [s(965, 227), s(308, 489), s(-59, -170), s(218, -374), s(96, 190), s(-9, -4), s(261, 1), s(125, -57), ],
  [s(393, 240), s(616, 281), s(-412, -271), s(84, -347), s(234, -284), s(-9, -3), s(351, -3), s(109, 310), ],
  [s(-19, 281), s(137, -278), s(60, -412), s(240, -477), s(-99, -467), s(-4, -31), s(237, -22), s(184, -121), ],
  [s(-215, 295), s(384, -41), s(-241, -298), s(-143, -283), s(341, -415), s(0, -14), s(200, -18), s(-122, -45), ],
  [s(-110, 591), s(-149, 31), s(-204, -169), s(-32, -616), s(219, -384), s(-16, -10), s(276, -11), s(-54, -110), ],
  [s(49, 310), s(186, -207), s(-325, -273), s(66, -257), s(-78, -535), s(3, -4), s(275, -15), s(-27, -141), ],
  [s(-392, 511), s(-125, 81), s(-29, -148), s(6, -427), s(135, -294), s(-6, -6), s(170, -6), s(-117, -126), ],
  [s(-31, 739), s(414, -225), s(-92, -276), s(164, -336), s(45, -921), s(-11, -13), s(-118, -20), s(-153, -493), ],
  [s(122, 880), s(212, -197), s(11, -54), s(45, -374), s(46, -915), s(-9, -25), s(-209, -18), s(-109, -345), ],
  [s(-19, 580), s(34, 50), s(-129, -211), s(87, -195), s(38, -511), s(0, -8), s(152, -20), s(-57, -372), ],
  [s(54, 663), s(191, -87), s(-67, -182), s(-56, -472), s(241, -468), s(-8, -33), s(-312, -22), s(-110, -655), ],
  [s(18, 269), s(366, -411), s(-365, -113), s(30, -204), s(6, -582), s(2, -3), s(-97, -9), s(239, -539), ],
  [s(-161, 885), s(6, -179), s(-222, -288), s(150, -63), s(-425, -1127), s(-10, -22), s(108, -3), s(-73, -609), ],
  [s(-318, 791), s(234, -326), s(-156, -32), s(-22, -47), s(-86, -1185), s(10, -18), s(-219, -5), s(64, -558), ],
  [s(-193, 531), s(36, -642), s(-373, -4), s(6, -542), s(-260, -771), s(2, -22), s(-128, -5), s(7, -632), ],
],
[
  [s(541, 491), s(-523, 319), s(-752, -1028), s(-589, -67), s(514, -295), s(-1, 7), s(214, 3), s(-72, -464), ],
  [s(1396, 70), s(472, 458), s(-695, -562), s(-530, -66), s(273, 13), s(-10, -2), s(303, 4), s(-22, -100), ],
  [s(863, 373), s(10, 1004), s(624, -863), s(158, 263), s(380, 3), s(-8, -13), s(349, 0), s(199, -60), ],
  [s(681, 298), s(73, 516), s(-918, -218), s(-1083, -304), s(8, 32), s(0, -2), s(-39, 0), s(118, 29), ],
  [s(473, 318), s(225, 218), s(-41, -419), s(-95, -82), s(453, -274), s(-14, 1), s(609, 1), s(32, 108), ],
  [s(965, 227), s(308, 489), s(-59, -170), s(218, -374), s(96, 190), s(-9, -4), s(261, 1), s(125, -57), ],
  [s(393, 240), s(616, 281), s(-412, -271), s(84, -347), s(234, -284), s(-9, -3), s(351, -3), s(109, 310), ],
  [s(-19, 281), s(137, -278), s(60, -412), s(240, -477), s(-99, -467), s(-4, -31), s(237, -22), s(184, -121), ],
  [s(-215, 295), s(384, -41), s(-241, -298), s(-143, -283), s(341, -415), s(0, -14), s(200, -18), s(-122, -45), ],
  [s(-110, 591), s(-149, 31), s(-204, -169), s(-32, -616), s(219, -384), s(-16, -10), s(276, -11), s(-54, -110), ],
  [s(49, 310), s(186, -207), s(-325, -273), s(66, -257), s(-78, -535), s(3, -4), s(275, -15), s(-27, -141), ],
  [s(-392, 511), s(-125, 81), s(-29, -148), s(6, -427), s(135, -294), s(-6, -6), s(170, -6), s(-117, -126), ],
  [s(-31, 739), s(414, -225), s(-92, -276), s(164, -336), s(45, -921), s(-11, -13), s(-118, -20), s(-153, -493), ],
  [s(122, 880), s(212, -197), s(11, -54), s(45, -374), s(46, -915), s(-9, -25), s(-209, -18), s(-109, -345), ],
  [s(-19, 580), s(34, 50), s(-129, -211), s(87, -195), s(38, -511), s(0, -8), s(152, -20), s(-57, -372), ],
  [s(54, 663), s(191, -87), s(-67, -182), s(-56, -472), s(241, -468), s(-8, -33), s(-312, -22), s(-110, -655), ],
  [s(18, 269), s(366, -411), s(-365, -113), s(30, -204), s(6, -582), s(2, -3), s(-97, -9), s(239, -539), ],
  [s(-161, 885), s(6, -179), s(-222, -288), s(150, -63), s(-425, -1127), s(-10, -22), s(108, -3), s(-73, -609), ],
  [s(-318, 791), s(234, -326), s(-156, -32), s(-22, -47), s(-86, -1185), s(10, -18), s(-219, -5), s(64, -558), ],
  [s(-193, 531), s(36, -642), s(-373, -4), s(6, -542), s(-260, -771), s(2, -22), s(-128, -5), s(7, -632), ],
  [s(69, 314), s(421, -786), s(-303, 247), s(52, -376), s(0, -990), s(-8, -1), s(36, 2), s(279, -683), ],
  [s(-179, 416), s(331, -129), s(-269, 15), s(-61, -467), s(90, -331), s(-16, -47), s(-234, -36), s(178, -684), ],
  [s(-214, 286), s(269, -436), s(-312, 19), s(-8, -17), s(239, -753), s(-3, -23), s(342, -7), s(603, -690), ],
  [s(-473, 286), s(227, -89), s(-423, 161), s(105, 150), s(124, -524), s(1, -37), s(381, -29), s(74, -500), ],
],
[
  [s(473, 318), s(225, 218), s(-41, -419), s(-95, -82), s(453, -274), s(-14, 1), s(609, 1), s(32, 108), ],
  [s(965, 227), s(308, 489), s(-59, -170), s(218, -374), s(96, 190), s(-9, -4), s(261, 1), s(125, -57), ],
  [s(393, 240), s(616, 281), s(-412, -271), s(84, -347), s(234, -284), s(-9, -3), s(351, -3), s(109, 310), ],
  [s(-19, 281), s(137, -278), s(60, -412), s(240, -477), s(-99, -467), s(-4, -31), s(237, -22), s(184, -121), ],
  [s(-215, 295), s(384, -41), s(-241, -298), s(-143, -283), s(341, -415), s(0, -14), s(200, -18), s(-122, -45), ],
  [s(-110, 591), s(-149, 31), s(-204, -169), s(-32, -616), s(219, -384), s(-16, -10), s(276, -11), s(-54, -110), ],
  [s(49, 310), s(186, -207), s(-325, -273), s(66, -257), s(-78, -535), s(3, -4), s(275, -15), s(-27, -141), ],
  [s(-392, 511), s(-125, 81), s(-29, -148), s(6, -427), s(135, -294), s(-6, -6), s(170, -6), s(-117, -126), ],
  [s(-31, 739), s(414, -225), s(-92, -276), s(164, -336), s(45, -921), s(-11, -13), s(-118, -20), s(-153, -493), ],
  [s(122, 880), s(212, -197), s(11, -54), s(45, -374), s(46, -915), s(-9, -25), s(-209, -18), s(-109, -345), ],
  [s(-19, 580), s(34, 50), s(-129, -211), s(87, -195), s(38, -511), s(0, -8), s(152, -20), s(-57, -372), ],
  [s(54, 663), s(191, -87), s(-67, -182), s(-56, -472), s(241, -468), s(-8, -33), s(-312, -22), s(-110, -655), ],
  [s(18, 269), s(366, -411), s(-365, -113), s(30, -204), s(6, -582), s(2, -3), s(-97, -9), s(239, -539), ],
  [s(-161, 885), s(6, -179), s(-222, -288), s(150, -63), s(-425, -1127), s(-10, -22), s(108, -3), s(-73, -609), ],
  [s(-318, 791), s(234, -326), s(-156, -32), s(-22, -47), s(-86, -1185), s(10, -18), s(-219, -5), s(64, -558), ],
  [s(-193, 531), s(36, -642), s(-373, -4), s(6, -542), s(-260, -771), s(2, -22), s(-128, -5), s(7, -632), ],
  [s(69, 314), s(421, -786), s(-303, 247), s(52, -376), s(0, -990), s(-8, -1), s(36, 2), s(279, -683), ],
  [s(-179, 416), s(331, -129), s(-269, 15), s(-61, -467), s(90, -331), s(-16, -47), s(-234, -36), s(178, -684), ],
  [s(-214, 286), s(269, -436), s(-312, 19), s(-8, -17), s(239, -753), s(-3, -23), s(342, -7), s(603, -690), ],
  [s(-473, 286), s(227, -89), s(-423, 161), s(105, 150), s(124, -524), s(1, -37), s(381, -29), s(74, -500), ],
  [s(-1096, -917), s(739, -3593), s(-108, 157), s(-108, 584), s(401, -76), s(2, 1), s(-122, -10), s(340, -187), ],
  [s(-932, -215), s(-136, -1572), s(-703, 516), s(-308, 855), s(353, -386), s(-1, 8), s(-93, 0), s(110, 78), ],
  [s(-137, -1043), s(208, -1826), s(-750, -231), s(-304, 1325), s(-67, 268), s(7, -9), s(62, -12), s(33, -762), ],
  [s(-976, -1914), s(561, -1893), s(605, 670), s(900, 1693), s(175, -527), s(0, -5), s(-578, 1), s(287, 1514), ],
],
];

pub const DEFENDING_PIECE_LOCATIONS: [[[ScoreTuple; 8]; 24]; 4] = [
[
  [s(-930, 45), s(431, -383), s(-299, 632), s(334, -223), s(34, -351), s(-11, 7), s(-322, -13), s(120, 292), ],
  [s(-1326, -499), s(159, -178), s(-489, -22), s(-98, 353), s(290, 118), s(0, -2), s(-452, 5), s(8, 257), ],
  [s(-1052, 365), s(430, 419), s(-1178, -323), s(-456, 368), s(533, -191), s(4, -3), s(-258, 2), s(83, 265), ],
  [s(-29, 358), s(-117, 65), s(-129, 36), s(-149, -79), s(344, -181), s(-14, -4), s(31, -3), s(58, -189), ],
  [s(-1014, -111), s(-93, 29), s(50, -16), s(263, 179), s(662, -34), s(-10, -7), s(195, -12), s(-184, 331), ],
  [s(-1082, -36), s(-64, 15), s(-386, -152), s(-137, 123), s(217, -197), s(-3, 6), s(-61, -7), s(91, 369), ],
  [s(-858, -25), s(-18, -67), s(-488, 210), s(-110, -4), s(309, 37), s(0, -9), s(56, -3), s(0, 148), ],
  [s(-416, -28), s(-21, -123), s(-123, -188), s(-164, 5), s(621, -167), s(-12, -11), s(-59, -21), s(-252, 42), ],
  [s(-404, 82), s(-213, -419), s(-405, 20), s(-75, 9), s(440, -487), s(-23, -66), s(275, -42), s(-37, 1), ],
  [s(-828, -149), s(-97, -113), s(-142, 152), s(-315, 94), s(560, -4), s(-7, -9), s(53, -6), s(-243, 41), ],
  [s(80, 76), s(-98, 25), s(-109, 92), s(-440, -78), s(137, 84), s(-1, -29), s(-730, -18), s(-48, 39), ],
  [s(-228, -15), s(-428, -101), s(-372, 303), s(-242, 129), s(185, 51), s(-3, -26), s(-105, -20), s(-154, 58), ],
  [s(-353, -94), s(-163, 115), s(-349, 101), s(-394, -88), s(380, 321), s(-17, -22), s(11, -6), s(-427, 225), ],
  [s(-238, -165), s(-86, 198), s(-468, 526), s(-305, 254), s(281, 463), s(4, -18), s(-181, -23), s(-161, 92), ],
  [s(-140, -230), s(-278, -50), s(-152, 331), s(-319, 47), s(144, 259), s(12, -19), s(-141, -2), s(-146, 160), ],
  [s(-389, -124), s(30, -88), s(-123, 192), s(-148, -206), s(331, 262), s(-8, -7), s(-152, -4), s(-230, 93), ],
  [s(-91, 46), s(-431, 185), s(-339, 300), s(-404, 21), s(396, 276), s(-10, -5), s(13, 2), s(-15, 150), ],
  [s(40, -81), s(-54, 154), s(-147, 243), s(-409, 30), s(379, 328), s(3, -30), s(-33, -7), s(-297, -45), ],
  [s(-330, -148), s(-146, 17), s(-297, 246), s(-335, 74), s(113, 151), s(-2, -18), s(-158, -19), s(-139, 148), ],
  [s(175, -216), s(-224, 256), s(-535, 160), s(-392, 139), s(261, 385), s(10, -12), s(-190, -3), s(97, 146), ],
  [s(300, -128), s(-561, 413), s(-177, 84), s(-673, 165), s(293, 503), s(11, -20), s(-71, -2), s(-45, 14), ],
  [s(282, -227), s(-53, 165), s(-122, 126), s(-544, 347), s(341, -10), s(-7, -13), s(-203, 4), s(-104, 105), ],
  [s(234, -234), s(-400, 188), s(-127, -87), s(-561, 211), s(255, 280), s(-4, -11), s(-350, 0), s(204, -50), ],
  [s(628, -203), s(-169, 499), s(-133, 79), s(-580, 475), s(457, 541), s(13, -11), s(-311, -5), s(-127, -185), ],
],
[
  [s(-1014, -111), s(-93, 29), s(50, -16), s(263, 179), s(662, -34), s(-10, -7), s(195, -12), s(-184, 331), ],
  [s(-1082, -36), s(-64, 15), s(-386, -152), s(-137, 123), s(217, -197), s(-3, 6), s(-61, -7), s(91, 369), ],
  [s(-858, -25), s(-18, -67), s(-488, 210), s(-110, -4), s(309, 37), s(0, -9), s(56, -3), s(0, 148), ],
  [s(-416, -28), s(-21, -123), s(-123, -188), s(-164, 5), s(621, -167), s(-12, -11), s(-59, -21), s(-252, 42), ],
  [s(-404, 82), s(-213, -419), s(-405, 20), s(-75, 9), s(440, -487), s(-23, -66), s(275, -42), s(-37, 1), ],
  [s(-828, -149), s(-97, -113), s(-142, 152), s(-315, 94), s(560, -4), s(-7, -9), s(53, -6), s(-243, 41), ],
  [s(80, 76), s(-98, 25), s(-109, 92), s(-440, -78), s(137, 84), s(-1, -29), s(-730, -18), s(-48, 39), ],
  [s(-228, -15), s(-428, -101), s(-372, 303), s(-242, 129), s(185, 51), s(-3, -26), s(-105, -20), s(-154, 58), ],
  [s(-353, -94), s(-163, 115), s(-349, 101), s(-394, -88), s(380, 321), s(-17, -22), s(11, -6), s(-427, 225), ],
  [s(-238, -165), s(-86, 198), s(-468, 526), s(-305, 254), s(281, 463), s(4, -18), s(-181, -23), s(-161, 92), ],
  [s(-140, -230), s(-278, -50), s(-152, 331), s(-319, 47), s(144, 259), s(12, -19), s(-141, -2), s(-146, 160), ],
  [s(-389, -124), s(30, -88), s(-123, 192), s(-148, -206), s(331, 262), s(-8, -7), s(-152, -4), s(-230, 93), ],
  [s(-91, 46), s(-431, 185), s(-339, 300), s(-404, 21), s(396, 276), s(-10, -5), s(13, 2), s(-15, 150), ],
  [s(40, -81), s(-54, 154), s(-147, 243), s(-409, 30), s(379, 328), s(3, -30), s(-33, -7), s(-297, -45), ],
  [s(-330, -148), s(-146, 17), s(-297, 246), s(-335, 74), s(113, 151), s(-2, -18), s(-158, -19), s(-139, 148), ],
  [s(175, -216), s(-224, 256), s(-535, 160), s(-392, 139), s(261, 385), s(10, -12), s(-190, -3), s(97, 146), ],
  [s(300, -128), s(-561, 413), s(-177, 84), s(-673, 165), s(293, 503), s(11, -20), s(-71, -2), s(-45, 14), ],
  [s(282, -227), s(-53, 165), s(-122, 126), s(-544, 347), s(341, -10), s(-7, -13), s(-203, 4), s(-104, 105), ],
  [s(234, -234), s(-400, 188), s(-127, -87), s(-561, 211), s(255, 280), s(-4, -11), s(-350, 0), s(204, -50), ],
  [s(628, -203), s(-169, 499), s(-133, 79), s(-580, 475), s(457, 541), s(13, -11), s(-311, -5), s(-127, -185), ],
  [s(235, -215), s(-255, 435), s(299, 114), s(-339, 439), s(227, 393), s(3, 0), s(-372, -3), s(-17, 32), ],
  [s(223, -172), s(40, 157), s(-58, 83), s(-587, 263), s(387, 157), s(9, -11), s(-635, -15), s(229, -1), ],
  [s(541, -171), s(-205, 386), s(-93, -23), s(-553, -11), s(483, 690), s(-6, -10), s(-613, -13), s(84, -227), ],
  [s(31, -303), s(-81, 450), s(-174, -64), s(-257, 680), s(213, 361), s(-9, 3), s(139, -13), s(-412, -169), ],
],
[
  [s(-404, 82), s(-213, -419), s(-405, 20), s(-75, 9), s(440, -487), s(-23, -66), s(275, -42), s(-37, 1), ],
  [s(-828, -149), s(-97, -113), s(-142, 152), s(-315, 94), s(560, -4), s(-7, -9), s(53, -6), s(-243, 41), ],
  [s(80, 76), s(-98, 25), s(-109, 92), s(-440, -78), s(137, 84), s(-1, -29), s(-730, -18), s(-48, 39), ],
  [s(-228, -15), s(-428, -101), s(-372, 303), s(-242, 129), s(185, 51), s(-3, -26), s(-105, -20), s(-154, 58), ],
  [s(-353, -94), s(-163, 115), s(-349, 101), s(-394, -88), s(380, 321), s(-17, -22), s(11, -6), s(-427, 225), ],
  [s(-238, -165), s(-86, 198), s(-468, 526), s(-305, 254), s(281, 463), s(4, -18), s(-181, -23), s(-161, 92), ],
  [s(-140, -230), s(-278, -50), s(-152, 331), s(-319, 47), s(144, 259), s(12, -19), s(-141, -2), s(-146, 160), ],
  [s(-389, -124), s(30, -88), s(-123, 192), s(-148, -206), s(331, 262), s(-8, -7), s(-152, -4), s(-230, 93), ],
  [s(-91, 46), s(-431, 185), s(-339, 300), s(-404, 21), s(396, 276), s(-10, -5), s(13, 2), s(-15, 150), ],
  [s(40, -81), s(-54, 154), s(-147, 243), s(-409, 30), s(379, 328), s(3, -30), s(-33, -7), s(-297, -45), ],
  [s(-330, -148), s(-146, 17), s(-297, 246), s(-335, 74), s(113, 151), s(-2, -18), s(-158, -19), s(-139, 148), ],
  [s(175, -216), s(-224, 256), s(-535, 160), s(-392, 139), s(261, 385), s(10, -12), s(-190, -3), s(97, 146), ],
  [s(300, -128), s(-561, 413), s(-177, 84), s(-673, 165), s(293, 503), s(11, -20), s(-71, -2), s(-45, 14), ],
  [s(282, -227), s(-53, 165), s(-122, 126), s(-544, 347), s(341, -10), s(-7, -13), s(-203, 4), s(-104, 105), ],
  [s(234, -234), s(-400, 188), s(-127, -87), s(-561, 211), s(255, 280), s(-4, -11), s(-350, 0), s(204, -50), ],
  [s(628, -203), s(-169, 499), s(-133, 79), s(-580, 475), s(457, 541), s(13, -11), s(-311, -5), s(-127, -185), ],
  [s(235, -215), s(-255, 435), s(299, 114), s(-339, 439), s(227, 393), s(3, 0), s(-372, -3), s(-17, 32), ],
  [s(223, -172), s(40, 157), s(-58, 83), s(-587, 263), s(387, 157), s(9, -11), s(-635, -15), s(229, -1), ],
  [s(541, -171), s(-205, 386), s(-93, -23), s(-553, -11), s(483, 690), s(-6, -10), s(-613, -13), s(84, -227), ],
  [s(31, -303), s(-81, 450), s(-174, -64), s(-257, 680), s(213, 361), s(-9, 3), s(139, -13), s(-412, -169), ],
  [s(-40, -214), s(391, 442), s(114, 53), s(414, 257), s(215, 394), s(13, -6), s(-154, -9), s(243, 23), ],
  [s(218, -124), s(108, 915), s(449, -161), s(-917, 157), s(600, 667), s(13, 7), s(-646, 6), s(-264, 51), ],
  [s(234, -498), s(1146, 654), s(481, 62), s(1165, 934), s(0, 231), s(7, -9), s(-138, -4), s(-73, -132), ],
  [s(-756, -556), s(837, 307), s(662, 423), s(-585, 445), s(2340, 133), s(-9, 2), s(1167, -12), s(-102, 279), ],
],
[
  [s(-353, -94), s(-163, 115), s(-349, 101), s(-394, -88), s(380, 321), s(-17, -22), s(11, -6), s(-427, 225), ],
  [s(-238, -165), s(-86, 198), s(-468, 526), s(-305, 254), s(281, 463), s(4, -18), s(-181, -23), s(-161, 92), ],
  [s(-140, -230), s(-278, -50), s(-152, 331), s(-319, 47), s(144, 259), s(12, -19), s(-141, -2), s(-146, 160), ],
  [s(-389, -124), s(30, -88), s(-123, 192), s(-148, -206), s(331, 262), s(-8, -7), s(-152, -4), s(-230, 93), ],
  [s(-91, 46), s(-431, 185), s(-339, 300), s(-404, 21), s(396, 276), s(-10, -5), s(13, 2), s(-15, 150), ],
  [s(40, -81), s(-54, 154), s(-147, 243), s(-409, 30), s(379, 328), s(3, -30), s(-33, -7), s(-297, -45), ],
  [s(-330, -148), s(-146, 17), s(-297, 246), s(-335, 74), s(113, 151), s(-2, -18), s(-158, -19), s(-139, 148), ],
  [s(175, -216), s(-224, 256), s(-535, 160), s(-392, 139), s(261, 385), s(10, -12), s(-190, -3), s(97, 146), ],
  [s(300, -128), s(-561, 413), s(-177, 84), s(-673, 165), s(293, 503), s(11, -20), s(-71, -2), s(-45, 14), ],
  [s(282, -227), s(-53, 165), s(-122, 126), s(-544, 347), s(341, -10), s(-7, -13), s(-203, 4), s(-104, 105), ],
  [s(234, -234), s(-400, 188), s(-127, -87), s(-561, 211), s(255, 280), s(-4, -11), s(-350, 0), s(204, -50), ],
  [s(628, -203), s(-169, 499), s(-133, 79), s(-580, 475), s(457, 541), s(13, -11), s(-311, -5), s(-127, -185), ],
  [s(235, -215), s(-255, 435), s(299, 114), s(-339, 439), s(227, 393), s(3, 0), s(-372, -3), s(-17, 32), ],
  [s(223, -172), s(40, 157), s(-58, 83), s(-587, 263), s(387, 157), s(9, -11), s(-635, -15), s(229, -1), ],
  [s(541, -171), s(-205, 386), s(-93, -23), s(-553, -11), s(483, 690), s(-6, -10), s(-613, -13), s(84, -227), ],
  [s(31, -303), s(-81, 450), s(-174, -64), s(-257, 680), s(213, 361), s(-9, 3), s(139, -13), s(-412, -169), ],
  [s(-40, -214), s(391, 442), s(114, 53), s(414, 257), s(215, 394), s(13, -6), s(-154, -9), s(243, 23), ],
  [s(218, -124), s(108, 915), s(449, -161), s(-917, 157), s(600, 667), s(13, 7), s(-646, 6), s(-264, 51), ],
  [s(234, -498), s(1146, 654), s(481, 62), s(1165, 934), s(0, 231), s(7, -9), s(-138, -4), s(-73, -132), ],
  [s(-756, -556), s(837, 307), s(662, 423), s(-585, 445), s(2340, 133), s(-9, 2), s(1167, -12), s(-102, 279), ],
  [s(424, 38), s(1200, 890), s(-111, 73), s(558, -1319), s(1274, 323), s(-2, 3), s(-496, 1), s(129, 154), ],
  [s(902, -1046), s(-375, 427), s(-257, -37), s(1196, -1479), s(-1287, 676), s(7, 5), s(-83, -5), s(-730, -846), ],
  [s(-817, -961), s(1088, 19), s(1600, 13), s(3817, -539), s(-1794, 530), s(2, 9), s(611, 5), s(-434, -645), ],
  [s(-877, -279), s(-114, 929), s(1765, -55), s(357, -766), s(989, -623), s(-1, -13), s(-1281, -13), s(593, -159), ],
],
];

pub const HIDDEN_BIASES: [ScoreTuple; 8] = 
  [s(-153, 534), s(1001, 1011), s(461, -606), s(-126, 727), s(-1144, 2921), s(-44, -108), s(653, -96), s(787, -1006), ];

pub const OUTPUT_WEIGHTS: [ScoreTuple; 8] = 
  [s(800, 957), s(613, -891), s(569, -751), s(-652, 706), s(-516, 794), s(53, -26), s(673, 66), s(893, 697), ];

pub const OUTPUT_BIAS: ScoreTuple = s(0, 0);

/*
fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
desc: startpos
output: S(-70.3891054281304, 304.25809578753666) - S(-70.3891054281304, 304.25809578753666)
= S(0, 0)

fen: r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1
desc: kiwipete
output: S(-66.53250292092198, 280.1429249175665) - S(-99.03033219800113, 227.324540939261)
= S(32.49782927707915, 52.81838397830552)

fen: r1bq1b1r/ppp2kpp/2n5/3np3/2B5/8/PPPP1PPP/RNBQK2R w KQ - 0 7
desc: fried liver attack
output: S(-16.603079828420864, 311.4476032433754) - S(8.780624954218085, 281.4641691262088)
= S(-25.38370478263895, 29.98343411716661)

fen: 1r2r1k1/pbp1qpp1/1p1p4/4nPR1/4P3/P1N4P/1PPQB3/1K1R4 w - - 1 24
desc: wahoo vs akimbo
output: S(48.42810691618246, 180.64091578811997) - S(-86.22474615070905, 278.39137493657665)
= S(134.6528530668915, -97.75045914845668)

fen: 2kr3r/ppp1qppp/2b2n2/4p3/4P3/P1P2Q2/P1B2PPP/R1B2RK1 w - - 7 14
output: S(-54.159274151368614, 263.8937763604754) - S(-97.07413686974171, 240.9284191068367)
= S(42.914862718373094, 22.965357253638672)

fen: rnbq1b1r/ppPknQ1p/3pp3/1B6/5pp1/BP2P3/P1PK1PPP/RN4NR b - - 4 11
output: S(-56.6555322917036, 83.40441068324337) - S(-74.11411903627143, 229.7687856413641)
= S(17.45858674456783, -146.36437495812072)

fen: 8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1
output: S(137.39446169193374, 61.04158378007904) - S(97.75289585960644, 64.05618678129309)
= S(39.6415658323273, -3.0146030012140557)

fen: 8/3kp1p1/8/1p6/4PP2/5K2/1P6/8 w - - 0 1
output: S(101.1160305262905, 193.73785403609975) - S(19.085616935512423, 171.640408600378)
= S(82.03041359077808, 22.09744543572174)

fen: 2k1n3/3bp1p1/8/1p6/4PP2/5K2/1P2R3/8 w - - 0 1
output: S(77.23020148269485, 209.63704456415033) - S(34.18527263647545, 184.0874221733108)
= S(43.0449288462194, 25.549622390839517)

fen: 8/8/3bk2p/1r2p1pP/p1p3P1/P1B1K3/1PP5/5R2 b - - 25 52
output: S(158.59784869619284, 109.92609740610335) - S(65.268561788017, 170.9828201669189)
= S(93.32928690817585, -61.05672276081556)

*/
